
Smart_Home.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000504c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000004da  00800060  0000504c  000050e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000037  0080053a  0080053a  000055ba  2**0
                  ALLOC
  3 .stab         00004fec  00000000  00000000  000055bc  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001a7c  00000000  00000000  0000a5a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  0000c024  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f2  00000000  00000000  0000c1c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240b  00000000  00000000  0000c3b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001386  00000000  00000000  0000e7c1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d6  00000000  00000000  0000fb47  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  00010d20  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f6  00000000  00000000  00010ee0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  000111d6  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00011b44  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 6f 16 	jmp	0x2cde	; 0x2cde <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 45 1d 	jmp	0x3a8a	; 0x3a8a <__vector_10>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 e5 1f 	jmp	0x3fca	; 0x3fca <__vector_13>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 fe 07 	jmp	0xffc	; 0xffc <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	15 e0       	ldi	r17, 0x05	; 5
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec e4       	ldi	r30, 0x4C	; 76
      68:	f0 e5       	ldi	r31, 0x50	; 80
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 33       	cpi	r26, 0x3A	; 58
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	15 e0       	ldi	r17, 0x05	; 5
      78:	aa e3       	ldi	r26, 0x3A	; 58
      7a:	b5 e0       	ldi	r27, 0x05	; 5
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a1 37       	cpi	r26, 0x71	; 113
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 20 20 	call	0x4040	; 0x4040 <main>
      8a:	0c 94 24 28 	jmp	0x5048	; 0x5048 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 ed 27 	jmp	0x4fda	; 0x4fda <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a3 e2       	ldi	r26, 0x23	; 35
     128:	b4 e0       	ldi	r27, 0x04	; 4
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 09 28 	jmp	0x5012	; 0x5012 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 f9 27 	jmp	0x4ff2	; 0x4ff2 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 15 28 	jmp	0x502a	; 0x502a <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 f9 27 	jmp	0x4ff2	; 0x4ff2 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 15 28 	jmp	0x502a	; 0x502a <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 ed 27 	jmp	0x4fda	; 0x4fda <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	83 e2       	ldi	r24, 0x23	; 35
     496:	94 e0       	ldi	r25, 0x04	; 4
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 09 28 	jmp	0x5012	; 0x5012 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 f5 27 	jmp	0x4fea	; 0x4fea <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	63 e2       	ldi	r22, 0x23	; 35
     69c:	74 e0       	ldi	r23, 0x04	; 4
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 11 28 	jmp	0x5022	; 0x5022 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 f9 27 	jmp	0x4ff2	; 0x4ff2 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 15 28 	jmp	0x502a	; 0x502a <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 f9 27 	jmp	0x4ff2	; 0x4ff2 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 15 28 	jmp	0x502a	; 0x502a <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 f9 27 	jmp	0x4ff2	; 0x4ff2 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 15 28 	jmp	0x502a	; 0x502a <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 fd 27 	jmp	0x4ffa	; 0x4ffa <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 19 28 	jmp	0x5032	; 0x5032 <__epilogue_restores__+0x20>

00000952 <__floatunsisf>:
     952:	a8 e0       	ldi	r26, 0x08	; 8
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	ef ea       	ldi	r30, 0xAF	; 175
     958:	f4 e0       	ldi	r31, 0x04	; 4
     95a:	0c 94 f5 27 	jmp	0x4fea	; 0x4fea <__prologue_saves__+0x10>
     95e:	7b 01       	movw	r14, r22
     960:	8c 01       	movw	r16, r24
     962:	61 15       	cp	r22, r1
     964:	71 05       	cpc	r23, r1
     966:	81 05       	cpc	r24, r1
     968:	91 05       	cpc	r25, r1
     96a:	19 f4       	brne	.+6      	; 0x972 <__floatunsisf+0x20>
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	89 83       	std	Y+1, r24	; 0x01
     970:	60 c0       	rjmp	.+192    	; 0xa32 <__floatunsisf+0xe0>
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	8e e1       	ldi	r24, 0x1E	; 30
     978:	c8 2e       	mov	r12, r24
     97a:	d1 2c       	mov	r13, r1
     97c:	dc 82       	std	Y+4, r13	; 0x04
     97e:	cb 82       	std	Y+3, r12	; 0x03
     980:	ed 82       	std	Y+5, r14	; 0x05
     982:	fe 82       	std	Y+6, r15	; 0x06
     984:	0f 83       	std	Y+7, r16	; 0x07
     986:	18 87       	std	Y+8, r17	; 0x08
     988:	c8 01       	movw	r24, r16
     98a:	b7 01       	movw	r22, r14
     98c:	0e 94 22 05 	call	0xa44	; 0xa44 <__clzsi2>
     990:	fc 01       	movw	r30, r24
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	f7 ff       	sbrs	r31, 7
     996:	3b c0       	rjmp	.+118    	; 0xa0e <__floatunsisf+0xbc>
     998:	22 27       	eor	r18, r18
     99a:	33 27       	eor	r19, r19
     99c:	2e 1b       	sub	r18, r30
     99e:	3f 0b       	sbc	r19, r31
     9a0:	57 01       	movw	r10, r14
     9a2:	68 01       	movw	r12, r16
     9a4:	02 2e       	mov	r0, r18
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__floatunsisf+0x5e>
     9a8:	d6 94       	lsr	r13
     9aa:	c7 94       	ror	r12
     9ac:	b7 94       	ror	r11
     9ae:	a7 94       	ror	r10
     9b0:	0a 94       	dec	r0
     9b2:	d2 f7       	brpl	.-12     	; 0x9a8 <__floatunsisf+0x56>
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a0 e0       	ldi	r26, 0x00	; 0
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__floatunsisf+0x7c>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	aa 1f       	adc	r26, r26
     9cc:	bb 1f       	adc	r27, r27
     9ce:	2a 95       	dec	r18
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__floatunsisf+0x74>
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	a1 09       	sbc	r26, r1
     9d6:	b1 09       	sbc	r27, r1
     9d8:	8e 21       	and	r24, r14
     9da:	9f 21       	and	r25, r15
     9dc:	a0 23       	and	r26, r16
     9de:	b1 23       	and	r27, r17
     9e0:	00 97       	sbiw	r24, 0x00	; 0
     9e2:	a1 05       	cpc	r26, r1
     9e4:	b1 05       	cpc	r27, r1
     9e6:	21 f0       	breq	.+8      	; 0x9f0 <__floatunsisf+0x9e>
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	4a 29       	or	r20, r10
     9f2:	5b 29       	or	r21, r11
     9f4:	6c 29       	or	r22, r12
     9f6:	7d 29       	or	r23, r13
     9f8:	4d 83       	std	Y+5, r20	; 0x05
     9fa:	5e 83       	std	Y+6, r21	; 0x06
     9fc:	6f 83       	std	Y+7, r22	; 0x07
     9fe:	78 87       	std	Y+8, r23	; 0x08
     a00:	8e e1       	ldi	r24, 0x1E	; 30
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	8e 1b       	sub	r24, r30
     a06:	9f 0b       	sbc	r25, r31
     a08:	9c 83       	std	Y+4, r25	; 0x04
     a0a:	8b 83       	std	Y+3, r24	; 0x03
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__floatunsisf+0xe0>
     a0e:	30 97       	sbiw	r30, 0x00	; 0
     a10:	81 f0       	breq	.+32     	; 0xa32 <__floatunsisf+0xe0>
     a12:	0e 2e       	mov	r0, r30
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__floatunsisf+0xcc>
     a16:	ee 0c       	add	r14, r14
     a18:	ff 1c       	adc	r15, r15
     a1a:	00 1f       	adc	r16, r16
     a1c:	11 1f       	adc	r17, r17
     a1e:	0a 94       	dec	r0
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__floatunsisf+0xc4>
     a22:	ed 82       	std	Y+5, r14	; 0x05
     a24:	fe 82       	std	Y+6, r15	; 0x06
     a26:	0f 83       	std	Y+7, r16	; 0x07
     a28:	18 87       	std	Y+8, r17	; 0x08
     a2a:	ce 1a       	sub	r12, r30
     a2c:	df 0a       	sbc	r13, r31
     a2e:	dc 82       	std	Y+4, r13	; 0x04
     a30:	cb 82       	std	Y+3, r12	; 0x03
     a32:	1a 82       	std	Y+2, r1	; 0x02
     a34:	ce 01       	movw	r24, r28
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     a3c:	28 96       	adiw	r28, 0x08	; 8
     a3e:	ea e0       	ldi	r30, 0x0A	; 10
     a40:	0c 94 11 28 	jmp	0x5022	; 0x5022 <__epilogue_restores__+0x10>

00000a44 <__clzsi2>:
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	7b 01       	movw	r14, r22
     a4e:	8c 01       	movw	r16, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	e8 16       	cp	r14, r24
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	f8 06       	cpc	r15, r24
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	08 07       	cpc	r16, r24
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	18 07       	cpc	r17, r24
     a60:	88 f4       	brcc	.+34     	; 0xa84 <__clzsi2+0x40>
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	e8 16       	cp	r14, r24
     a66:	f1 04       	cpc	r15, r1
     a68:	01 05       	cpc	r16, r1
     a6a:	11 05       	cpc	r17, r1
     a6c:	31 f0       	breq	.+12     	; 0xa7a <__clzsi2+0x36>
     a6e:	28 f0       	brcs	.+10     	; 0xa7a <__clzsi2+0x36>
     a70:	88 e0       	ldi	r24, 0x08	; 8
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	a0 e0       	ldi	r26, 0x00	; 0
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	17 c0       	rjmp	.+46     	; 0xaa8 <__clzsi2+0x64>
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a0 e0       	ldi	r26, 0x00	; 0
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	12 c0       	rjmp	.+36     	; 0xaa8 <__clzsi2+0x64>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	e8 16       	cp	r14, r24
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	f8 06       	cpc	r15, r24
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	08 07       	cpc	r16, r24
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	18 07       	cpc	r17, r24
     a94:	28 f0       	brcs	.+10     	; 0xaa0 <__clzsi2+0x5c>
     a96:	88 e1       	ldi	r24, 0x18	; 24
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__clzsi2+0x64>
     aa0:	80 e1       	ldi	r24, 0x10	; 16
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	20 e2       	ldi	r18, 0x20	; 32
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	28 1b       	sub	r18, r24
     ab2:	39 0b       	sbc	r19, r25
     ab4:	4a 0b       	sbc	r20, r26
     ab6:	5b 0b       	sbc	r21, r27
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__clzsi2+0x7e>
     aba:	16 95       	lsr	r17
     abc:	07 95       	ror	r16
     abe:	f7 94       	ror	r15
     ac0:	e7 94       	ror	r14
     ac2:	8a 95       	dec	r24
     ac4:	d2 f7       	brpl	.-12     	; 0xaba <__clzsi2+0x76>
     ac6:	f7 01       	movw	r30, r14
     ac8:	e5 5d       	subi	r30, 0xD5	; 213
     aca:	fb 4f       	sbci	r31, 0xFB	; 251
     acc:	80 81       	ld	r24, Z
     ace:	28 1b       	sub	r18, r24
     ad0:	31 09       	sbc	r19, r1
     ad2:	41 09       	sbc	r20, r1
     ad4:	51 09       	sbc	r21, r1
     ad6:	c9 01       	movw	r24, r18
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	08 95       	ret

00000ae2 <__pack_f>:
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	fc 01       	movw	r30, r24
     aee:	e4 80       	ldd	r14, Z+4	; 0x04
     af0:	f5 80       	ldd	r15, Z+5	; 0x05
     af2:	06 81       	ldd	r16, Z+6	; 0x06
     af4:	17 81       	ldd	r17, Z+7	; 0x07
     af6:	d1 80       	ldd	r13, Z+1	; 0x01
     af8:	80 81       	ld	r24, Z
     afa:	82 30       	cpi	r24, 0x02	; 2
     afc:	48 f4       	brcc	.+18     	; 0xb10 <__pack_f+0x2e>
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a0 e1       	ldi	r26, 0x10	; 16
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 2a       	or	r14, r24
     b08:	f9 2a       	or	r15, r25
     b0a:	0a 2b       	or	r16, r26
     b0c:	1b 2b       	or	r17, r27
     b0e:	a5 c0       	rjmp	.+330    	; 0xc5a <__pack_f+0x178>
     b10:	84 30       	cpi	r24, 0x04	; 4
     b12:	09 f4       	brne	.+2      	; 0xb16 <__pack_f+0x34>
     b14:	9f c0       	rjmp	.+318    	; 0xc54 <__pack_f+0x172>
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	21 f4       	brne	.+8      	; 0xb22 <__pack_f+0x40>
     b1a:	ee 24       	eor	r14, r14
     b1c:	ff 24       	eor	r15, r15
     b1e:	87 01       	movw	r16, r14
     b20:	05 c0       	rjmp	.+10     	; 0xb2c <__pack_f+0x4a>
     b22:	e1 14       	cp	r14, r1
     b24:	f1 04       	cpc	r15, r1
     b26:	01 05       	cpc	r16, r1
     b28:	11 05       	cpc	r17, r1
     b2a:	19 f4       	brne	.+6      	; 0xb32 <__pack_f+0x50>
     b2c:	e0 e0       	ldi	r30, 0x00	; 0
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	96 c0       	rjmp	.+300    	; 0xc5e <__pack_f+0x17c>
     b32:	62 81       	ldd	r22, Z+2	; 0x02
     b34:	73 81       	ldd	r23, Z+3	; 0x03
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	62 38       	cpi	r22, 0x82	; 130
     b3a:	79 07       	cpc	r23, r25
     b3c:	0c f0       	brlt	.+2      	; 0xb40 <__pack_f+0x5e>
     b3e:	5b c0       	rjmp	.+182    	; 0xbf6 <__pack_f+0x114>
     b40:	22 e8       	ldi	r18, 0x82	; 130
     b42:	3f ef       	ldi	r19, 0xFF	; 255
     b44:	26 1b       	sub	r18, r22
     b46:	37 0b       	sbc	r19, r23
     b48:	2a 31       	cpi	r18, 0x1A	; 26
     b4a:	31 05       	cpc	r19, r1
     b4c:	2c f0       	brlt	.+10     	; 0xb58 <__pack_f+0x76>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	2a c0       	rjmp	.+84     	; 0xbac <__pack_f+0xca>
     b58:	b8 01       	movw	r22, r16
     b5a:	a7 01       	movw	r20, r14
     b5c:	02 2e       	mov	r0, r18
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__pack_f+0x86>
     b60:	76 95       	lsr	r23
     b62:	67 95       	ror	r22
     b64:	57 95       	ror	r21
     b66:	47 95       	ror	r20
     b68:	0a 94       	dec	r0
     b6a:	d2 f7       	brpl	.-12     	; 0xb60 <__pack_f+0x7e>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	a0 e0       	ldi	r26, 0x00	; 0
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__pack_f+0x9c>
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	aa 1f       	adc	r26, r26
     b7c:	bb 1f       	adc	r27, r27
     b7e:	2a 95       	dec	r18
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__pack_f+0x94>
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	a1 09       	sbc	r26, r1
     b86:	b1 09       	sbc	r27, r1
     b88:	8e 21       	and	r24, r14
     b8a:	9f 21       	and	r25, r15
     b8c:	a0 23       	and	r26, r16
     b8e:	b1 23       	and	r27, r17
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	a1 05       	cpc	r26, r1
     b94:	b1 05       	cpc	r27, r1
     b96:	21 f0       	breq	.+8      	; 0xba0 <__pack_f+0xbe>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	9a 01       	movw	r18, r20
     ba2:	ab 01       	movw	r20, r22
     ba4:	28 2b       	or	r18, r24
     ba6:	39 2b       	or	r19, r25
     ba8:	4a 2b       	or	r20, r26
     baa:	5b 2b       	or	r21, r27
     bac:	da 01       	movw	r26, r20
     bae:	c9 01       	movw	r24, r18
     bb0:	8f 77       	andi	r24, 0x7F	; 127
     bb2:	90 70       	andi	r25, 0x00	; 0
     bb4:	a0 70       	andi	r26, 0x00	; 0
     bb6:	b0 70       	andi	r27, 0x00	; 0
     bb8:	80 34       	cpi	r24, 0x40	; 64
     bba:	91 05       	cpc	r25, r1
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	39 f4       	brne	.+14     	; 0xbd0 <__pack_f+0xee>
     bc2:	27 ff       	sbrs	r18, 7
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <__pack_f+0xf6>
     bc6:	20 5c       	subi	r18, 0xC0	; 192
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	4f 4f       	sbci	r20, 0xFF	; 255
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <__pack_f+0xf6>
     bd0:	21 5c       	subi	r18, 0xC1	; 193
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	4f 4f       	sbci	r20, 0xFF	; 255
     bd6:	5f 4f       	sbci	r21, 0xFF	; 255
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	20 30       	cpi	r18, 0x00	; 0
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	3a 07       	cpc	r19, r26
     be2:	a0 e0       	ldi	r26, 0x00	; 0
     be4:	4a 07       	cpc	r20, r26
     be6:	a0 e4       	ldi	r26, 0x40	; 64
     be8:	5a 07       	cpc	r21, r26
     bea:	10 f0       	brcs	.+4      	; 0xbf0 <__pack_f+0x10e>
     bec:	e1 e0       	ldi	r30, 0x01	; 1
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	79 01       	movw	r14, r18
     bf2:	8a 01       	movw	r16, r20
     bf4:	27 c0       	rjmp	.+78     	; 0xc44 <__pack_f+0x162>
     bf6:	60 38       	cpi	r22, 0x80	; 128
     bf8:	71 05       	cpc	r23, r1
     bfa:	64 f5       	brge	.+88     	; 0xc54 <__pack_f+0x172>
     bfc:	fb 01       	movw	r30, r22
     bfe:	e1 58       	subi	r30, 0x81	; 129
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	d8 01       	movw	r26, r16
     c04:	c7 01       	movw	r24, r14
     c06:	8f 77       	andi	r24, 0x7F	; 127
     c08:	90 70       	andi	r25, 0x00	; 0
     c0a:	a0 70       	andi	r26, 0x00	; 0
     c0c:	b0 70       	andi	r27, 0x00	; 0
     c0e:	80 34       	cpi	r24, 0x40	; 64
     c10:	91 05       	cpc	r25, r1
     c12:	a1 05       	cpc	r26, r1
     c14:	b1 05       	cpc	r27, r1
     c16:	39 f4       	brne	.+14     	; 0xc26 <__pack_f+0x144>
     c18:	e7 fe       	sbrs	r14, 7
     c1a:	0d c0       	rjmp	.+26     	; 0xc36 <__pack_f+0x154>
     c1c:	80 e4       	ldi	r24, 0x40	; 64
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__pack_f+0x14c>
     c26:	8f e3       	ldi	r24, 0x3F	; 63
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e8 0e       	add	r14, r24
     c30:	f9 1e       	adc	r15, r25
     c32:	0a 1f       	adc	r16, r26
     c34:	1b 1f       	adc	r17, r27
     c36:	17 ff       	sbrs	r17, 7
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <__pack_f+0x162>
     c3a:	16 95       	lsr	r17
     c3c:	07 95       	ror	r16
     c3e:	f7 94       	ror	r15
     c40:	e7 94       	ror	r14
     c42:	31 96       	adiw	r30, 0x01	; 1
     c44:	87 e0       	ldi	r24, 0x07	; 7
     c46:	16 95       	lsr	r17
     c48:	07 95       	ror	r16
     c4a:	f7 94       	ror	r15
     c4c:	e7 94       	ror	r14
     c4e:	8a 95       	dec	r24
     c50:	d1 f7       	brne	.-12     	; 0xc46 <__pack_f+0x164>
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__pack_f+0x17c>
     c54:	ee 24       	eor	r14, r14
     c56:	ff 24       	eor	r15, r15
     c58:	87 01       	movw	r16, r14
     c5a:	ef ef       	ldi	r30, 0xFF	; 255
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	6e 2f       	mov	r22, r30
     c60:	67 95       	ror	r22
     c62:	66 27       	eor	r22, r22
     c64:	67 95       	ror	r22
     c66:	90 2f       	mov	r25, r16
     c68:	9f 77       	andi	r25, 0x7F	; 127
     c6a:	d7 94       	ror	r13
     c6c:	dd 24       	eor	r13, r13
     c6e:	d7 94       	ror	r13
     c70:	8e 2f       	mov	r24, r30
     c72:	86 95       	lsr	r24
     c74:	49 2f       	mov	r20, r25
     c76:	46 2b       	or	r20, r22
     c78:	58 2f       	mov	r21, r24
     c7a:	5d 29       	or	r21, r13
     c7c:	b7 01       	movw	r22, r14
     c7e:	ca 01       	movw	r24, r20
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	08 95       	ret

00000c8c <__unpack_f>:
     c8c:	fc 01       	movw	r30, r24
     c8e:	db 01       	movw	r26, r22
     c90:	40 81       	ld	r20, Z
     c92:	51 81       	ldd	r21, Z+1	; 0x01
     c94:	22 81       	ldd	r18, Z+2	; 0x02
     c96:	62 2f       	mov	r22, r18
     c98:	6f 77       	andi	r22, 0x7F	; 127
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	22 1f       	adc	r18, r18
     c9e:	22 27       	eor	r18, r18
     ca0:	22 1f       	adc	r18, r18
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	89 2f       	mov	r24, r25
     ca6:	88 0f       	add	r24, r24
     ca8:	82 2b       	or	r24, r18
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	99 1f       	adc	r25, r25
     cb0:	99 27       	eor	r25, r25
     cb2:	99 1f       	adc	r25, r25
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	9c 93       	st	X, r25
     cb8:	11 97       	sbiw	r26, 0x01	; 1
     cba:	21 15       	cp	r18, r1
     cbc:	31 05       	cpc	r19, r1
     cbe:	a9 f5       	brne	.+106    	; 0xd2a <__unpack_f+0x9e>
     cc0:	41 15       	cp	r20, r1
     cc2:	51 05       	cpc	r21, r1
     cc4:	61 05       	cpc	r22, r1
     cc6:	71 05       	cpc	r23, r1
     cc8:	11 f4       	brne	.+4      	; 0xcce <__unpack_f+0x42>
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	37 c0       	rjmp	.+110    	; 0xd3c <__unpack_f+0xb0>
     cce:	82 e8       	ldi	r24, 0x82	; 130
     cd0:	9f ef       	ldi	r25, 0xFF	; 255
     cd2:	13 96       	adiw	r26, 0x03	; 3
     cd4:	9c 93       	st	X, r25
     cd6:	8e 93       	st	-X, r24
     cd8:	12 97       	sbiw	r26, 0x02	; 2
     cda:	9a 01       	movw	r18, r20
     cdc:	ab 01       	movw	r20, r22
     cde:	67 e0       	ldi	r22, 0x07	; 7
     ce0:	22 0f       	add	r18, r18
     ce2:	33 1f       	adc	r19, r19
     ce4:	44 1f       	adc	r20, r20
     ce6:	55 1f       	adc	r21, r21
     ce8:	6a 95       	dec	r22
     cea:	d1 f7       	brne	.-12     	; 0xce0 <__unpack_f+0x54>
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	8c 93       	st	X, r24
     cf0:	0d c0       	rjmp	.+26     	; 0xd0c <__unpack_f+0x80>
     cf2:	22 0f       	add	r18, r18
     cf4:	33 1f       	adc	r19, r19
     cf6:	44 1f       	adc	r20, r20
     cf8:	55 1f       	adc	r21, r21
     cfa:	12 96       	adiw	r26, 0x02	; 2
     cfc:	8d 91       	ld	r24, X+
     cfe:	9c 91       	ld	r25, X
     d00:	13 97       	sbiw	r26, 0x03	; 3
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	13 96       	adiw	r26, 0x03	; 3
     d06:	9c 93       	st	X, r25
     d08:	8e 93       	st	-X, r24
     d0a:	12 97       	sbiw	r26, 0x02	; 2
     d0c:	20 30       	cpi	r18, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	38 07       	cpc	r19, r24
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	48 07       	cpc	r20, r24
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	58 07       	cpc	r21, r24
     d1a:	58 f3       	brcs	.-42     	; 0xcf2 <__unpack_f+0x66>
     d1c:	14 96       	adiw	r26, 0x04	; 4
     d1e:	2d 93       	st	X+, r18
     d20:	3d 93       	st	X+, r19
     d22:	4d 93       	st	X+, r20
     d24:	5c 93       	st	X, r21
     d26:	17 97       	sbiw	r26, 0x07	; 7
     d28:	08 95       	ret
     d2a:	2f 3f       	cpi	r18, 0xFF	; 255
     d2c:	31 05       	cpc	r19, r1
     d2e:	79 f4       	brne	.+30     	; 0xd4e <__unpack_f+0xc2>
     d30:	41 15       	cp	r20, r1
     d32:	51 05       	cpc	r21, r1
     d34:	61 05       	cpc	r22, r1
     d36:	71 05       	cpc	r23, r1
     d38:	19 f4       	brne	.+6      	; 0xd40 <__unpack_f+0xb4>
     d3a:	84 e0       	ldi	r24, 0x04	; 4
     d3c:	8c 93       	st	X, r24
     d3e:	08 95       	ret
     d40:	64 ff       	sbrs	r22, 4
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <__unpack_f+0xbe>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	8c 93       	st	X, r24
     d48:	12 c0       	rjmp	.+36     	; 0xd6e <__unpack_f+0xe2>
     d4a:	1c 92       	st	X, r1
     d4c:	10 c0       	rjmp	.+32     	; 0xd6e <__unpack_f+0xe2>
     d4e:	2f 57       	subi	r18, 0x7F	; 127
     d50:	30 40       	sbci	r19, 0x00	; 0
     d52:	13 96       	adiw	r26, 0x03	; 3
     d54:	3c 93       	st	X, r19
     d56:	2e 93       	st	-X, r18
     d58:	12 97       	sbiw	r26, 0x02	; 2
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	8c 93       	st	X, r24
     d5e:	87 e0       	ldi	r24, 0x07	; 7
     d60:	44 0f       	add	r20, r20
     d62:	55 1f       	adc	r21, r21
     d64:	66 1f       	adc	r22, r22
     d66:	77 1f       	adc	r23, r23
     d68:	8a 95       	dec	r24
     d6a:	d1 f7       	brne	.-12     	; 0xd60 <__unpack_f+0xd4>
     d6c:	70 64       	ori	r23, 0x40	; 64
     d6e:	14 96       	adiw	r26, 0x04	; 4
     d70:	4d 93       	st	X+, r20
     d72:	5d 93       	st	X+, r21
     d74:	6d 93       	st	X+, r22
     d76:	7c 93       	st	X, r23
     d78:	17 97       	sbiw	r26, 0x07	; 7
     d7a:	08 95       	ret

00000d7c <__fpcmp_parts_f>:
     d7c:	1f 93       	push	r17
     d7e:	dc 01       	movw	r26, r24
     d80:	fb 01       	movw	r30, r22
     d82:	9c 91       	ld	r25, X
     d84:	92 30       	cpi	r25, 0x02	; 2
     d86:	08 f4       	brcc	.+2      	; 0xd8a <__fpcmp_parts_f+0xe>
     d88:	47 c0       	rjmp	.+142    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d8a:	80 81       	ld	r24, Z
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	08 f4       	brcc	.+2      	; 0xd92 <__fpcmp_parts_f+0x16>
     d90:	43 c0       	rjmp	.+134    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d92:	94 30       	cpi	r25, 0x04	; 4
     d94:	51 f4       	brne	.+20     	; 0xdaa <__fpcmp_parts_f+0x2e>
     d96:	11 96       	adiw	r26, 0x01	; 1
     d98:	1c 91       	ld	r17, X
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	99 f5       	brne	.+102    	; 0xe04 <__fpcmp_parts_f+0x88>
     d9e:	81 81       	ldd	r24, Z+1	; 0x01
     da0:	68 2f       	mov	r22, r24
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	61 1b       	sub	r22, r17
     da6:	71 09       	sbc	r23, r1
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <__fpcmp_parts_f+0xac>
     daa:	84 30       	cpi	r24, 0x04	; 4
     dac:	21 f0       	breq	.+8      	; 0xdb6 <__fpcmp_parts_f+0x3a>
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	31 f4       	brne	.+12     	; 0xdbe <__fpcmp_parts_f+0x42>
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	b9 f1       	breq	.+110    	; 0xe24 <__fpcmp_parts_f+0xa8>
     db6:	81 81       	ldd	r24, Z+1	; 0x01
     db8:	88 23       	and	r24, r24
     dba:	89 f1       	breq	.+98     	; 0xe1e <__fpcmp_parts_f+0xa2>
     dbc:	2d c0       	rjmp	.+90     	; 0xe18 <__fpcmp_parts_f+0x9c>
     dbe:	11 96       	adiw	r26, 0x01	; 1
     dc0:	1c 91       	ld	r17, X
     dc2:	11 97       	sbiw	r26, 0x01	; 1
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	f1 f0       	breq	.+60     	; 0xe04 <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	18 17       	cp	r17, r24
     dcc:	d9 f4       	brne	.+54     	; 0xe04 <__fpcmp_parts_f+0x88>
     dce:	12 96       	adiw	r26, 0x02	; 2
     dd0:	2d 91       	ld	r18, X+
     dd2:	3c 91       	ld	r19, X
     dd4:	13 97       	sbiw	r26, 0x03	; 3
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	82 17       	cp	r24, r18
     ddc:	93 07       	cpc	r25, r19
     dde:	94 f0       	brlt	.+36     	; 0xe04 <__fpcmp_parts_f+0x88>
     de0:	28 17       	cp	r18, r24
     de2:	39 07       	cpc	r19, r25
     de4:	bc f0       	brlt	.+46     	; 0xe14 <__fpcmp_parts_f+0x98>
     de6:	14 96       	adiw	r26, 0x04	; 4
     de8:	8d 91       	ld	r24, X+
     dea:	9d 91       	ld	r25, X+
     dec:	0d 90       	ld	r0, X+
     dee:	bc 91       	ld	r27, X
     df0:	a0 2d       	mov	r26, r0
     df2:	24 81       	ldd	r18, Z+4	; 0x04
     df4:	35 81       	ldd	r19, Z+5	; 0x05
     df6:	46 81       	ldd	r20, Z+6	; 0x06
     df8:	57 81       	ldd	r21, Z+7	; 0x07
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	4a 07       	cpc	r20, r26
     e00:	5b 07       	cpc	r21, r27
     e02:	18 f4       	brcc	.+6      	; 0xe0a <__fpcmp_parts_f+0x8e>
     e04:	11 23       	and	r17, r17
     e06:	41 f0       	breq	.+16     	; 0xe18 <__fpcmp_parts_f+0x9c>
     e08:	0a c0       	rjmp	.+20     	; 0xe1e <__fpcmp_parts_f+0xa2>
     e0a:	82 17       	cp	r24, r18
     e0c:	93 07       	cpc	r25, r19
     e0e:	a4 07       	cpc	r26, r20
     e10:	b5 07       	cpc	r27, r21
     e12:	40 f4       	brcc	.+16     	; 0xe24 <__fpcmp_parts_f+0xa8>
     e14:	11 23       	and	r17, r17
     e16:	19 f0       	breq	.+6      	; 0xe1e <__fpcmp_parts_f+0xa2>
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <__fpcmp_parts_f+0xac>
     e1e:	6f ef       	ldi	r22, 0xFF	; 255
     e20:	7f ef       	ldi	r23, 0xFF	; 255
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <__fpcmp_parts_f+0xac>
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	cb 01       	movw	r24, r22
     e2a:	1f 91       	pop	r17
     e2c:	08 95       	ret

00000e2e <ADC_voidInit>:

/*global pointer to receive the reading*/
u16 * Global_u8Reading = NULL;

void ADC_voidInit(u8 Copy_u8Prescaler)
{
     e2e:	df 93       	push	r29
     e30:	cf 93       	push	r28
     e32:	0f 92       	push	r0
     e34:	cd b7       	in	r28, 0x3d	; 61
     e36:	de b7       	in	r29, 0x3e	; 62
     e38:	89 83       	std	Y+1, r24	; 0x01
	/*set reference voltage to AVCC (5v)*/
	SET_BIT(ADMUX, ADMUX_REFS0);
     e3a:	27 e2       	ldi	r18, 0x27	; 39
     e3c:	30 e0       	ldi	r19, 0x00	; 0
     e3e:	a7 e2       	ldi	r26, 0x27	; 39
     e40:	b0 e0       	ldi	r27, 0x00	; 0
     e42:	e7 e2       	ldi	r30, 0x27	; 39
     e44:	f0 e0       	ldi	r31, 0x00	; 0
     e46:	80 81       	ld	r24, Z
     e48:	80 64       	ori	r24, 0x40	; 64
     e4a:	8c 93       	st	X, r24
     e4c:	8c 91       	ld	r24, X
     e4e:	f9 01       	movw	r30, r18
     e50:	80 83       	st	Z, r24
	CLR_BIT(ADMUX, ADMUX_REFS1);
     e52:	27 e2       	ldi	r18, 0x27	; 39
     e54:	30 e0       	ldi	r19, 0x00	; 0
     e56:	a7 e2       	ldi	r26, 0x27	; 39
     e58:	b0 e0       	ldi	r27, 0x00	; 0
     e5a:	e7 e2       	ldi	r30, 0x27	; 39
     e5c:	f0 e0       	ldi	r31, 0x00	; 0
     e5e:	80 81       	ld	r24, Z
     e60:	8f 77       	andi	r24, 0x7F	; 127
     e62:	8c 93       	st	X, r24
     e64:	8c 91       	ld	r24, X
     e66:	f9 01       	movw	r30, r18
     e68:	80 83       	st	Z, r24

	/*left adjustment for result*/
	SET_BIT(ADMUX, ADMUX_ADLAR);
     e6a:	27 e2       	ldi	r18, 0x27	; 39
     e6c:	30 e0       	ldi	r19, 0x00	; 0
     e6e:	a7 e2       	ldi	r26, 0x27	; 39
     e70:	b0 e0       	ldi	r27, 0x00	; 0
     e72:	e7 e2       	ldi	r30, 0x27	; 39
     e74:	f0 e0       	ldi	r31, 0x00	; 0
     e76:	80 81       	ld	r24, Z
     e78:	80 62       	ori	r24, 0x20	; 32
     e7a:	8c 93       	st	X, r24
     e7c:	8c 91       	ld	r24, X
     e7e:	f9 01       	movw	r30, r18
     e80:	80 83       	st	Z, r24

	/*ADC enable*/
	SET_BIT(ADCSRA, ADCSRA_ADEN);
     e82:	26 e2       	ldi	r18, 0x26	; 38
     e84:	30 e0       	ldi	r19, 0x00	; 0
     e86:	a6 e2       	ldi	r26, 0x26	; 38
     e88:	b0 e0       	ldi	r27, 0x00	; 0
     e8a:	e6 e2       	ldi	r30, 0x26	; 38
     e8c:	f0 e0       	ldi	r31, 0x00	; 0
     e8e:	80 81       	ld	r24, Z
     e90:	80 68       	ori	r24, 0x80	; 128
     e92:	8c 93       	st	X, r24
     e94:	8c 91       	ld	r24, X
     e96:	f9 01       	movw	r30, r18
     e98:	80 83       	st	Z, r24

	/*set Clock Prescaler*/
	ADCSRA &= PRESCALERMASK;
     e9a:	a6 e2       	ldi	r26, 0x26	; 38
     e9c:	b0 e0       	ldi	r27, 0x00	; 0
     e9e:	e6 e2       	ldi	r30, 0x26	; 38
     ea0:	f0 e0       	ldi	r31, 0x00	; 0
     ea2:	80 81       	ld	r24, Z
     ea4:	88 7f       	andi	r24, 0xF8	; 248
     ea6:	8c 93       	st	X, r24
	ADCSRA |= Copy_u8Prescaler;
     ea8:	a6 e2       	ldi	r26, 0x26	; 38
     eaa:	b0 e0       	ldi	r27, 0x00	; 0
     eac:	e6 e2       	ldi	r30, 0x26	; 38
     eae:	f0 e0       	ldi	r31, 0x00	; 0
     eb0:	90 81       	ld	r25, Z
     eb2:	89 81       	ldd	r24, Y+1	; 0x01
     eb4:	89 2b       	or	r24, r25
     eb6:	8c 93       	st	X, r24
}
     eb8:	0f 90       	pop	r0
     eba:	cf 91       	pop	r28
     ebc:	df 91       	pop	r29
     ebe:	08 95       	ret

00000ec0 <ADC_voidStartConversionAsync>:


void ADC_voidStartConversionAsync(u16 * Copy_u8Reading, u8 Copy_u8Channel)
{
     ec0:	df 93       	push	r29
     ec2:	cf 93       	push	r28
     ec4:	00 d0       	rcall	.+0      	; 0xec6 <ADC_voidStartConversionAsync+0x6>
     ec6:	0f 92       	push	r0
     ec8:	cd b7       	in	r28, 0x3d	; 61
     eca:	de b7       	in	r29, 0x3e	; 62
     ecc:	9a 83       	std	Y+2, r25	; 0x02
     ece:	89 83       	std	Y+1, r24	; 0x01
     ed0:	6b 83       	std	Y+3, r22	; 0x03
	/*ADC Conversion complete interrupt enable*/
	SET_BIT(ADCSRA, ADCSRA_ADIE);
     ed2:	26 e2       	ldi	r18, 0x26	; 38
     ed4:	30 e0       	ldi	r19, 0x00	; 0
     ed6:	a6 e2       	ldi	r26, 0x26	; 38
     ed8:	b0 e0       	ldi	r27, 0x00	; 0
     eda:	e6 e2       	ldi	r30, 0x26	; 38
     edc:	f0 e0       	ldi	r31, 0x00	; 0
     ede:	80 81       	ld	r24, Z
     ee0:	88 60       	ori	r24, 0x08	; 8
     ee2:	8c 93       	st	X, r24
     ee4:	8c 91       	ld	r24, X
     ee6:	f9 01       	movw	r30, r18
     ee8:	80 83       	st	Z, r24

	/*enable GIE*/
	GIE_voidEnable();
     eea:	0e 94 19 18 	call	0x3032	; 0x3032 <GIE_voidEnable>

	/*setting the channel*/
	/*configurable by bit masking*/
	ADMUX &= ADMUX_MASK;
     eee:	a7 e2       	ldi	r26, 0x27	; 39
     ef0:	b0 e0       	ldi	r27, 0x00	; 0
     ef2:	e7 e2       	ldi	r30, 0x27	; 39
     ef4:	f0 e0       	ldi	r31, 0x00	; 0
     ef6:	80 81       	ld	r24, Z
     ef8:	80 7e       	andi	r24, 0xE0	; 224
     efa:	8c 93       	st	X, r24
	ADMUX |= Copy_u8Channel;
     efc:	a7 e2       	ldi	r26, 0x27	; 39
     efe:	b0 e0       	ldi	r27, 0x00	; 0
     f00:	e7 e2       	ldi	r30, 0x27	; 39
     f02:	f0 e0       	ldi	r31, 0x00	; 0
     f04:	90 81       	ld	r25, Z
     f06:	8b 81       	ldd	r24, Y+3	; 0x03
     f08:	89 2b       	or	r24, r25
     f0a:	8c 93       	st	X, r24

	/*Assign global variable to get the reading from ISR by Setcallback*/
	Global_u8Reading = Copy_u8Reading;
     f0c:	89 81       	ldd	r24, Y+1	; 0x01
     f0e:	9a 81       	ldd	r25, Y+2	; 0x02
     f10:	90 93 3d 05 	sts	0x053D, r25
     f14:	80 93 3c 05 	sts	0x053C, r24

	/*ADC Start conversion*/
	SET_BIT(ADCSRA, ADCSRA_ADSC);
     f18:	26 e2       	ldi	r18, 0x26	; 38
     f1a:	30 e0       	ldi	r19, 0x00	; 0
     f1c:	a6 e2       	ldi	r26, 0x26	; 38
     f1e:	b0 e0       	ldi	r27, 0x00	; 0
     f20:	e6 e2       	ldi	r30, 0x26	; 38
     f22:	f0 e0       	ldi	r31, 0x00	; 0
     f24:	80 81       	ld	r24, Z
     f26:	80 64       	ori	r24, 0x40	; 64
     f28:	8c 93       	st	X, r24
     f2a:	8c 91       	ld	r24, X
     f2c:	f9 01       	movw	r30, r18
     f2e:	80 83       	st	Z, r24
}
     f30:	0f 90       	pop	r0
     f32:	0f 90       	pop	r0
     f34:	0f 90       	pop	r0
     f36:	cf 91       	pop	r28
     f38:	df 91       	pop	r29
     f3a:	08 95       	ret

00000f3c <ADC_voidStartConversionSync>:

u8 ADC_voidStartConversionSync(u8 Copy_u8Channel)
{
     f3c:	df 93       	push	r29
     f3e:	cf 93       	push	r28
     f40:	00 d0       	rcall	.+0      	; 0xf42 <ADC_voidStartConversionSync+0x6>
     f42:	cd b7       	in	r28, 0x3d	; 61
     f44:	de b7       	in	r29, 0x3e	; 62
     f46:	8a 83       	std	Y+2, r24	; 0x02
	u8 Reading;
	/*setting the channel*/
	/*configurable by bit masking*/
	ADMUX &= ADMUX_MASK;
     f48:	a7 e2       	ldi	r26, 0x27	; 39
     f4a:	b0 e0       	ldi	r27, 0x00	; 0
     f4c:	e7 e2       	ldi	r30, 0x27	; 39
     f4e:	f0 e0       	ldi	r31, 0x00	; 0
     f50:	80 81       	ld	r24, Z
     f52:	80 7e       	andi	r24, 0xE0	; 224
     f54:	8c 93       	st	X, r24
	ADMUX |= Copy_u8Channel;
     f56:	a7 e2       	ldi	r26, 0x27	; 39
     f58:	b0 e0       	ldi	r27, 0x00	; 0
     f5a:	e7 e2       	ldi	r30, 0x27	; 39
     f5c:	f0 e0       	ldi	r31, 0x00	; 0
     f5e:	90 81       	ld	r25, Z
     f60:	8a 81       	ldd	r24, Y+2	; 0x02
     f62:	89 2b       	or	r24, r25
     f64:	8c 93       	st	X, r24

	/*ADC Start conversion*/
	SET_BIT(ADCSRA, ADCSRA_ADSC);
     f66:	26 e2       	ldi	r18, 0x26	; 38
     f68:	30 e0       	ldi	r19, 0x00	; 0
     f6a:	a6 e2       	ldi	r26, 0x26	; 38
     f6c:	b0 e0       	ldi	r27, 0x00	; 0
     f6e:	e6 e2       	ldi	r30, 0x26	; 38
     f70:	f0 e0       	ldi	r31, 0x00	; 0
     f72:	80 81       	ld	r24, Z
     f74:	80 64       	ori	r24, 0x40	; 64
     f76:	8c 93       	st	X, r24
     f78:	8c 91       	ld	r24, X
     f7a:	f9 01       	movw	r30, r18
     f7c:	80 83       	st	Z, r24

	/*polling till get the result*/
	while((GET_BIT(ADCSRA, ADCSRA_ADIF)) == 0);
     f7e:	e6 e2       	ldi	r30, 0x26	; 38
     f80:	f0 e0       	ldi	r31, 0x00	; 0
     f82:	80 81       	ld	r24, Z
     f84:	82 95       	swap	r24
     f86:	8f 70       	andi	r24, 0x0F	; 15
     f88:	88 2f       	mov	r24, r24
     f8a:	90 e0       	ldi	r25, 0x00	; 0
     f8c:	81 70       	andi	r24, 0x01	; 1
     f8e:	90 70       	andi	r25, 0x00	; 0
     f90:	00 97       	sbiw	r24, 0x00	; 0
     f92:	a9 f3       	breq	.-22     	; 0xf7e <ADC_voidStartConversionSync+0x42>

	/*getting data from ADCH*/
	Reading = ADCH;
     f94:	e5 e2       	ldi	r30, 0x25	; 37
     f96:	f0 e0       	ldi	r31, 0x00	; 0
     f98:	80 81       	ld	r24, Z
     f9a:	89 83       	std	Y+1, r24	; 0x01

	/*clearing ADIF*/
	SET_BIT(ADCSRA, ADCSRA_ADIF);
     f9c:	26 e2       	ldi	r18, 0x26	; 38
     f9e:	30 e0       	ldi	r19, 0x00	; 0
     fa0:	a6 e2       	ldi	r26, 0x26	; 38
     fa2:	b0 e0       	ldi	r27, 0x00	; 0
     fa4:	e6 e2       	ldi	r30, 0x26	; 38
     fa6:	f0 e0       	ldi	r31, 0x00	; 0
     fa8:	80 81       	ld	r24, Z
     faa:	80 61       	ori	r24, 0x10	; 16
     fac:	8c 93       	st	X, r24
     fae:	8c 91       	ld	r24, X
     fb0:	f9 01       	movw	r30, r18
     fb2:	80 83       	st	Z, r24

	return Reading;
     fb4:	89 81       	ldd	r24, Y+1	; 0x01
}
     fb6:	0f 90       	pop	r0
     fb8:	0f 90       	pop	r0
     fba:	cf 91       	pop	r28
     fbc:	df 91       	pop	r29
     fbe:	08 95       	ret

00000fc0 <ADC_voidSetCallBack>:

u8 ADC_voidSetCallBack(void(*Copy_PtrToFunc)(void))
{
     fc0:	df 93       	push	r29
     fc2:	cf 93       	push	r28
     fc4:	00 d0       	rcall	.+0      	; 0xfc6 <ADC_voidSetCallBack+0x6>
     fc6:	0f 92       	push	r0
     fc8:	cd b7       	in	r28, 0x3d	; 61
     fca:	de b7       	in	r29, 0x3e	; 62
     fcc:	9b 83       	std	Y+3, r25	; 0x03
     fce:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = OK;
     fd0:	82 e0       	ldi	r24, 0x02	; 2
     fd2:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_PtrToFunc != NULL)
     fd4:	8a 81       	ldd	r24, Y+2	; 0x02
     fd6:	9b 81       	ldd	r25, Y+3	; 0x03
     fd8:	00 97       	sbiw	r24, 0x00	; 0
     fda:	39 f0       	breq	.+14     	; 0xfea <ADC_voidSetCallBack+0x2a>
	{

		Global_ptrEndOfConversion = Copy_PtrToFunc;
     fdc:	8a 81       	ldd	r24, Y+2	; 0x02
     fde:	9b 81       	ldd	r25, Y+3	; 0x03
     fe0:	90 93 3b 05 	sts	0x053B, r25
     fe4:	80 93 3a 05 	sts	0x053A, r24
     fe8:	02 c0       	rjmp	.+4      	; 0xfee <ADC_voidSetCallBack+0x2e>
	}
	else
	{
		Local_u8ErrorState = NULL_POINTER;
     fea:	81 e0       	ldi	r24, 0x01	; 1
     fec:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
     fee:	89 81       	ldd	r24, Y+1	; 0x01
}
     ff0:	0f 90       	pop	r0
     ff2:	0f 90       	pop	r0
     ff4:	0f 90       	pop	r0
     ff6:	cf 91       	pop	r28
     ff8:	df 91       	pop	r29
     ffa:	08 95       	ret

00000ffc <__vector_16>:

void __vector_16(void) __attribute__((signal));
void __vector_16(void)
{
     ffc:	1f 92       	push	r1
     ffe:	0f 92       	push	r0
    1000:	0f b6       	in	r0, 0x3f	; 63
    1002:	0f 92       	push	r0
    1004:	11 24       	eor	r1, r1
    1006:	2f 93       	push	r18
    1008:	3f 93       	push	r19
    100a:	4f 93       	push	r20
    100c:	5f 93       	push	r21
    100e:	6f 93       	push	r22
    1010:	7f 93       	push	r23
    1012:	8f 93       	push	r24
    1014:	9f 93       	push	r25
    1016:	af 93       	push	r26
    1018:	bf 93       	push	r27
    101a:	ef 93       	push	r30
    101c:	ff 93       	push	r31
    101e:	df 93       	push	r29
    1020:	cf 93       	push	r28
    1022:	cd b7       	in	r28, 0x3d	; 61
    1024:	de b7       	in	r29, 0x3e	; 62
	if(Global_ptrEndOfConversion != NULL)
    1026:	80 91 3a 05 	lds	r24, 0x053A
    102a:	90 91 3b 05 	lds	r25, 0x053B
    102e:	00 97       	sbiw	r24, 0x00	; 0
    1030:	81 f0       	breq	.+32     	; 0x1052 <__vector_16+0x56>
	{
#if (ADC_READING_MODE == EIGHT_bit_mode)
		{
		*Global_u8Reading = ADCH;
    1032:	a0 91 3c 05 	lds	r26, 0x053C
    1036:	b0 91 3d 05 	lds	r27, 0x053D
    103a:	e5 e2       	ldi	r30, 0x25	; 37
    103c:	f0 e0       	ldi	r31, 0x00	; 0
    103e:	80 81       	ld	r24, Z
    1040:	88 2f       	mov	r24, r24
    1042:	90 e0       	ldi	r25, 0x00	; 0
    1044:	8d 93       	st	X+, r24
    1046:	9c 93       	st	X, r25
#elif(ADC_READING_MODE == TEN_bit_mode)
		{
			*Global_u8Reading = ADCL;
		}
#endif
		Global_ptrEndOfConversion();
    1048:	e0 91 3a 05 	lds	r30, 0x053A
    104c:	f0 91 3b 05 	lds	r31, 0x053B
    1050:	09 95       	icall
	}
}
    1052:	cf 91       	pop	r28
    1054:	df 91       	pop	r29
    1056:	ff 91       	pop	r31
    1058:	ef 91       	pop	r30
    105a:	bf 91       	pop	r27
    105c:	af 91       	pop	r26
    105e:	9f 91       	pop	r25
    1060:	8f 91       	pop	r24
    1062:	7f 91       	pop	r23
    1064:	6f 91       	pop	r22
    1066:	5f 91       	pop	r21
    1068:	4f 91       	pop	r20
    106a:	3f 91       	pop	r19
    106c:	2f 91       	pop	r18
    106e:	0f 90       	pop	r0
    1070:	0f be       	out	0x3f, r0	; 63
    1072:	0f 90       	pop	r0
    1074:	1f 90       	pop	r1
    1076:	18 95       	reti

00001078 <LCD_voidLCDInit>:

/*global Flag*/
static u8 Global_u8Flag_4_bit = 0;

void LCD_voidLCDInit(void)
{
    1078:	0f 93       	push	r16
    107a:	1f 93       	push	r17
    107c:	df 93       	push	r29
    107e:	cf 93       	push	r28
    1080:	cd b7       	in	r28, 0x3d	; 61
    1082:	de b7       	in	r29, 0x3e	; 62
    1084:	c6 55       	subi	r28, 0x56	; 86
    1086:	d0 40       	sbci	r29, 0x00	; 0
    1088:	0f b6       	in	r0, 0x3f	; 63
    108a:	f8 94       	cli
    108c:	de bf       	out	0x3e, r29	; 62
    108e:	0f be       	out	0x3f, r0	; 63
    1090:	cd bf       	out	0x3d, r28	; 61
#if LCD_MODE == _8_BIT
	{
		DIO_u8SetPortDirection(LCD_DATA_PORT, DIO_u8PORT_OUTPUT);  //DATA
    1092:	81 e0       	ldi	r24, 0x01	; 1
    1094:	6f ef       	ldi	r22, 0xFF	; 255
    1096:	0e 94 de 11 	call	0x23bc	; 0x23bc <DIO_u8SetPortDirection>
		DIO_u8SetPinDirection(LCD_CONTROL_PORT, RS_PIN, DIO_u8PIN_OUTPUT); //RS
    109a:	82 e0       	ldi	r24, 0x02	; 2
    109c:	67 e0       	ldi	r22, 0x07	; 7
    109e:	41 e0       	ldi	r20, 0x01	; 1
    10a0:	0e 94 a1 10 	call	0x2142	; 0x2142 <DIO_u8SetPinDirection>
		DIO_u8SetPinDirection(LCD_CONTROL_PORT, RW_PIN, DIO_u8PIN_OUTPUT); //R/W
    10a4:	82 e0       	ldi	r24, 0x02	; 2
    10a6:	66 e0       	ldi	r22, 0x06	; 6
    10a8:	41 e0       	ldi	r20, 0x01	; 1
    10aa:	0e 94 a1 10 	call	0x2142	; 0x2142 <DIO_u8SetPinDirection>
		DIO_u8SetPinDirection(LCD_CONTROL_PORT, EN_PIN, DIO_u8PIN_OUTPUT); //EN
    10ae:	82 e0       	ldi	r24, 0x02	; 2
    10b0:	65 e0       	ldi	r22, 0x05	; 5
    10b2:	41 e0       	ldi	r20, 0x01	; 1
    10b4:	0e 94 a1 10 	call	0x2142	; 0x2142 <DIO_u8SetPinDirection>
    10b8:	fe 01       	movw	r30, r28
    10ba:	ed 5a       	subi	r30, 0xAD	; 173
    10bc:	ff 4f       	sbci	r31, 0xFF	; 255
    10be:	80 e0       	ldi	r24, 0x00	; 0
    10c0:	90 e0       	ldi	r25, 0x00	; 0
    10c2:	a0 ef       	ldi	r26, 0xF0	; 240
    10c4:	b1 e4       	ldi	r27, 0x41	; 65
    10c6:	80 83       	st	Z, r24
    10c8:	91 83       	std	Z+1, r25	; 0x01
    10ca:	a2 83       	std	Z+2, r26	; 0x02
    10cc:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    10ce:	8e 01       	movw	r16, r28
    10d0:	01 5b       	subi	r16, 0xB1	; 177
    10d2:	1f 4f       	sbci	r17, 0xFF	; 255
    10d4:	fe 01       	movw	r30, r28
    10d6:	ed 5a       	subi	r30, 0xAD	; 173
    10d8:	ff 4f       	sbci	r31, 0xFF	; 255
    10da:	60 81       	ld	r22, Z
    10dc:	71 81       	ldd	r23, Z+1	; 0x01
    10de:	82 81       	ldd	r24, Z+2	; 0x02
    10e0:	93 81       	ldd	r25, Z+3	; 0x03
    10e2:	2b ea       	ldi	r18, 0xAB	; 171
    10e4:	3a ea       	ldi	r19, 0xAA	; 170
    10e6:	4a e2       	ldi	r20, 0x2A	; 42
    10e8:	50 e4       	ldi	r21, 0x40	; 64
    10ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10ee:	dc 01       	movw	r26, r24
    10f0:	cb 01       	movw	r24, r22
    10f2:	f8 01       	movw	r30, r16
    10f4:	80 83       	st	Z, r24
    10f6:	91 83       	std	Z+1, r25	; 0x01
    10f8:	a2 83       	std	Z+2, r26	; 0x02
    10fa:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    10fc:	fe 01       	movw	r30, r28
    10fe:	e1 5b       	subi	r30, 0xB1	; 177
    1100:	ff 4f       	sbci	r31, 0xFF	; 255
    1102:	60 81       	ld	r22, Z
    1104:	71 81       	ldd	r23, Z+1	; 0x01
    1106:	82 81       	ldd	r24, Z+2	; 0x02
    1108:	93 81       	ldd	r25, Z+3	; 0x03
    110a:	20 e0       	ldi	r18, 0x00	; 0
    110c:	30 e0       	ldi	r19, 0x00	; 0
    110e:	40 e8       	ldi	r20, 0x80	; 128
    1110:	5f e3       	ldi	r21, 0x3F	; 63
    1112:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1116:	88 23       	and	r24, r24
    1118:	34 f4       	brge	.+12     	; 0x1126 <LCD_voidLCDInit+0xae>
		__ticks = 1;
    111a:	fe 01       	movw	r30, r28
    111c:	e2 5b       	subi	r30, 0xB2	; 178
    111e:	ff 4f       	sbci	r31, 0xFF	; 255
    1120:	81 e0       	ldi	r24, 0x01	; 1
    1122:	80 83       	st	Z, r24
    1124:	e0 c0       	rjmp	.+448    	; 0x12e6 <LCD_voidLCDInit+0x26e>
	else if (__tmp > 255)
    1126:	fe 01       	movw	r30, r28
    1128:	e1 5b       	subi	r30, 0xB1	; 177
    112a:	ff 4f       	sbci	r31, 0xFF	; 255
    112c:	60 81       	ld	r22, Z
    112e:	71 81       	ldd	r23, Z+1	; 0x01
    1130:	82 81       	ldd	r24, Z+2	; 0x02
    1132:	93 81       	ldd	r25, Z+3	; 0x03
    1134:	20 e0       	ldi	r18, 0x00	; 0
    1136:	30 e0       	ldi	r19, 0x00	; 0
    1138:	4f e7       	ldi	r20, 0x7F	; 127
    113a:	53 e4       	ldi	r21, 0x43	; 67
    113c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1140:	18 16       	cp	r1, r24
    1142:	0c f0       	brlt	.+2      	; 0x1146 <LCD_voidLCDInit+0xce>
    1144:	c0 c0       	rjmp	.+384    	; 0x12c6 <LCD_voidLCDInit+0x24e>
	{
		_delay_ms(__us / 1000.0);
    1146:	fe 01       	movw	r30, r28
    1148:	ed 5a       	subi	r30, 0xAD	; 173
    114a:	ff 4f       	sbci	r31, 0xFF	; 255
    114c:	60 81       	ld	r22, Z
    114e:	71 81       	ldd	r23, Z+1	; 0x01
    1150:	82 81       	ldd	r24, Z+2	; 0x02
    1152:	93 81       	ldd	r25, Z+3	; 0x03
    1154:	20 e0       	ldi	r18, 0x00	; 0
    1156:	30 e0       	ldi	r19, 0x00	; 0
    1158:	4a e7       	ldi	r20, 0x7A	; 122
    115a:	54 e4       	ldi	r21, 0x44	; 68
    115c:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1160:	dc 01       	movw	r26, r24
    1162:	cb 01       	movw	r24, r22
    1164:	fe 01       	movw	r30, r28
    1166:	e6 5b       	subi	r30, 0xB6	; 182
    1168:	ff 4f       	sbci	r31, 0xFF	; 255
    116a:	80 83       	st	Z, r24
    116c:	91 83       	std	Z+1, r25	; 0x01
    116e:	a2 83       	std	Z+2, r26	; 0x02
    1170:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1172:	8e 01       	movw	r16, r28
    1174:	0a 5b       	subi	r16, 0xBA	; 186
    1176:	1f 4f       	sbci	r17, 0xFF	; 255
    1178:	fe 01       	movw	r30, r28
    117a:	e6 5b       	subi	r30, 0xB6	; 182
    117c:	ff 4f       	sbci	r31, 0xFF	; 255
    117e:	60 81       	ld	r22, Z
    1180:	71 81       	ldd	r23, Z+1	; 0x01
    1182:	82 81       	ldd	r24, Z+2	; 0x02
    1184:	93 81       	ldd	r25, Z+3	; 0x03
    1186:	20 e0       	ldi	r18, 0x00	; 0
    1188:	30 e0       	ldi	r19, 0x00	; 0
    118a:	4a ef       	ldi	r20, 0xFA	; 250
    118c:	54 e4       	ldi	r21, 0x44	; 68
    118e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1192:	dc 01       	movw	r26, r24
    1194:	cb 01       	movw	r24, r22
    1196:	f8 01       	movw	r30, r16
    1198:	80 83       	st	Z, r24
    119a:	91 83       	std	Z+1, r25	; 0x01
    119c:	a2 83       	std	Z+2, r26	; 0x02
    119e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    11a0:	fe 01       	movw	r30, r28
    11a2:	ea 5b       	subi	r30, 0xBA	; 186
    11a4:	ff 4f       	sbci	r31, 0xFF	; 255
    11a6:	60 81       	ld	r22, Z
    11a8:	71 81       	ldd	r23, Z+1	; 0x01
    11aa:	82 81       	ldd	r24, Z+2	; 0x02
    11ac:	93 81       	ldd	r25, Z+3	; 0x03
    11ae:	20 e0       	ldi	r18, 0x00	; 0
    11b0:	30 e0       	ldi	r19, 0x00	; 0
    11b2:	40 e8       	ldi	r20, 0x80	; 128
    11b4:	5f e3       	ldi	r21, 0x3F	; 63
    11b6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    11ba:	88 23       	and	r24, r24
    11bc:	44 f4       	brge	.+16     	; 0x11ce <LCD_voidLCDInit+0x156>
		__ticks = 1;
    11be:	fe 01       	movw	r30, r28
    11c0:	ec 5b       	subi	r30, 0xBC	; 188
    11c2:	ff 4f       	sbci	r31, 0xFF	; 255
    11c4:	81 e0       	ldi	r24, 0x01	; 1
    11c6:	90 e0       	ldi	r25, 0x00	; 0
    11c8:	91 83       	std	Z+1, r25	; 0x01
    11ca:	80 83       	st	Z, r24
    11cc:	64 c0       	rjmp	.+200    	; 0x1296 <LCD_voidLCDInit+0x21e>
	else if (__tmp > 65535)
    11ce:	fe 01       	movw	r30, r28
    11d0:	ea 5b       	subi	r30, 0xBA	; 186
    11d2:	ff 4f       	sbci	r31, 0xFF	; 255
    11d4:	60 81       	ld	r22, Z
    11d6:	71 81       	ldd	r23, Z+1	; 0x01
    11d8:	82 81       	ldd	r24, Z+2	; 0x02
    11da:	93 81       	ldd	r25, Z+3	; 0x03
    11dc:	20 e0       	ldi	r18, 0x00	; 0
    11de:	3f ef       	ldi	r19, 0xFF	; 255
    11e0:	4f e7       	ldi	r20, 0x7F	; 127
    11e2:	57 e4       	ldi	r21, 0x47	; 71
    11e4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    11e8:	18 16       	cp	r1, r24
    11ea:	0c f0       	brlt	.+2      	; 0x11ee <LCD_voidLCDInit+0x176>
    11ec:	43 c0       	rjmp	.+134    	; 0x1274 <LCD_voidLCDInit+0x1fc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    11ee:	fe 01       	movw	r30, r28
    11f0:	e6 5b       	subi	r30, 0xB6	; 182
    11f2:	ff 4f       	sbci	r31, 0xFF	; 255
    11f4:	60 81       	ld	r22, Z
    11f6:	71 81       	ldd	r23, Z+1	; 0x01
    11f8:	82 81       	ldd	r24, Z+2	; 0x02
    11fa:	93 81       	ldd	r25, Z+3	; 0x03
    11fc:	20 e0       	ldi	r18, 0x00	; 0
    11fe:	30 e0       	ldi	r19, 0x00	; 0
    1200:	40 e2       	ldi	r20, 0x20	; 32
    1202:	51 e4       	ldi	r21, 0x41	; 65
    1204:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1208:	dc 01       	movw	r26, r24
    120a:	cb 01       	movw	r24, r22
    120c:	8e 01       	movw	r16, r28
    120e:	0c 5b       	subi	r16, 0xBC	; 188
    1210:	1f 4f       	sbci	r17, 0xFF	; 255
    1212:	bc 01       	movw	r22, r24
    1214:	cd 01       	movw	r24, r26
    1216:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    121a:	dc 01       	movw	r26, r24
    121c:	cb 01       	movw	r24, r22
    121e:	f8 01       	movw	r30, r16
    1220:	91 83       	std	Z+1, r25	; 0x01
    1222:	80 83       	st	Z, r24
    1224:	1f c0       	rjmp	.+62     	; 0x1264 <LCD_voidLCDInit+0x1ec>
    1226:	fe 01       	movw	r30, r28
    1228:	ee 5b       	subi	r30, 0xBE	; 190
    122a:	ff 4f       	sbci	r31, 0xFF	; 255
    122c:	88 ec       	ldi	r24, 0xC8	; 200
    122e:	90 e0       	ldi	r25, 0x00	; 0
    1230:	91 83       	std	Z+1, r25	; 0x01
    1232:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1234:	fe 01       	movw	r30, r28
    1236:	ee 5b       	subi	r30, 0xBE	; 190
    1238:	ff 4f       	sbci	r31, 0xFF	; 255
    123a:	80 81       	ld	r24, Z
    123c:	91 81       	ldd	r25, Z+1	; 0x01
    123e:	01 97       	sbiw	r24, 0x01	; 1
    1240:	f1 f7       	brne	.-4      	; 0x123e <LCD_voidLCDInit+0x1c6>
    1242:	fe 01       	movw	r30, r28
    1244:	ee 5b       	subi	r30, 0xBE	; 190
    1246:	ff 4f       	sbci	r31, 0xFF	; 255
    1248:	91 83       	std	Z+1, r25	; 0x01
    124a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    124c:	de 01       	movw	r26, r28
    124e:	ac 5b       	subi	r26, 0xBC	; 188
    1250:	bf 4f       	sbci	r27, 0xFF	; 255
    1252:	fe 01       	movw	r30, r28
    1254:	ec 5b       	subi	r30, 0xBC	; 188
    1256:	ff 4f       	sbci	r31, 0xFF	; 255
    1258:	80 81       	ld	r24, Z
    125a:	91 81       	ldd	r25, Z+1	; 0x01
    125c:	01 97       	sbiw	r24, 0x01	; 1
    125e:	11 96       	adiw	r26, 0x01	; 1
    1260:	9c 93       	st	X, r25
    1262:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1264:	fe 01       	movw	r30, r28
    1266:	ec 5b       	subi	r30, 0xBC	; 188
    1268:	ff 4f       	sbci	r31, 0xFF	; 255
    126a:	80 81       	ld	r24, Z
    126c:	91 81       	ldd	r25, Z+1	; 0x01
    126e:	00 97       	sbiw	r24, 0x00	; 0
    1270:	d1 f6       	brne	.-76     	; 0x1226 <LCD_voidLCDInit+0x1ae>
    1272:	42 c0       	rjmp	.+132    	; 0x12f8 <LCD_voidLCDInit+0x280>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1274:	8e 01       	movw	r16, r28
    1276:	0c 5b       	subi	r16, 0xBC	; 188
    1278:	1f 4f       	sbci	r17, 0xFF	; 255
    127a:	fe 01       	movw	r30, r28
    127c:	ea 5b       	subi	r30, 0xBA	; 186
    127e:	ff 4f       	sbci	r31, 0xFF	; 255
    1280:	60 81       	ld	r22, Z
    1282:	71 81       	ldd	r23, Z+1	; 0x01
    1284:	82 81       	ldd	r24, Z+2	; 0x02
    1286:	93 81       	ldd	r25, Z+3	; 0x03
    1288:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    128c:	dc 01       	movw	r26, r24
    128e:	cb 01       	movw	r24, r22
    1290:	f8 01       	movw	r30, r16
    1292:	91 83       	std	Z+1, r25	; 0x01
    1294:	80 83       	st	Z, r24
    1296:	de 01       	movw	r26, r28
    1298:	a0 5c       	subi	r26, 0xC0	; 192
    129a:	bf 4f       	sbci	r27, 0xFF	; 255
    129c:	fe 01       	movw	r30, r28
    129e:	ec 5b       	subi	r30, 0xBC	; 188
    12a0:	ff 4f       	sbci	r31, 0xFF	; 255
    12a2:	80 81       	ld	r24, Z
    12a4:	91 81       	ldd	r25, Z+1	; 0x01
    12a6:	11 96       	adiw	r26, 0x01	; 1
    12a8:	9c 93       	st	X, r25
    12aa:	8e 93       	st	-X, r24
    12ac:	fe 01       	movw	r30, r28
    12ae:	e0 5c       	subi	r30, 0xC0	; 192
    12b0:	ff 4f       	sbci	r31, 0xFF	; 255
    12b2:	80 81       	ld	r24, Z
    12b4:	91 81       	ldd	r25, Z+1	; 0x01
    12b6:	01 97       	sbiw	r24, 0x01	; 1
    12b8:	f1 f7       	brne	.-4      	; 0x12b6 <LCD_voidLCDInit+0x23e>
    12ba:	fe 01       	movw	r30, r28
    12bc:	e0 5c       	subi	r30, 0xC0	; 192
    12be:	ff 4f       	sbci	r31, 0xFF	; 255
    12c0:	91 83       	std	Z+1, r25	; 0x01
    12c2:	80 83       	st	Z, r24
    12c4:	19 c0       	rjmp	.+50     	; 0x12f8 <LCD_voidLCDInit+0x280>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    12c6:	8e 01       	movw	r16, r28
    12c8:	02 5b       	subi	r16, 0xB2	; 178
    12ca:	1f 4f       	sbci	r17, 0xFF	; 255
    12cc:	fe 01       	movw	r30, r28
    12ce:	e1 5b       	subi	r30, 0xB1	; 177
    12d0:	ff 4f       	sbci	r31, 0xFF	; 255
    12d2:	60 81       	ld	r22, Z
    12d4:	71 81       	ldd	r23, Z+1	; 0x01
    12d6:	82 81       	ldd	r24, Z+2	; 0x02
    12d8:	93 81       	ldd	r25, Z+3	; 0x03
    12da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12de:	dc 01       	movw	r26, r24
    12e0:	cb 01       	movw	r24, r22
    12e2:	f8 01       	movw	r30, r16
    12e4:	80 83       	st	Z, r24
    12e6:	fe 01       	movw	r30, r28
    12e8:	e2 5b       	subi	r30, 0xB2	; 178
    12ea:	ff 4f       	sbci	r31, 0xFF	; 255
    12ec:	80 81       	ld	r24, Z
    12ee:	8f af       	std	Y+63, r24	; 0x3f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    12f0:	8f ad       	ldd	r24, Y+63	; 0x3f
    12f2:	8a 95       	dec	r24
    12f4:	f1 f7       	brne	.-4      	; 0x12f2 <LCD_voidLCDInit+0x27a>
    12f6:	8f af       	std	Y+63, r24	; 0x3f

		_delay_us(30);

		LCD_voidSendCommand(0x38);  //function set
    12f8:	88 e3       	ldi	r24, 0x38	; 56
    12fa:	0e 94 7f 0b 	call	0x16fe	; 0x16fe <LCD_voidSendCommand>
    12fe:	80 e0       	ldi	r24, 0x00	; 0
    1300:	90 e0       	ldi	r25, 0x00	; 0
    1302:	a8 ec       	ldi	r26, 0xC8	; 200
    1304:	b2 e4       	ldi	r27, 0x42	; 66
    1306:	8b af       	std	Y+59, r24	; 0x3b
    1308:	9c af       	std	Y+60, r25	; 0x3c
    130a:	ad af       	std	Y+61, r26	; 0x3d
    130c:	be af       	std	Y+62, r27	; 0x3e
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    130e:	6b ad       	ldd	r22, Y+59	; 0x3b
    1310:	7c ad       	ldd	r23, Y+60	; 0x3c
    1312:	8d ad       	ldd	r24, Y+61	; 0x3d
    1314:	9e ad       	ldd	r25, Y+62	; 0x3e
    1316:	2b ea       	ldi	r18, 0xAB	; 171
    1318:	3a ea       	ldi	r19, 0xAA	; 170
    131a:	4a e2       	ldi	r20, 0x2A	; 42
    131c:	50 e4       	ldi	r21, 0x40	; 64
    131e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1322:	dc 01       	movw	r26, r24
    1324:	cb 01       	movw	r24, r22
    1326:	8f ab       	std	Y+55, r24	; 0x37
    1328:	98 af       	std	Y+56, r25	; 0x38
    132a:	a9 af       	std	Y+57, r26	; 0x39
    132c:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
    132e:	6f a9       	ldd	r22, Y+55	; 0x37
    1330:	78 ad       	ldd	r23, Y+56	; 0x38
    1332:	89 ad       	ldd	r24, Y+57	; 0x39
    1334:	9a ad       	ldd	r25, Y+58	; 0x3a
    1336:	20 e0       	ldi	r18, 0x00	; 0
    1338:	30 e0       	ldi	r19, 0x00	; 0
    133a:	40 e8       	ldi	r20, 0x80	; 128
    133c:	5f e3       	ldi	r21, 0x3F	; 63
    133e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1342:	88 23       	and	r24, r24
    1344:	1c f4       	brge	.+6      	; 0x134c <LCD_voidLCDInit+0x2d4>
		__ticks = 1;
    1346:	81 e0       	ldi	r24, 0x01	; 1
    1348:	8e ab       	std	Y+54, r24	; 0x36
    134a:	91 c0       	rjmp	.+290    	; 0x146e <LCD_voidLCDInit+0x3f6>
	else if (__tmp > 255)
    134c:	6f a9       	ldd	r22, Y+55	; 0x37
    134e:	78 ad       	ldd	r23, Y+56	; 0x38
    1350:	89 ad       	ldd	r24, Y+57	; 0x39
    1352:	9a ad       	ldd	r25, Y+58	; 0x3a
    1354:	20 e0       	ldi	r18, 0x00	; 0
    1356:	30 e0       	ldi	r19, 0x00	; 0
    1358:	4f e7       	ldi	r20, 0x7F	; 127
    135a:	53 e4       	ldi	r21, 0x43	; 67
    135c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1360:	18 16       	cp	r1, r24
    1362:	0c f0       	brlt	.+2      	; 0x1366 <LCD_voidLCDInit+0x2ee>
    1364:	7b c0       	rjmp	.+246    	; 0x145c <LCD_voidLCDInit+0x3e4>
	{
		_delay_ms(__us / 1000.0);
    1366:	6b ad       	ldd	r22, Y+59	; 0x3b
    1368:	7c ad       	ldd	r23, Y+60	; 0x3c
    136a:	8d ad       	ldd	r24, Y+61	; 0x3d
    136c:	9e ad       	ldd	r25, Y+62	; 0x3e
    136e:	20 e0       	ldi	r18, 0x00	; 0
    1370:	30 e0       	ldi	r19, 0x00	; 0
    1372:	4a e7       	ldi	r20, 0x7A	; 122
    1374:	54 e4       	ldi	r21, 0x44	; 68
    1376:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    137a:	dc 01       	movw	r26, r24
    137c:	cb 01       	movw	r24, r22
    137e:	8a ab       	std	Y+50, r24	; 0x32
    1380:	9b ab       	std	Y+51, r25	; 0x33
    1382:	ac ab       	std	Y+52, r26	; 0x34
    1384:	bd ab       	std	Y+53, r27	; 0x35
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1386:	6a a9       	ldd	r22, Y+50	; 0x32
    1388:	7b a9       	ldd	r23, Y+51	; 0x33
    138a:	8c a9       	ldd	r24, Y+52	; 0x34
    138c:	9d a9       	ldd	r25, Y+53	; 0x35
    138e:	20 e0       	ldi	r18, 0x00	; 0
    1390:	30 e0       	ldi	r19, 0x00	; 0
    1392:	4a ef       	ldi	r20, 0xFA	; 250
    1394:	54 e4       	ldi	r21, 0x44	; 68
    1396:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    139a:	dc 01       	movw	r26, r24
    139c:	cb 01       	movw	r24, r22
    139e:	8e a7       	std	Y+46, r24	; 0x2e
    13a0:	9f a7       	std	Y+47, r25	; 0x2f
    13a2:	a8 ab       	std	Y+48, r26	; 0x30
    13a4:	b9 ab       	std	Y+49, r27	; 0x31
	if (__tmp < 1.0)
    13a6:	6e a5       	ldd	r22, Y+46	; 0x2e
    13a8:	7f a5       	ldd	r23, Y+47	; 0x2f
    13aa:	88 a9       	ldd	r24, Y+48	; 0x30
    13ac:	99 a9       	ldd	r25, Y+49	; 0x31
    13ae:	20 e0       	ldi	r18, 0x00	; 0
    13b0:	30 e0       	ldi	r19, 0x00	; 0
    13b2:	40 e8       	ldi	r20, 0x80	; 128
    13b4:	5f e3       	ldi	r21, 0x3F	; 63
    13b6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    13ba:	88 23       	and	r24, r24
    13bc:	2c f4       	brge	.+10     	; 0x13c8 <LCD_voidLCDInit+0x350>
		__ticks = 1;
    13be:	81 e0       	ldi	r24, 0x01	; 1
    13c0:	90 e0       	ldi	r25, 0x00	; 0
    13c2:	9d a7       	std	Y+45, r25	; 0x2d
    13c4:	8c a7       	std	Y+44, r24	; 0x2c
    13c6:	3f c0       	rjmp	.+126    	; 0x1446 <LCD_voidLCDInit+0x3ce>
	else if (__tmp > 65535)
    13c8:	6e a5       	ldd	r22, Y+46	; 0x2e
    13ca:	7f a5       	ldd	r23, Y+47	; 0x2f
    13cc:	88 a9       	ldd	r24, Y+48	; 0x30
    13ce:	99 a9       	ldd	r25, Y+49	; 0x31
    13d0:	20 e0       	ldi	r18, 0x00	; 0
    13d2:	3f ef       	ldi	r19, 0xFF	; 255
    13d4:	4f e7       	ldi	r20, 0x7F	; 127
    13d6:	57 e4       	ldi	r21, 0x47	; 71
    13d8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    13dc:	18 16       	cp	r1, r24
    13de:	4c f5       	brge	.+82     	; 0x1432 <LCD_voidLCDInit+0x3ba>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    13e0:	6a a9       	ldd	r22, Y+50	; 0x32
    13e2:	7b a9       	ldd	r23, Y+51	; 0x33
    13e4:	8c a9       	ldd	r24, Y+52	; 0x34
    13e6:	9d a9       	ldd	r25, Y+53	; 0x35
    13e8:	20 e0       	ldi	r18, 0x00	; 0
    13ea:	30 e0       	ldi	r19, 0x00	; 0
    13ec:	40 e2       	ldi	r20, 0x20	; 32
    13ee:	51 e4       	ldi	r21, 0x41	; 65
    13f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13f4:	dc 01       	movw	r26, r24
    13f6:	cb 01       	movw	r24, r22
    13f8:	bc 01       	movw	r22, r24
    13fa:	cd 01       	movw	r24, r26
    13fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1400:	dc 01       	movw	r26, r24
    1402:	cb 01       	movw	r24, r22
    1404:	9d a7       	std	Y+45, r25	; 0x2d
    1406:	8c a7       	std	Y+44, r24	; 0x2c
    1408:	0f c0       	rjmp	.+30     	; 0x1428 <LCD_voidLCDInit+0x3b0>
    140a:	88 ec       	ldi	r24, 0xC8	; 200
    140c:	90 e0       	ldi	r25, 0x00	; 0
    140e:	9b a7       	std	Y+43, r25	; 0x2b
    1410:	8a a7       	std	Y+42, r24	; 0x2a
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1412:	8a a5       	ldd	r24, Y+42	; 0x2a
    1414:	9b a5       	ldd	r25, Y+43	; 0x2b
    1416:	01 97       	sbiw	r24, 0x01	; 1
    1418:	f1 f7       	brne	.-4      	; 0x1416 <LCD_voidLCDInit+0x39e>
    141a:	9b a7       	std	Y+43, r25	; 0x2b
    141c:	8a a7       	std	Y+42, r24	; 0x2a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    141e:	8c a5       	ldd	r24, Y+44	; 0x2c
    1420:	9d a5       	ldd	r25, Y+45	; 0x2d
    1422:	01 97       	sbiw	r24, 0x01	; 1
    1424:	9d a7       	std	Y+45, r25	; 0x2d
    1426:	8c a7       	std	Y+44, r24	; 0x2c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1428:	8c a5       	ldd	r24, Y+44	; 0x2c
    142a:	9d a5       	ldd	r25, Y+45	; 0x2d
    142c:	00 97       	sbiw	r24, 0x00	; 0
    142e:	69 f7       	brne	.-38     	; 0x140a <LCD_voidLCDInit+0x392>
    1430:	24 c0       	rjmp	.+72     	; 0x147a <LCD_voidLCDInit+0x402>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1432:	6e a5       	ldd	r22, Y+46	; 0x2e
    1434:	7f a5       	ldd	r23, Y+47	; 0x2f
    1436:	88 a9       	ldd	r24, Y+48	; 0x30
    1438:	99 a9       	ldd	r25, Y+49	; 0x31
    143a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    143e:	dc 01       	movw	r26, r24
    1440:	cb 01       	movw	r24, r22
    1442:	9d a7       	std	Y+45, r25	; 0x2d
    1444:	8c a7       	std	Y+44, r24	; 0x2c
    1446:	8c a5       	ldd	r24, Y+44	; 0x2c
    1448:	9d a5       	ldd	r25, Y+45	; 0x2d
    144a:	99 a7       	std	Y+41, r25	; 0x29
    144c:	88 a7       	std	Y+40, r24	; 0x28
    144e:	88 a5       	ldd	r24, Y+40	; 0x28
    1450:	99 a5       	ldd	r25, Y+41	; 0x29
    1452:	01 97       	sbiw	r24, 0x01	; 1
    1454:	f1 f7       	brne	.-4      	; 0x1452 <LCD_voidLCDInit+0x3da>
    1456:	99 a7       	std	Y+41, r25	; 0x29
    1458:	88 a7       	std	Y+40, r24	; 0x28
    145a:	0f c0       	rjmp	.+30     	; 0x147a <LCD_voidLCDInit+0x402>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    145c:	6f a9       	ldd	r22, Y+55	; 0x37
    145e:	78 ad       	ldd	r23, Y+56	; 0x38
    1460:	89 ad       	ldd	r24, Y+57	; 0x39
    1462:	9a ad       	ldd	r25, Y+58	; 0x3a
    1464:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1468:	dc 01       	movw	r26, r24
    146a:	cb 01       	movw	r24, r22
    146c:	8e ab       	std	Y+54, r24	; 0x36
    146e:	8e a9       	ldd	r24, Y+54	; 0x36
    1470:	8f a3       	std	Y+39, r24	; 0x27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1472:	8f a1       	ldd	r24, Y+39	; 0x27
    1474:	8a 95       	dec	r24
    1476:	f1 f7       	brne	.-4      	; 0x1474 <LCD_voidLCDInit+0x3fc>
    1478:	8f a3       	std	Y+39, r24	; 0x27

		_delay_us(100);

		LCD_voidSendCommand(0x0C);   //
    147a:	8c e0       	ldi	r24, 0x0C	; 12
    147c:	0e 94 7f 0b 	call	0x16fe	; 0x16fe <LCD_voidSendCommand>
    1480:	80 e0       	ldi	r24, 0x00	; 0
    1482:	90 e0       	ldi	r25, 0x00	; 0
    1484:	a8 ec       	ldi	r26, 0xC8	; 200
    1486:	b2 e4       	ldi	r27, 0x42	; 66
    1488:	8b a3       	std	Y+35, r24	; 0x23
    148a:	9c a3       	std	Y+36, r25	; 0x24
    148c:	ad a3       	std	Y+37, r26	; 0x25
    148e:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1490:	6b a1       	ldd	r22, Y+35	; 0x23
    1492:	7c a1       	ldd	r23, Y+36	; 0x24
    1494:	8d a1       	ldd	r24, Y+37	; 0x25
    1496:	9e a1       	ldd	r25, Y+38	; 0x26
    1498:	2b ea       	ldi	r18, 0xAB	; 171
    149a:	3a ea       	ldi	r19, 0xAA	; 170
    149c:	4a e2       	ldi	r20, 0x2A	; 42
    149e:	50 e4       	ldi	r21, 0x40	; 64
    14a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14a4:	dc 01       	movw	r26, r24
    14a6:	cb 01       	movw	r24, r22
    14a8:	8f 8f       	std	Y+31, r24	; 0x1f
    14aa:	98 a3       	std	Y+32, r25	; 0x20
    14ac:	a9 a3       	std	Y+33, r26	; 0x21
    14ae:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    14b0:	6f 8d       	ldd	r22, Y+31	; 0x1f
    14b2:	78 a1       	ldd	r23, Y+32	; 0x20
    14b4:	89 a1       	ldd	r24, Y+33	; 0x21
    14b6:	9a a1       	ldd	r25, Y+34	; 0x22
    14b8:	20 e0       	ldi	r18, 0x00	; 0
    14ba:	30 e0       	ldi	r19, 0x00	; 0
    14bc:	40 e8       	ldi	r20, 0x80	; 128
    14be:	5f e3       	ldi	r21, 0x3F	; 63
    14c0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    14c4:	88 23       	and	r24, r24
    14c6:	1c f4       	brge	.+6      	; 0x14ce <LCD_voidLCDInit+0x456>
		__ticks = 1;
    14c8:	81 e0       	ldi	r24, 0x01	; 1
    14ca:	8e 8f       	std	Y+30, r24	; 0x1e
    14cc:	91 c0       	rjmp	.+290    	; 0x15f0 <LCD_voidLCDInit+0x578>
	else if (__tmp > 255)
    14ce:	6f 8d       	ldd	r22, Y+31	; 0x1f
    14d0:	78 a1       	ldd	r23, Y+32	; 0x20
    14d2:	89 a1       	ldd	r24, Y+33	; 0x21
    14d4:	9a a1       	ldd	r25, Y+34	; 0x22
    14d6:	20 e0       	ldi	r18, 0x00	; 0
    14d8:	30 e0       	ldi	r19, 0x00	; 0
    14da:	4f e7       	ldi	r20, 0x7F	; 127
    14dc:	53 e4       	ldi	r21, 0x43	; 67
    14de:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    14e2:	18 16       	cp	r1, r24
    14e4:	0c f0       	brlt	.+2      	; 0x14e8 <LCD_voidLCDInit+0x470>
    14e6:	7b c0       	rjmp	.+246    	; 0x15de <LCD_voidLCDInit+0x566>
	{
		_delay_ms(__us / 1000.0);
    14e8:	6b a1       	ldd	r22, Y+35	; 0x23
    14ea:	7c a1       	ldd	r23, Y+36	; 0x24
    14ec:	8d a1       	ldd	r24, Y+37	; 0x25
    14ee:	9e a1       	ldd	r25, Y+38	; 0x26
    14f0:	20 e0       	ldi	r18, 0x00	; 0
    14f2:	30 e0       	ldi	r19, 0x00	; 0
    14f4:	4a e7       	ldi	r20, 0x7A	; 122
    14f6:	54 e4       	ldi	r21, 0x44	; 68
    14f8:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    14fc:	dc 01       	movw	r26, r24
    14fe:	cb 01       	movw	r24, r22
    1500:	8a 8f       	std	Y+26, r24	; 0x1a
    1502:	9b 8f       	std	Y+27, r25	; 0x1b
    1504:	ac 8f       	std	Y+28, r26	; 0x1c
    1506:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1508:	6a 8d       	ldd	r22, Y+26	; 0x1a
    150a:	7b 8d       	ldd	r23, Y+27	; 0x1b
    150c:	8c 8d       	ldd	r24, Y+28	; 0x1c
    150e:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1510:	20 e0       	ldi	r18, 0x00	; 0
    1512:	30 e0       	ldi	r19, 0x00	; 0
    1514:	4a ef       	ldi	r20, 0xFA	; 250
    1516:	54 e4       	ldi	r21, 0x44	; 68
    1518:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    151c:	dc 01       	movw	r26, r24
    151e:	cb 01       	movw	r24, r22
    1520:	8e 8b       	std	Y+22, r24	; 0x16
    1522:	9f 8b       	std	Y+23, r25	; 0x17
    1524:	a8 8f       	std	Y+24, r26	; 0x18
    1526:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    1528:	6e 89       	ldd	r22, Y+22	; 0x16
    152a:	7f 89       	ldd	r23, Y+23	; 0x17
    152c:	88 8d       	ldd	r24, Y+24	; 0x18
    152e:	99 8d       	ldd	r25, Y+25	; 0x19
    1530:	20 e0       	ldi	r18, 0x00	; 0
    1532:	30 e0       	ldi	r19, 0x00	; 0
    1534:	40 e8       	ldi	r20, 0x80	; 128
    1536:	5f e3       	ldi	r21, 0x3F	; 63
    1538:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    153c:	88 23       	and	r24, r24
    153e:	2c f4       	brge	.+10     	; 0x154a <LCD_voidLCDInit+0x4d2>
		__ticks = 1;
    1540:	81 e0       	ldi	r24, 0x01	; 1
    1542:	90 e0       	ldi	r25, 0x00	; 0
    1544:	9d 8b       	std	Y+21, r25	; 0x15
    1546:	8c 8b       	std	Y+20, r24	; 0x14
    1548:	3f c0       	rjmp	.+126    	; 0x15c8 <LCD_voidLCDInit+0x550>
	else if (__tmp > 65535)
    154a:	6e 89       	ldd	r22, Y+22	; 0x16
    154c:	7f 89       	ldd	r23, Y+23	; 0x17
    154e:	88 8d       	ldd	r24, Y+24	; 0x18
    1550:	99 8d       	ldd	r25, Y+25	; 0x19
    1552:	20 e0       	ldi	r18, 0x00	; 0
    1554:	3f ef       	ldi	r19, 0xFF	; 255
    1556:	4f e7       	ldi	r20, 0x7F	; 127
    1558:	57 e4       	ldi	r21, 0x47	; 71
    155a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    155e:	18 16       	cp	r1, r24
    1560:	4c f5       	brge	.+82     	; 0x15b4 <LCD_voidLCDInit+0x53c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1562:	6a 8d       	ldd	r22, Y+26	; 0x1a
    1564:	7b 8d       	ldd	r23, Y+27	; 0x1b
    1566:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1568:	9d 8d       	ldd	r25, Y+29	; 0x1d
    156a:	20 e0       	ldi	r18, 0x00	; 0
    156c:	30 e0       	ldi	r19, 0x00	; 0
    156e:	40 e2       	ldi	r20, 0x20	; 32
    1570:	51 e4       	ldi	r21, 0x41	; 65
    1572:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1576:	dc 01       	movw	r26, r24
    1578:	cb 01       	movw	r24, r22
    157a:	bc 01       	movw	r22, r24
    157c:	cd 01       	movw	r24, r26
    157e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1582:	dc 01       	movw	r26, r24
    1584:	cb 01       	movw	r24, r22
    1586:	9d 8b       	std	Y+21, r25	; 0x15
    1588:	8c 8b       	std	Y+20, r24	; 0x14
    158a:	0f c0       	rjmp	.+30     	; 0x15aa <LCD_voidLCDInit+0x532>
    158c:	88 ec       	ldi	r24, 0xC8	; 200
    158e:	90 e0       	ldi	r25, 0x00	; 0
    1590:	9b 8b       	std	Y+19, r25	; 0x13
    1592:	8a 8b       	std	Y+18, r24	; 0x12
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1594:	8a 89       	ldd	r24, Y+18	; 0x12
    1596:	9b 89       	ldd	r25, Y+19	; 0x13
    1598:	01 97       	sbiw	r24, 0x01	; 1
    159a:	f1 f7       	brne	.-4      	; 0x1598 <LCD_voidLCDInit+0x520>
    159c:	9b 8b       	std	Y+19, r25	; 0x13
    159e:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    15a0:	8c 89       	ldd	r24, Y+20	; 0x14
    15a2:	9d 89       	ldd	r25, Y+21	; 0x15
    15a4:	01 97       	sbiw	r24, 0x01	; 1
    15a6:	9d 8b       	std	Y+21, r25	; 0x15
    15a8:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    15aa:	8c 89       	ldd	r24, Y+20	; 0x14
    15ac:	9d 89       	ldd	r25, Y+21	; 0x15
    15ae:	00 97       	sbiw	r24, 0x00	; 0
    15b0:	69 f7       	brne	.-38     	; 0x158c <LCD_voidLCDInit+0x514>
    15b2:	24 c0       	rjmp	.+72     	; 0x15fc <LCD_voidLCDInit+0x584>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    15b4:	6e 89       	ldd	r22, Y+22	; 0x16
    15b6:	7f 89       	ldd	r23, Y+23	; 0x17
    15b8:	88 8d       	ldd	r24, Y+24	; 0x18
    15ba:	99 8d       	ldd	r25, Y+25	; 0x19
    15bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15c0:	dc 01       	movw	r26, r24
    15c2:	cb 01       	movw	r24, r22
    15c4:	9d 8b       	std	Y+21, r25	; 0x15
    15c6:	8c 8b       	std	Y+20, r24	; 0x14
    15c8:	8c 89       	ldd	r24, Y+20	; 0x14
    15ca:	9d 89       	ldd	r25, Y+21	; 0x15
    15cc:	99 8b       	std	Y+17, r25	; 0x11
    15ce:	88 8b       	std	Y+16, r24	; 0x10
    15d0:	88 89       	ldd	r24, Y+16	; 0x10
    15d2:	99 89       	ldd	r25, Y+17	; 0x11
    15d4:	01 97       	sbiw	r24, 0x01	; 1
    15d6:	f1 f7       	brne	.-4      	; 0x15d4 <LCD_voidLCDInit+0x55c>
    15d8:	99 8b       	std	Y+17, r25	; 0x11
    15da:	88 8b       	std	Y+16, r24	; 0x10
    15dc:	0f c0       	rjmp	.+30     	; 0x15fc <LCD_voidLCDInit+0x584>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    15de:	6f 8d       	ldd	r22, Y+31	; 0x1f
    15e0:	78 a1       	ldd	r23, Y+32	; 0x20
    15e2:	89 a1       	ldd	r24, Y+33	; 0x21
    15e4:	9a a1       	ldd	r25, Y+34	; 0x22
    15e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15ea:	dc 01       	movw	r26, r24
    15ec:	cb 01       	movw	r24, r22
    15ee:	8e 8f       	std	Y+30, r24	; 0x1e
    15f0:	8e 8d       	ldd	r24, Y+30	; 0x1e
    15f2:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    15f4:	8f 85       	ldd	r24, Y+15	; 0x0f
    15f6:	8a 95       	dec	r24
    15f8:	f1 f7       	brne	.-4      	; 0x15f6 <LCD_voidLCDInit+0x57e>
    15fa:	8f 87       	std	Y+15, r24	; 0x0f

		_delay_us(100);

		LCD_voidSendCommand(0x01);   //clear screen
    15fc:	81 e0       	ldi	r24, 0x01	; 1
    15fe:	0e 94 7f 0b 	call	0x16fe	; 0x16fe <LCD_voidSendCommand>
    1602:	80 e0       	ldi	r24, 0x00	; 0
    1604:	90 e0       	ldi	r25, 0x00	; 0
    1606:	a0 e0       	ldi	r26, 0x00	; 0
    1608:	b0 e4       	ldi	r27, 0x40	; 64
    160a:	8b 87       	std	Y+11, r24	; 0x0b
    160c:	9c 87       	std	Y+12, r25	; 0x0c
    160e:	ad 87       	std	Y+13, r26	; 0x0d
    1610:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1612:	6b 85       	ldd	r22, Y+11	; 0x0b
    1614:	7c 85       	ldd	r23, Y+12	; 0x0c
    1616:	8d 85       	ldd	r24, Y+13	; 0x0d
    1618:	9e 85       	ldd	r25, Y+14	; 0x0e
    161a:	20 e0       	ldi	r18, 0x00	; 0
    161c:	30 e0       	ldi	r19, 0x00	; 0
    161e:	4a ef       	ldi	r20, 0xFA	; 250
    1620:	54 e4       	ldi	r21, 0x44	; 68
    1622:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1626:	dc 01       	movw	r26, r24
    1628:	cb 01       	movw	r24, r22
    162a:	8f 83       	std	Y+7, r24	; 0x07
    162c:	98 87       	std	Y+8, r25	; 0x08
    162e:	a9 87       	std	Y+9, r26	; 0x09
    1630:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1632:	6f 81       	ldd	r22, Y+7	; 0x07
    1634:	78 85       	ldd	r23, Y+8	; 0x08
    1636:	89 85       	ldd	r24, Y+9	; 0x09
    1638:	9a 85       	ldd	r25, Y+10	; 0x0a
    163a:	20 e0       	ldi	r18, 0x00	; 0
    163c:	30 e0       	ldi	r19, 0x00	; 0
    163e:	40 e8       	ldi	r20, 0x80	; 128
    1640:	5f e3       	ldi	r21, 0x3F	; 63
    1642:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1646:	88 23       	and	r24, r24
    1648:	2c f4       	brge	.+10     	; 0x1654 <LCD_voidLCDInit+0x5dc>
		__ticks = 1;
    164a:	81 e0       	ldi	r24, 0x01	; 1
    164c:	90 e0       	ldi	r25, 0x00	; 0
    164e:	9e 83       	std	Y+6, r25	; 0x06
    1650:	8d 83       	std	Y+5, r24	; 0x05
    1652:	3f c0       	rjmp	.+126    	; 0x16d2 <LCD_voidLCDInit+0x65a>
	else if (__tmp > 65535)
    1654:	6f 81       	ldd	r22, Y+7	; 0x07
    1656:	78 85       	ldd	r23, Y+8	; 0x08
    1658:	89 85       	ldd	r24, Y+9	; 0x09
    165a:	9a 85       	ldd	r25, Y+10	; 0x0a
    165c:	20 e0       	ldi	r18, 0x00	; 0
    165e:	3f ef       	ldi	r19, 0xFF	; 255
    1660:	4f e7       	ldi	r20, 0x7F	; 127
    1662:	57 e4       	ldi	r21, 0x47	; 71
    1664:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1668:	18 16       	cp	r1, r24
    166a:	4c f5       	brge	.+82     	; 0x16be <LCD_voidLCDInit+0x646>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    166c:	6b 85       	ldd	r22, Y+11	; 0x0b
    166e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1670:	8d 85       	ldd	r24, Y+13	; 0x0d
    1672:	9e 85       	ldd	r25, Y+14	; 0x0e
    1674:	20 e0       	ldi	r18, 0x00	; 0
    1676:	30 e0       	ldi	r19, 0x00	; 0
    1678:	40 e2       	ldi	r20, 0x20	; 32
    167a:	51 e4       	ldi	r21, 0x41	; 65
    167c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1680:	dc 01       	movw	r26, r24
    1682:	cb 01       	movw	r24, r22
    1684:	bc 01       	movw	r22, r24
    1686:	cd 01       	movw	r24, r26
    1688:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    168c:	dc 01       	movw	r26, r24
    168e:	cb 01       	movw	r24, r22
    1690:	9e 83       	std	Y+6, r25	; 0x06
    1692:	8d 83       	std	Y+5, r24	; 0x05
    1694:	0f c0       	rjmp	.+30     	; 0x16b4 <LCD_voidLCDInit+0x63c>
    1696:	88 ec       	ldi	r24, 0xC8	; 200
    1698:	90 e0       	ldi	r25, 0x00	; 0
    169a:	9c 83       	std	Y+4, r25	; 0x04
    169c:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    169e:	8b 81       	ldd	r24, Y+3	; 0x03
    16a0:	9c 81       	ldd	r25, Y+4	; 0x04
    16a2:	01 97       	sbiw	r24, 0x01	; 1
    16a4:	f1 f7       	brne	.-4      	; 0x16a2 <LCD_voidLCDInit+0x62a>
    16a6:	9c 83       	std	Y+4, r25	; 0x04
    16a8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16aa:	8d 81       	ldd	r24, Y+5	; 0x05
    16ac:	9e 81       	ldd	r25, Y+6	; 0x06
    16ae:	01 97       	sbiw	r24, 0x01	; 1
    16b0:	9e 83       	std	Y+6, r25	; 0x06
    16b2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16b4:	8d 81       	ldd	r24, Y+5	; 0x05
    16b6:	9e 81       	ldd	r25, Y+6	; 0x06
    16b8:	00 97       	sbiw	r24, 0x00	; 0
    16ba:	69 f7       	brne	.-38     	; 0x1696 <LCD_voidLCDInit+0x61e>
    16bc:	14 c0       	rjmp	.+40     	; 0x16e6 <LCD_voidLCDInit+0x66e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16be:	6f 81       	ldd	r22, Y+7	; 0x07
    16c0:	78 85       	ldd	r23, Y+8	; 0x08
    16c2:	89 85       	ldd	r24, Y+9	; 0x09
    16c4:	9a 85       	ldd	r25, Y+10	; 0x0a
    16c6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16ca:	dc 01       	movw	r26, r24
    16cc:	cb 01       	movw	r24, r22
    16ce:	9e 83       	std	Y+6, r25	; 0x06
    16d0:	8d 83       	std	Y+5, r24	; 0x05
    16d2:	8d 81       	ldd	r24, Y+5	; 0x05
    16d4:	9e 81       	ldd	r25, Y+6	; 0x06
    16d6:	9a 83       	std	Y+2, r25	; 0x02
    16d8:	89 83       	std	Y+1, r24	; 0x01
    16da:	89 81       	ldd	r24, Y+1	; 0x01
    16dc:	9a 81       	ldd	r25, Y+2	; 0x02
    16de:	01 97       	sbiw	r24, 0x01	; 1
    16e0:	f1 f7       	brne	.-4      	; 0x16de <LCD_voidLCDInit+0x666>
    16e2:	9a 83       	std	Y+2, r25	; 0x02
    16e4:	89 83       	std	Y+1, r24	; 0x01

		Global_u8Flag_4_bit = 1;
	}

#endif
}
    16e6:	ca 5a       	subi	r28, 0xAA	; 170
    16e8:	df 4f       	sbci	r29, 0xFF	; 255
    16ea:	0f b6       	in	r0, 0x3f	; 63
    16ec:	f8 94       	cli
    16ee:	de bf       	out	0x3e, r29	; 62
    16f0:	0f be       	out	0x3f, r0	; 63
    16f2:	cd bf       	out	0x3d, r28	; 61
    16f4:	cf 91       	pop	r28
    16f6:	df 91       	pop	r29
    16f8:	1f 91       	pop	r17
    16fa:	0f 91       	pop	r16
    16fc:	08 95       	ret

000016fe <LCD_voidSendCommand>:


void LCD_voidSendCommand(u8 CMD)
{
    16fe:	df 93       	push	r29
    1700:	cf 93       	push	r28
    1702:	cd b7       	in	r28, 0x3d	; 61
    1704:	de b7       	in	r29, 0x3e	; 62
    1706:	e1 97       	sbiw	r28, 0x31	; 49
    1708:	0f b6       	in	r0, 0x3f	; 63
    170a:	f8 94       	cli
    170c:	de bf       	out	0x3e, r29	; 62
    170e:	0f be       	out	0x3f, r0	; 63
    1710:	cd bf       	out	0x3d, r28	; 61
    1712:	89 ab       	std	Y+49, r24	; 0x31
	DIO_u8SetPinValue(LCD_CONTROL_PORT, RS_PIN, DIO_u8PIN_LOW);
    1714:	82 e0       	ldi	r24, 0x02	; 2
    1716:	67 e0       	ldi	r22, 0x07	; 7
    1718:	40 e0       	ldi	r20, 0x00	; 0
    171a:	0e 94 26 12 	call	0x244c	; 0x244c <DIO_u8SetPinValue>
	DIO_u8SetPinValue(LCD_CONTROL_PORT, RW_PIN, DIO_u8PIN_LOW);
    171e:	82 e0       	ldi	r24, 0x02	; 2
    1720:	66 e0       	ldi	r22, 0x06	; 6
    1722:	40 e0       	ldi	r20, 0x00	; 0
    1724:	0e 94 26 12 	call	0x244c	; 0x244c <DIO_u8SetPinValue>

#if LCD_MODE == _8_BIT
	{
		DIO_u8SetPortValue(LCD_DATA_PORT, CMD);
    1728:	81 e0       	ldi	r24, 0x01	; 1
    172a:	69 a9       	ldd	r22, Y+49	; 0x31
    172c:	0e 94 63 13 	call	0x26c6	; 0x26c6 <DIO_u8SetPortValue>

		DIO_u8SetPinValue(LCD_CONTROL_PORT, EN_PIN, DIO_u8PIN_HIGH);
    1730:	82 e0       	ldi	r24, 0x02	; 2
    1732:	65 e0       	ldi	r22, 0x05	; 5
    1734:	41 e0       	ldi	r20, 0x01	; 1
    1736:	0e 94 26 12 	call	0x244c	; 0x244c <DIO_u8SetPinValue>
    173a:	80 e0       	ldi	r24, 0x00	; 0
    173c:	90 e0       	ldi	r25, 0x00	; 0
    173e:	a8 ec       	ldi	r26, 0xC8	; 200
    1740:	b2 e4       	ldi	r27, 0x42	; 66
    1742:	8d a7       	std	Y+45, r24	; 0x2d
    1744:	9e a7       	std	Y+46, r25	; 0x2e
    1746:	af a7       	std	Y+47, r26	; 0x2f
    1748:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    174a:	6d a5       	ldd	r22, Y+45	; 0x2d
    174c:	7e a5       	ldd	r23, Y+46	; 0x2e
    174e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1750:	98 a9       	ldd	r25, Y+48	; 0x30
    1752:	2b ea       	ldi	r18, 0xAB	; 171
    1754:	3a ea       	ldi	r19, 0xAA	; 170
    1756:	4a e2       	ldi	r20, 0x2A	; 42
    1758:	50 e4       	ldi	r21, 0x40	; 64
    175a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    175e:	dc 01       	movw	r26, r24
    1760:	cb 01       	movw	r24, r22
    1762:	89 a7       	std	Y+41, r24	; 0x29
    1764:	9a a7       	std	Y+42, r25	; 0x2a
    1766:	ab a7       	std	Y+43, r26	; 0x2b
    1768:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    176a:	69 a5       	ldd	r22, Y+41	; 0x29
    176c:	7a a5       	ldd	r23, Y+42	; 0x2a
    176e:	8b a5       	ldd	r24, Y+43	; 0x2b
    1770:	9c a5       	ldd	r25, Y+44	; 0x2c
    1772:	20 e0       	ldi	r18, 0x00	; 0
    1774:	30 e0       	ldi	r19, 0x00	; 0
    1776:	40 e8       	ldi	r20, 0x80	; 128
    1778:	5f e3       	ldi	r21, 0x3F	; 63
    177a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    177e:	88 23       	and	r24, r24
    1780:	1c f4       	brge	.+6      	; 0x1788 <LCD_voidSendCommand+0x8a>
		__ticks = 1;
    1782:	81 e0       	ldi	r24, 0x01	; 1
    1784:	88 a7       	std	Y+40, r24	; 0x28
    1786:	91 c0       	rjmp	.+290    	; 0x18aa <LCD_voidSendCommand+0x1ac>
	else if (__tmp > 255)
    1788:	69 a5       	ldd	r22, Y+41	; 0x29
    178a:	7a a5       	ldd	r23, Y+42	; 0x2a
    178c:	8b a5       	ldd	r24, Y+43	; 0x2b
    178e:	9c a5       	ldd	r25, Y+44	; 0x2c
    1790:	20 e0       	ldi	r18, 0x00	; 0
    1792:	30 e0       	ldi	r19, 0x00	; 0
    1794:	4f e7       	ldi	r20, 0x7F	; 127
    1796:	53 e4       	ldi	r21, 0x43	; 67
    1798:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    179c:	18 16       	cp	r1, r24
    179e:	0c f0       	brlt	.+2      	; 0x17a2 <LCD_voidSendCommand+0xa4>
    17a0:	7b c0       	rjmp	.+246    	; 0x1898 <LCD_voidSendCommand+0x19a>
	{
		_delay_ms(__us / 1000.0);
    17a2:	6d a5       	ldd	r22, Y+45	; 0x2d
    17a4:	7e a5       	ldd	r23, Y+46	; 0x2e
    17a6:	8f a5       	ldd	r24, Y+47	; 0x2f
    17a8:	98 a9       	ldd	r25, Y+48	; 0x30
    17aa:	20 e0       	ldi	r18, 0x00	; 0
    17ac:	30 e0       	ldi	r19, 0x00	; 0
    17ae:	4a e7       	ldi	r20, 0x7A	; 122
    17b0:	54 e4       	ldi	r21, 0x44	; 68
    17b2:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    17b6:	dc 01       	movw	r26, r24
    17b8:	cb 01       	movw	r24, r22
    17ba:	8c a3       	std	Y+36, r24	; 0x24
    17bc:	9d a3       	std	Y+37, r25	; 0x25
    17be:	ae a3       	std	Y+38, r26	; 0x26
    17c0:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17c2:	6c a1       	ldd	r22, Y+36	; 0x24
    17c4:	7d a1       	ldd	r23, Y+37	; 0x25
    17c6:	8e a1       	ldd	r24, Y+38	; 0x26
    17c8:	9f a1       	ldd	r25, Y+39	; 0x27
    17ca:	20 e0       	ldi	r18, 0x00	; 0
    17cc:	30 e0       	ldi	r19, 0x00	; 0
    17ce:	4a ef       	ldi	r20, 0xFA	; 250
    17d0:	54 e4       	ldi	r21, 0x44	; 68
    17d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17d6:	dc 01       	movw	r26, r24
    17d8:	cb 01       	movw	r24, r22
    17da:	88 a3       	std	Y+32, r24	; 0x20
    17dc:	99 a3       	std	Y+33, r25	; 0x21
    17de:	aa a3       	std	Y+34, r26	; 0x22
    17e0:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    17e2:	68 a1       	ldd	r22, Y+32	; 0x20
    17e4:	79 a1       	ldd	r23, Y+33	; 0x21
    17e6:	8a a1       	ldd	r24, Y+34	; 0x22
    17e8:	9b a1       	ldd	r25, Y+35	; 0x23
    17ea:	20 e0       	ldi	r18, 0x00	; 0
    17ec:	30 e0       	ldi	r19, 0x00	; 0
    17ee:	40 e8       	ldi	r20, 0x80	; 128
    17f0:	5f e3       	ldi	r21, 0x3F	; 63
    17f2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    17f6:	88 23       	and	r24, r24
    17f8:	2c f4       	brge	.+10     	; 0x1804 <LCD_voidSendCommand+0x106>
		__ticks = 1;
    17fa:	81 e0       	ldi	r24, 0x01	; 1
    17fc:	90 e0       	ldi	r25, 0x00	; 0
    17fe:	9f 8f       	std	Y+31, r25	; 0x1f
    1800:	8e 8f       	std	Y+30, r24	; 0x1e
    1802:	3f c0       	rjmp	.+126    	; 0x1882 <LCD_voidSendCommand+0x184>
	else if (__tmp > 65535)
    1804:	68 a1       	ldd	r22, Y+32	; 0x20
    1806:	79 a1       	ldd	r23, Y+33	; 0x21
    1808:	8a a1       	ldd	r24, Y+34	; 0x22
    180a:	9b a1       	ldd	r25, Y+35	; 0x23
    180c:	20 e0       	ldi	r18, 0x00	; 0
    180e:	3f ef       	ldi	r19, 0xFF	; 255
    1810:	4f e7       	ldi	r20, 0x7F	; 127
    1812:	57 e4       	ldi	r21, 0x47	; 71
    1814:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1818:	18 16       	cp	r1, r24
    181a:	4c f5       	brge	.+82     	; 0x186e <LCD_voidSendCommand+0x170>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    181c:	6c a1       	ldd	r22, Y+36	; 0x24
    181e:	7d a1       	ldd	r23, Y+37	; 0x25
    1820:	8e a1       	ldd	r24, Y+38	; 0x26
    1822:	9f a1       	ldd	r25, Y+39	; 0x27
    1824:	20 e0       	ldi	r18, 0x00	; 0
    1826:	30 e0       	ldi	r19, 0x00	; 0
    1828:	40 e2       	ldi	r20, 0x20	; 32
    182a:	51 e4       	ldi	r21, 0x41	; 65
    182c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1830:	dc 01       	movw	r26, r24
    1832:	cb 01       	movw	r24, r22
    1834:	bc 01       	movw	r22, r24
    1836:	cd 01       	movw	r24, r26
    1838:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    183c:	dc 01       	movw	r26, r24
    183e:	cb 01       	movw	r24, r22
    1840:	9f 8f       	std	Y+31, r25	; 0x1f
    1842:	8e 8f       	std	Y+30, r24	; 0x1e
    1844:	0f c0       	rjmp	.+30     	; 0x1864 <LCD_voidSendCommand+0x166>
    1846:	88 ec       	ldi	r24, 0xC8	; 200
    1848:	90 e0       	ldi	r25, 0x00	; 0
    184a:	9d 8f       	std	Y+29, r25	; 0x1d
    184c:	8c 8f       	std	Y+28, r24	; 0x1c
    184e:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1850:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1852:	01 97       	sbiw	r24, 0x01	; 1
    1854:	f1 f7       	brne	.-4      	; 0x1852 <LCD_voidSendCommand+0x154>
    1856:	9d 8f       	std	Y+29, r25	; 0x1d
    1858:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    185a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    185c:	9f 8d       	ldd	r25, Y+31	; 0x1f
    185e:	01 97       	sbiw	r24, 0x01	; 1
    1860:	9f 8f       	std	Y+31, r25	; 0x1f
    1862:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1864:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1866:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1868:	00 97       	sbiw	r24, 0x00	; 0
    186a:	69 f7       	brne	.-38     	; 0x1846 <LCD_voidSendCommand+0x148>
    186c:	24 c0       	rjmp	.+72     	; 0x18b6 <LCD_voidSendCommand+0x1b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    186e:	68 a1       	ldd	r22, Y+32	; 0x20
    1870:	79 a1       	ldd	r23, Y+33	; 0x21
    1872:	8a a1       	ldd	r24, Y+34	; 0x22
    1874:	9b a1       	ldd	r25, Y+35	; 0x23
    1876:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    187a:	dc 01       	movw	r26, r24
    187c:	cb 01       	movw	r24, r22
    187e:	9f 8f       	std	Y+31, r25	; 0x1f
    1880:	8e 8f       	std	Y+30, r24	; 0x1e
    1882:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1884:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1886:	9b 8f       	std	Y+27, r25	; 0x1b
    1888:	8a 8f       	std	Y+26, r24	; 0x1a
    188a:	8a 8d       	ldd	r24, Y+26	; 0x1a
    188c:	9b 8d       	ldd	r25, Y+27	; 0x1b
    188e:	01 97       	sbiw	r24, 0x01	; 1
    1890:	f1 f7       	brne	.-4      	; 0x188e <LCD_voidSendCommand+0x190>
    1892:	9b 8f       	std	Y+27, r25	; 0x1b
    1894:	8a 8f       	std	Y+26, r24	; 0x1a
    1896:	0f c0       	rjmp	.+30     	; 0x18b6 <LCD_voidSendCommand+0x1b8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1898:	69 a5       	ldd	r22, Y+41	; 0x29
    189a:	7a a5       	ldd	r23, Y+42	; 0x2a
    189c:	8b a5       	ldd	r24, Y+43	; 0x2b
    189e:	9c a5       	ldd	r25, Y+44	; 0x2c
    18a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18a4:	dc 01       	movw	r26, r24
    18a6:	cb 01       	movw	r24, r22
    18a8:	88 a7       	std	Y+40, r24	; 0x28
    18aa:	88 a5       	ldd	r24, Y+40	; 0x28
    18ac:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    18ae:	89 8d       	ldd	r24, Y+25	; 0x19
    18b0:	8a 95       	dec	r24
    18b2:	f1 f7       	brne	.-4      	; 0x18b0 <LCD_voidSendCommand+0x1b2>
    18b4:	89 8f       	std	Y+25, r24	; 0x19
		_delay_us(100);
		DIO_u8SetPinValue(LCD_CONTROL_PORT, EN_PIN, DIO_u8PIN_LOW);
    18b6:	82 e0       	ldi	r24, 0x02	; 2
    18b8:	65 e0       	ldi	r22, 0x05	; 5
    18ba:	40 e0       	ldi	r20, 0x00	; 0
    18bc:	0e 94 26 12 	call	0x244c	; 0x244c <DIO_u8SetPinValue>
		_delay_us(100);
		DIO_u8SetPinValue(LCD_CONTROL_PORT, EN_PIN, DIO_u8PIN_LOW);
	}
#endif

	if(Global_u8Flag_4_bit == 1)
    18c0:	80 91 3e 05 	lds	r24, 0x053E
    18c4:	81 30       	cpi	r24, 0x01	; 1
    18c6:	09 f0       	breq	.+2      	; 0x18ca <LCD_voidSendCommand+0x1cc>
    18c8:	ee c0       	rjmp	.+476    	; 0x1aa6 <LCD_voidSendCommand+0x3a8>
	{
		DIO_u8SetPinValue(LCD_DATA_PORT, DIO_u8PIN4, GET_BIT(CMD,0));
    18ca:	89 a9       	ldd	r24, Y+49	; 0x31
    18cc:	98 2f       	mov	r25, r24
    18ce:	91 70       	andi	r25, 0x01	; 1
    18d0:	81 e0       	ldi	r24, 0x01	; 1
    18d2:	64 e0       	ldi	r22, 0x04	; 4
    18d4:	49 2f       	mov	r20, r25
    18d6:	0e 94 26 12 	call	0x244c	; 0x244c <DIO_u8SetPinValue>
		DIO_u8SetPinValue(LCD_DATA_PORT, DIO_u8PIN5, GET_BIT(CMD,1));
    18da:	89 a9       	ldd	r24, Y+49	; 0x31
    18dc:	86 95       	lsr	r24
    18de:	98 2f       	mov	r25, r24
    18e0:	91 70       	andi	r25, 0x01	; 1
    18e2:	81 e0       	ldi	r24, 0x01	; 1
    18e4:	65 e0       	ldi	r22, 0x05	; 5
    18e6:	49 2f       	mov	r20, r25
    18e8:	0e 94 26 12 	call	0x244c	; 0x244c <DIO_u8SetPinValue>
		DIO_u8SetPinValue(LCD_DATA_PORT, DIO_u8PIN6, GET_BIT(CMD,2));
    18ec:	89 a9       	ldd	r24, Y+49	; 0x31
    18ee:	86 95       	lsr	r24
    18f0:	86 95       	lsr	r24
    18f2:	98 2f       	mov	r25, r24
    18f4:	91 70       	andi	r25, 0x01	; 1
    18f6:	81 e0       	ldi	r24, 0x01	; 1
    18f8:	66 e0       	ldi	r22, 0x06	; 6
    18fa:	49 2f       	mov	r20, r25
    18fc:	0e 94 26 12 	call	0x244c	; 0x244c <DIO_u8SetPinValue>
		DIO_u8SetPinValue(LCD_DATA_PORT, DIO_u8PIN7, GET_BIT(CMD,3));
    1900:	89 a9       	ldd	r24, Y+49	; 0x31
    1902:	86 95       	lsr	r24
    1904:	86 95       	lsr	r24
    1906:	86 95       	lsr	r24
    1908:	98 2f       	mov	r25, r24
    190a:	91 70       	andi	r25, 0x01	; 1
    190c:	81 e0       	ldi	r24, 0x01	; 1
    190e:	67 e0       	ldi	r22, 0x07	; 7
    1910:	49 2f       	mov	r20, r25
    1912:	0e 94 26 12 	call	0x244c	; 0x244c <DIO_u8SetPinValue>

		DIO_u8SetPinValue(LCD_CONTROL_PORT, EN_PIN, DIO_u8PIN_HIGH);
    1916:	82 e0       	ldi	r24, 0x02	; 2
    1918:	65 e0       	ldi	r22, 0x05	; 5
    191a:	41 e0       	ldi	r20, 0x01	; 1
    191c:	0e 94 26 12 	call	0x244c	; 0x244c <DIO_u8SetPinValue>
    1920:	80 e0       	ldi	r24, 0x00	; 0
    1922:	90 e0       	ldi	r25, 0x00	; 0
    1924:	a8 ec       	ldi	r26, 0xC8	; 200
    1926:	b2 e4       	ldi	r27, 0x42	; 66
    1928:	8d 8b       	std	Y+21, r24	; 0x15
    192a:	9e 8b       	std	Y+22, r25	; 0x16
    192c:	af 8b       	std	Y+23, r26	; 0x17
    192e:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1930:	6d 89       	ldd	r22, Y+21	; 0x15
    1932:	7e 89       	ldd	r23, Y+22	; 0x16
    1934:	8f 89       	ldd	r24, Y+23	; 0x17
    1936:	98 8d       	ldd	r25, Y+24	; 0x18
    1938:	2b ea       	ldi	r18, 0xAB	; 171
    193a:	3a ea       	ldi	r19, 0xAA	; 170
    193c:	4a e2       	ldi	r20, 0x2A	; 42
    193e:	50 e4       	ldi	r21, 0x40	; 64
    1940:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1944:	dc 01       	movw	r26, r24
    1946:	cb 01       	movw	r24, r22
    1948:	89 8b       	std	Y+17, r24	; 0x11
    194a:	9a 8b       	std	Y+18, r25	; 0x12
    194c:	ab 8b       	std	Y+19, r26	; 0x13
    194e:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    1950:	69 89       	ldd	r22, Y+17	; 0x11
    1952:	7a 89       	ldd	r23, Y+18	; 0x12
    1954:	8b 89       	ldd	r24, Y+19	; 0x13
    1956:	9c 89       	ldd	r25, Y+20	; 0x14
    1958:	20 e0       	ldi	r18, 0x00	; 0
    195a:	30 e0       	ldi	r19, 0x00	; 0
    195c:	40 e8       	ldi	r20, 0x80	; 128
    195e:	5f e3       	ldi	r21, 0x3F	; 63
    1960:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1964:	88 23       	and	r24, r24
    1966:	1c f4       	brge	.+6      	; 0x196e <LCD_voidSendCommand+0x270>
		__ticks = 1;
    1968:	81 e0       	ldi	r24, 0x01	; 1
    196a:	88 8b       	std	Y+16, r24	; 0x10
    196c:	91 c0       	rjmp	.+290    	; 0x1a90 <LCD_voidSendCommand+0x392>
	else if (__tmp > 255)
    196e:	69 89       	ldd	r22, Y+17	; 0x11
    1970:	7a 89       	ldd	r23, Y+18	; 0x12
    1972:	8b 89       	ldd	r24, Y+19	; 0x13
    1974:	9c 89       	ldd	r25, Y+20	; 0x14
    1976:	20 e0       	ldi	r18, 0x00	; 0
    1978:	30 e0       	ldi	r19, 0x00	; 0
    197a:	4f e7       	ldi	r20, 0x7F	; 127
    197c:	53 e4       	ldi	r21, 0x43	; 67
    197e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1982:	18 16       	cp	r1, r24
    1984:	0c f0       	brlt	.+2      	; 0x1988 <LCD_voidSendCommand+0x28a>
    1986:	7b c0       	rjmp	.+246    	; 0x1a7e <LCD_voidSendCommand+0x380>
	{
		_delay_ms(__us / 1000.0);
    1988:	6d 89       	ldd	r22, Y+21	; 0x15
    198a:	7e 89       	ldd	r23, Y+22	; 0x16
    198c:	8f 89       	ldd	r24, Y+23	; 0x17
    198e:	98 8d       	ldd	r25, Y+24	; 0x18
    1990:	20 e0       	ldi	r18, 0x00	; 0
    1992:	30 e0       	ldi	r19, 0x00	; 0
    1994:	4a e7       	ldi	r20, 0x7A	; 122
    1996:	54 e4       	ldi	r21, 0x44	; 68
    1998:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    199c:	dc 01       	movw	r26, r24
    199e:	cb 01       	movw	r24, r22
    19a0:	8c 87       	std	Y+12, r24	; 0x0c
    19a2:	9d 87       	std	Y+13, r25	; 0x0d
    19a4:	ae 87       	std	Y+14, r26	; 0x0e
    19a6:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19a8:	6c 85       	ldd	r22, Y+12	; 0x0c
    19aa:	7d 85       	ldd	r23, Y+13	; 0x0d
    19ac:	8e 85       	ldd	r24, Y+14	; 0x0e
    19ae:	9f 85       	ldd	r25, Y+15	; 0x0f
    19b0:	20 e0       	ldi	r18, 0x00	; 0
    19b2:	30 e0       	ldi	r19, 0x00	; 0
    19b4:	4a ef       	ldi	r20, 0xFA	; 250
    19b6:	54 e4       	ldi	r21, 0x44	; 68
    19b8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19bc:	dc 01       	movw	r26, r24
    19be:	cb 01       	movw	r24, r22
    19c0:	88 87       	std	Y+8, r24	; 0x08
    19c2:	99 87       	std	Y+9, r25	; 0x09
    19c4:	aa 87       	std	Y+10, r26	; 0x0a
    19c6:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    19c8:	68 85       	ldd	r22, Y+8	; 0x08
    19ca:	79 85       	ldd	r23, Y+9	; 0x09
    19cc:	8a 85       	ldd	r24, Y+10	; 0x0a
    19ce:	9b 85       	ldd	r25, Y+11	; 0x0b
    19d0:	20 e0       	ldi	r18, 0x00	; 0
    19d2:	30 e0       	ldi	r19, 0x00	; 0
    19d4:	40 e8       	ldi	r20, 0x80	; 128
    19d6:	5f e3       	ldi	r21, 0x3F	; 63
    19d8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    19dc:	88 23       	and	r24, r24
    19de:	2c f4       	brge	.+10     	; 0x19ea <LCD_voidSendCommand+0x2ec>
		__ticks = 1;
    19e0:	81 e0       	ldi	r24, 0x01	; 1
    19e2:	90 e0       	ldi	r25, 0x00	; 0
    19e4:	9f 83       	std	Y+7, r25	; 0x07
    19e6:	8e 83       	std	Y+6, r24	; 0x06
    19e8:	3f c0       	rjmp	.+126    	; 0x1a68 <LCD_voidSendCommand+0x36a>
	else if (__tmp > 65535)
    19ea:	68 85       	ldd	r22, Y+8	; 0x08
    19ec:	79 85       	ldd	r23, Y+9	; 0x09
    19ee:	8a 85       	ldd	r24, Y+10	; 0x0a
    19f0:	9b 85       	ldd	r25, Y+11	; 0x0b
    19f2:	20 e0       	ldi	r18, 0x00	; 0
    19f4:	3f ef       	ldi	r19, 0xFF	; 255
    19f6:	4f e7       	ldi	r20, 0x7F	; 127
    19f8:	57 e4       	ldi	r21, 0x47	; 71
    19fa:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    19fe:	18 16       	cp	r1, r24
    1a00:	4c f5       	brge	.+82     	; 0x1a54 <LCD_voidSendCommand+0x356>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a02:	6c 85       	ldd	r22, Y+12	; 0x0c
    1a04:	7d 85       	ldd	r23, Y+13	; 0x0d
    1a06:	8e 85       	ldd	r24, Y+14	; 0x0e
    1a08:	9f 85       	ldd	r25, Y+15	; 0x0f
    1a0a:	20 e0       	ldi	r18, 0x00	; 0
    1a0c:	30 e0       	ldi	r19, 0x00	; 0
    1a0e:	40 e2       	ldi	r20, 0x20	; 32
    1a10:	51 e4       	ldi	r21, 0x41	; 65
    1a12:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a16:	dc 01       	movw	r26, r24
    1a18:	cb 01       	movw	r24, r22
    1a1a:	bc 01       	movw	r22, r24
    1a1c:	cd 01       	movw	r24, r26
    1a1e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a22:	dc 01       	movw	r26, r24
    1a24:	cb 01       	movw	r24, r22
    1a26:	9f 83       	std	Y+7, r25	; 0x07
    1a28:	8e 83       	std	Y+6, r24	; 0x06
    1a2a:	0f c0       	rjmp	.+30     	; 0x1a4a <LCD_voidSendCommand+0x34c>
    1a2c:	88 ec       	ldi	r24, 0xC8	; 200
    1a2e:	90 e0       	ldi	r25, 0x00	; 0
    1a30:	9d 83       	std	Y+5, r25	; 0x05
    1a32:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1a34:	8c 81       	ldd	r24, Y+4	; 0x04
    1a36:	9d 81       	ldd	r25, Y+5	; 0x05
    1a38:	01 97       	sbiw	r24, 0x01	; 1
    1a3a:	f1 f7       	brne	.-4      	; 0x1a38 <LCD_voidSendCommand+0x33a>
    1a3c:	9d 83       	std	Y+5, r25	; 0x05
    1a3e:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a40:	8e 81       	ldd	r24, Y+6	; 0x06
    1a42:	9f 81       	ldd	r25, Y+7	; 0x07
    1a44:	01 97       	sbiw	r24, 0x01	; 1
    1a46:	9f 83       	std	Y+7, r25	; 0x07
    1a48:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a4a:	8e 81       	ldd	r24, Y+6	; 0x06
    1a4c:	9f 81       	ldd	r25, Y+7	; 0x07
    1a4e:	00 97       	sbiw	r24, 0x00	; 0
    1a50:	69 f7       	brne	.-38     	; 0x1a2c <LCD_voidSendCommand+0x32e>
    1a52:	24 c0       	rjmp	.+72     	; 0x1a9c <LCD_voidSendCommand+0x39e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a54:	68 85       	ldd	r22, Y+8	; 0x08
    1a56:	79 85       	ldd	r23, Y+9	; 0x09
    1a58:	8a 85       	ldd	r24, Y+10	; 0x0a
    1a5a:	9b 85       	ldd	r25, Y+11	; 0x0b
    1a5c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a60:	dc 01       	movw	r26, r24
    1a62:	cb 01       	movw	r24, r22
    1a64:	9f 83       	std	Y+7, r25	; 0x07
    1a66:	8e 83       	std	Y+6, r24	; 0x06
    1a68:	8e 81       	ldd	r24, Y+6	; 0x06
    1a6a:	9f 81       	ldd	r25, Y+7	; 0x07
    1a6c:	9b 83       	std	Y+3, r25	; 0x03
    1a6e:	8a 83       	std	Y+2, r24	; 0x02
    1a70:	8a 81       	ldd	r24, Y+2	; 0x02
    1a72:	9b 81       	ldd	r25, Y+3	; 0x03
    1a74:	01 97       	sbiw	r24, 0x01	; 1
    1a76:	f1 f7       	brne	.-4      	; 0x1a74 <LCD_voidSendCommand+0x376>
    1a78:	9b 83       	std	Y+3, r25	; 0x03
    1a7a:	8a 83       	std	Y+2, r24	; 0x02
    1a7c:	0f c0       	rjmp	.+30     	; 0x1a9c <LCD_voidSendCommand+0x39e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1a7e:	69 89       	ldd	r22, Y+17	; 0x11
    1a80:	7a 89       	ldd	r23, Y+18	; 0x12
    1a82:	8b 89       	ldd	r24, Y+19	; 0x13
    1a84:	9c 89       	ldd	r25, Y+20	; 0x14
    1a86:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a8a:	dc 01       	movw	r26, r24
    1a8c:	cb 01       	movw	r24, r22
    1a8e:	88 8b       	std	Y+16, r24	; 0x10
    1a90:	88 89       	ldd	r24, Y+16	; 0x10
    1a92:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1a94:	89 81       	ldd	r24, Y+1	; 0x01
    1a96:	8a 95       	dec	r24
    1a98:	f1 f7       	brne	.-4      	; 0x1a96 <LCD_voidSendCommand+0x398>
    1a9a:	89 83       	std	Y+1, r24	; 0x01
		_delay_us(100);
		DIO_u8SetPinValue(LCD_CONTROL_PORT, EN_PIN, DIO_u8PIN_LOW);
    1a9c:	82 e0       	ldi	r24, 0x02	; 2
    1a9e:	65 e0       	ldi	r22, 0x05	; 5
    1aa0:	40 e0       	ldi	r20, 0x00	; 0
    1aa2:	0e 94 26 12 	call	0x244c	; 0x244c <DIO_u8SetPinValue>
	}
}
    1aa6:	e1 96       	adiw	r28, 0x31	; 49
    1aa8:	0f b6       	in	r0, 0x3f	; 63
    1aaa:	f8 94       	cli
    1aac:	de bf       	out	0x3e, r29	; 62
    1aae:	0f be       	out	0x3f, r0	; 63
    1ab0:	cd bf       	out	0x3d, r28	; 61
    1ab2:	cf 91       	pop	r28
    1ab4:	df 91       	pop	r29
    1ab6:	08 95       	ret

00001ab8 <LCD_voidSendCharacter>:

void LCD_voidSendCharacter(u8 Character)
{
    1ab8:	df 93       	push	r29
    1aba:	cf 93       	push	r28
    1abc:	cd b7       	in	r28, 0x3d	; 61
    1abe:	de b7       	in	r29, 0x3e	; 62
    1ac0:	69 97       	sbiw	r28, 0x19	; 25
    1ac2:	0f b6       	in	r0, 0x3f	; 63
    1ac4:	f8 94       	cli
    1ac6:	de bf       	out	0x3e, r29	; 62
    1ac8:	0f be       	out	0x3f, r0	; 63
    1aca:	cd bf       	out	0x3d, r28	; 61
    1acc:	89 8f       	std	Y+25, r24	; 0x19
	DIO_u8SetPinValue(LCD_CONTROL_PORT, RS_PIN, DIO_u8PIN_HIGH);
    1ace:	82 e0       	ldi	r24, 0x02	; 2
    1ad0:	67 e0       	ldi	r22, 0x07	; 7
    1ad2:	41 e0       	ldi	r20, 0x01	; 1
    1ad4:	0e 94 26 12 	call	0x244c	; 0x244c <DIO_u8SetPinValue>
	DIO_u8SetPinValue(LCD_CONTROL_PORT, RW_PIN, DIO_u8PIN_LOW);
    1ad8:	82 e0       	ldi	r24, 0x02	; 2
    1ada:	66 e0       	ldi	r22, 0x06	; 6
    1adc:	40 e0       	ldi	r20, 0x00	; 0
    1ade:	0e 94 26 12 	call	0x244c	; 0x244c <DIO_u8SetPinValue>

#if(LCD_MODE == _8_BIT)
	{

		DIO_u8SetPortValue(LCD_DATA_PORT, Character);
    1ae2:	81 e0       	ldi	r24, 0x01	; 1
    1ae4:	69 8d       	ldd	r22, Y+25	; 0x19
    1ae6:	0e 94 63 13 	call	0x26c6	; 0x26c6 <DIO_u8SetPortValue>

		DIO_u8SetPinValue(LCD_CONTROL_PORT, EN_PIN, DIO_u8PIN_HIGH);
    1aea:	82 e0       	ldi	r24, 0x02	; 2
    1aec:	65 e0       	ldi	r22, 0x05	; 5
    1aee:	41 e0       	ldi	r20, 0x01	; 1
    1af0:	0e 94 26 12 	call	0x244c	; 0x244c <DIO_u8SetPinValue>
    1af4:	80 e0       	ldi	r24, 0x00	; 0
    1af6:	90 e0       	ldi	r25, 0x00	; 0
    1af8:	a8 ec       	ldi	r26, 0xC8	; 200
    1afa:	b2 e4       	ldi	r27, 0x42	; 66
    1afc:	8d 8b       	std	Y+21, r24	; 0x15
    1afe:	9e 8b       	std	Y+22, r25	; 0x16
    1b00:	af 8b       	std	Y+23, r26	; 0x17
    1b02:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1b04:	6d 89       	ldd	r22, Y+21	; 0x15
    1b06:	7e 89       	ldd	r23, Y+22	; 0x16
    1b08:	8f 89       	ldd	r24, Y+23	; 0x17
    1b0a:	98 8d       	ldd	r25, Y+24	; 0x18
    1b0c:	2b ea       	ldi	r18, 0xAB	; 171
    1b0e:	3a ea       	ldi	r19, 0xAA	; 170
    1b10:	4a e2       	ldi	r20, 0x2A	; 42
    1b12:	50 e4       	ldi	r21, 0x40	; 64
    1b14:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b18:	dc 01       	movw	r26, r24
    1b1a:	cb 01       	movw	r24, r22
    1b1c:	89 8b       	std	Y+17, r24	; 0x11
    1b1e:	9a 8b       	std	Y+18, r25	; 0x12
    1b20:	ab 8b       	std	Y+19, r26	; 0x13
    1b22:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    1b24:	69 89       	ldd	r22, Y+17	; 0x11
    1b26:	7a 89       	ldd	r23, Y+18	; 0x12
    1b28:	8b 89       	ldd	r24, Y+19	; 0x13
    1b2a:	9c 89       	ldd	r25, Y+20	; 0x14
    1b2c:	20 e0       	ldi	r18, 0x00	; 0
    1b2e:	30 e0       	ldi	r19, 0x00	; 0
    1b30:	40 e8       	ldi	r20, 0x80	; 128
    1b32:	5f e3       	ldi	r21, 0x3F	; 63
    1b34:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1b38:	88 23       	and	r24, r24
    1b3a:	1c f4       	brge	.+6      	; 0x1b42 <LCD_voidSendCharacter+0x8a>
		__ticks = 1;
    1b3c:	81 e0       	ldi	r24, 0x01	; 1
    1b3e:	88 8b       	std	Y+16, r24	; 0x10
    1b40:	91 c0       	rjmp	.+290    	; 0x1c64 <LCD_voidSendCharacter+0x1ac>
	else if (__tmp > 255)
    1b42:	69 89       	ldd	r22, Y+17	; 0x11
    1b44:	7a 89       	ldd	r23, Y+18	; 0x12
    1b46:	8b 89       	ldd	r24, Y+19	; 0x13
    1b48:	9c 89       	ldd	r25, Y+20	; 0x14
    1b4a:	20 e0       	ldi	r18, 0x00	; 0
    1b4c:	30 e0       	ldi	r19, 0x00	; 0
    1b4e:	4f e7       	ldi	r20, 0x7F	; 127
    1b50:	53 e4       	ldi	r21, 0x43	; 67
    1b52:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1b56:	18 16       	cp	r1, r24
    1b58:	0c f0       	brlt	.+2      	; 0x1b5c <LCD_voidSendCharacter+0xa4>
    1b5a:	7b c0       	rjmp	.+246    	; 0x1c52 <LCD_voidSendCharacter+0x19a>
	{
		_delay_ms(__us / 1000.0);
    1b5c:	6d 89       	ldd	r22, Y+21	; 0x15
    1b5e:	7e 89       	ldd	r23, Y+22	; 0x16
    1b60:	8f 89       	ldd	r24, Y+23	; 0x17
    1b62:	98 8d       	ldd	r25, Y+24	; 0x18
    1b64:	20 e0       	ldi	r18, 0x00	; 0
    1b66:	30 e0       	ldi	r19, 0x00	; 0
    1b68:	4a e7       	ldi	r20, 0x7A	; 122
    1b6a:	54 e4       	ldi	r21, 0x44	; 68
    1b6c:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1b70:	dc 01       	movw	r26, r24
    1b72:	cb 01       	movw	r24, r22
    1b74:	8c 87       	std	Y+12, r24	; 0x0c
    1b76:	9d 87       	std	Y+13, r25	; 0x0d
    1b78:	ae 87       	std	Y+14, r26	; 0x0e
    1b7a:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b7c:	6c 85       	ldd	r22, Y+12	; 0x0c
    1b7e:	7d 85       	ldd	r23, Y+13	; 0x0d
    1b80:	8e 85       	ldd	r24, Y+14	; 0x0e
    1b82:	9f 85       	ldd	r25, Y+15	; 0x0f
    1b84:	20 e0       	ldi	r18, 0x00	; 0
    1b86:	30 e0       	ldi	r19, 0x00	; 0
    1b88:	4a ef       	ldi	r20, 0xFA	; 250
    1b8a:	54 e4       	ldi	r21, 0x44	; 68
    1b8c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b90:	dc 01       	movw	r26, r24
    1b92:	cb 01       	movw	r24, r22
    1b94:	88 87       	std	Y+8, r24	; 0x08
    1b96:	99 87       	std	Y+9, r25	; 0x09
    1b98:	aa 87       	std	Y+10, r26	; 0x0a
    1b9a:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    1b9c:	68 85       	ldd	r22, Y+8	; 0x08
    1b9e:	79 85       	ldd	r23, Y+9	; 0x09
    1ba0:	8a 85       	ldd	r24, Y+10	; 0x0a
    1ba2:	9b 85       	ldd	r25, Y+11	; 0x0b
    1ba4:	20 e0       	ldi	r18, 0x00	; 0
    1ba6:	30 e0       	ldi	r19, 0x00	; 0
    1ba8:	40 e8       	ldi	r20, 0x80	; 128
    1baa:	5f e3       	ldi	r21, 0x3F	; 63
    1bac:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1bb0:	88 23       	and	r24, r24
    1bb2:	2c f4       	brge	.+10     	; 0x1bbe <LCD_voidSendCharacter+0x106>
		__ticks = 1;
    1bb4:	81 e0       	ldi	r24, 0x01	; 1
    1bb6:	90 e0       	ldi	r25, 0x00	; 0
    1bb8:	9f 83       	std	Y+7, r25	; 0x07
    1bba:	8e 83       	std	Y+6, r24	; 0x06
    1bbc:	3f c0       	rjmp	.+126    	; 0x1c3c <LCD_voidSendCharacter+0x184>
	else if (__tmp > 65535)
    1bbe:	68 85       	ldd	r22, Y+8	; 0x08
    1bc0:	79 85       	ldd	r23, Y+9	; 0x09
    1bc2:	8a 85       	ldd	r24, Y+10	; 0x0a
    1bc4:	9b 85       	ldd	r25, Y+11	; 0x0b
    1bc6:	20 e0       	ldi	r18, 0x00	; 0
    1bc8:	3f ef       	ldi	r19, 0xFF	; 255
    1bca:	4f e7       	ldi	r20, 0x7F	; 127
    1bcc:	57 e4       	ldi	r21, 0x47	; 71
    1bce:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1bd2:	18 16       	cp	r1, r24
    1bd4:	4c f5       	brge	.+82     	; 0x1c28 <LCD_voidSendCharacter+0x170>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1bd6:	6c 85       	ldd	r22, Y+12	; 0x0c
    1bd8:	7d 85       	ldd	r23, Y+13	; 0x0d
    1bda:	8e 85       	ldd	r24, Y+14	; 0x0e
    1bdc:	9f 85       	ldd	r25, Y+15	; 0x0f
    1bde:	20 e0       	ldi	r18, 0x00	; 0
    1be0:	30 e0       	ldi	r19, 0x00	; 0
    1be2:	40 e2       	ldi	r20, 0x20	; 32
    1be4:	51 e4       	ldi	r21, 0x41	; 65
    1be6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bea:	dc 01       	movw	r26, r24
    1bec:	cb 01       	movw	r24, r22
    1bee:	bc 01       	movw	r22, r24
    1bf0:	cd 01       	movw	r24, r26
    1bf2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bf6:	dc 01       	movw	r26, r24
    1bf8:	cb 01       	movw	r24, r22
    1bfa:	9f 83       	std	Y+7, r25	; 0x07
    1bfc:	8e 83       	std	Y+6, r24	; 0x06
    1bfe:	0f c0       	rjmp	.+30     	; 0x1c1e <LCD_voidSendCharacter+0x166>
    1c00:	88 ec       	ldi	r24, 0xC8	; 200
    1c02:	90 e0       	ldi	r25, 0x00	; 0
    1c04:	9d 83       	std	Y+5, r25	; 0x05
    1c06:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1c08:	8c 81       	ldd	r24, Y+4	; 0x04
    1c0a:	9d 81       	ldd	r25, Y+5	; 0x05
    1c0c:	01 97       	sbiw	r24, 0x01	; 1
    1c0e:	f1 f7       	brne	.-4      	; 0x1c0c <LCD_voidSendCharacter+0x154>
    1c10:	9d 83       	std	Y+5, r25	; 0x05
    1c12:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c14:	8e 81       	ldd	r24, Y+6	; 0x06
    1c16:	9f 81       	ldd	r25, Y+7	; 0x07
    1c18:	01 97       	sbiw	r24, 0x01	; 1
    1c1a:	9f 83       	std	Y+7, r25	; 0x07
    1c1c:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c1e:	8e 81       	ldd	r24, Y+6	; 0x06
    1c20:	9f 81       	ldd	r25, Y+7	; 0x07
    1c22:	00 97       	sbiw	r24, 0x00	; 0
    1c24:	69 f7       	brne	.-38     	; 0x1c00 <LCD_voidSendCharacter+0x148>
    1c26:	24 c0       	rjmp	.+72     	; 0x1c70 <LCD_voidSendCharacter+0x1b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c28:	68 85       	ldd	r22, Y+8	; 0x08
    1c2a:	79 85       	ldd	r23, Y+9	; 0x09
    1c2c:	8a 85       	ldd	r24, Y+10	; 0x0a
    1c2e:	9b 85       	ldd	r25, Y+11	; 0x0b
    1c30:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c34:	dc 01       	movw	r26, r24
    1c36:	cb 01       	movw	r24, r22
    1c38:	9f 83       	std	Y+7, r25	; 0x07
    1c3a:	8e 83       	std	Y+6, r24	; 0x06
    1c3c:	8e 81       	ldd	r24, Y+6	; 0x06
    1c3e:	9f 81       	ldd	r25, Y+7	; 0x07
    1c40:	9b 83       	std	Y+3, r25	; 0x03
    1c42:	8a 83       	std	Y+2, r24	; 0x02
    1c44:	8a 81       	ldd	r24, Y+2	; 0x02
    1c46:	9b 81       	ldd	r25, Y+3	; 0x03
    1c48:	01 97       	sbiw	r24, 0x01	; 1
    1c4a:	f1 f7       	brne	.-4      	; 0x1c48 <LCD_voidSendCharacter+0x190>
    1c4c:	9b 83       	std	Y+3, r25	; 0x03
    1c4e:	8a 83       	std	Y+2, r24	; 0x02
    1c50:	0f c0       	rjmp	.+30     	; 0x1c70 <LCD_voidSendCharacter+0x1b8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1c52:	69 89       	ldd	r22, Y+17	; 0x11
    1c54:	7a 89       	ldd	r23, Y+18	; 0x12
    1c56:	8b 89       	ldd	r24, Y+19	; 0x13
    1c58:	9c 89       	ldd	r25, Y+20	; 0x14
    1c5a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c5e:	dc 01       	movw	r26, r24
    1c60:	cb 01       	movw	r24, r22
    1c62:	88 8b       	std	Y+16, r24	; 0x10
    1c64:	88 89       	ldd	r24, Y+16	; 0x10
    1c66:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1c68:	89 81       	ldd	r24, Y+1	; 0x01
    1c6a:	8a 95       	dec	r24
    1c6c:	f1 f7       	brne	.-4      	; 0x1c6a <LCD_voidSendCharacter+0x1b2>
    1c6e:	89 83       	std	Y+1, r24	; 0x01
		_delay_us(100);
		DIO_u8SetPinValue(LCD_CONTROL_PORT, EN_PIN, DIO_u8PIN_LOW);
    1c70:	82 e0       	ldi	r24, 0x02	; 2
    1c72:	65 e0       	ldi	r22, 0x05	; 5
    1c74:	40 e0       	ldi	r20, 0x00	; 0
    1c76:	0e 94 26 12 	call	0x244c	; 0x244c <DIO_u8SetPinValue>
		DIO_u8SetPinValue(LCD_CONTROL_PORT, EN_PIN, DIO_u8PIN_LOW);

		_delay_ms(2);
	}
#endif
}
    1c7a:	69 96       	adiw	r28, 0x19	; 25
    1c7c:	0f b6       	in	r0, 0x3f	; 63
    1c7e:	f8 94       	cli
    1c80:	de bf       	out	0x3e, r29	; 62
    1c82:	0f be       	out	0x3f, r0	; 63
    1c84:	cd bf       	out	0x3d, r28	; 61
    1c86:	cf 91       	pop	r28
    1c88:	df 91       	pop	r29
    1c8a:	08 95       	ret

00001c8c <LCD_voidSendString>:

void LCD_voidSendString(u8 Arr[])
{
    1c8c:	df 93       	push	r29
    1c8e:	cf 93       	push	r28
    1c90:	00 d0       	rcall	.+0      	; 0x1c92 <LCD_voidSendString+0x6>
    1c92:	0f 92       	push	r0
    1c94:	cd b7       	in	r28, 0x3d	; 61
    1c96:	de b7       	in	r29, 0x3e	; 62
    1c98:	9b 83       	std	Y+3, r25	; 0x03
    1c9a:	8a 83       	std	Y+2, r24	; 0x02
	u8 i = 0;
    1c9c:	19 82       	std	Y+1, r1	; 0x01
    1c9e:	0e c0       	rjmp	.+28     	; 0x1cbc <LCD_voidSendString+0x30>
	while(Arr[i] != '\0')
	{
		LCD_voidSendCharacter(Arr[i]);
    1ca0:	89 81       	ldd	r24, Y+1	; 0x01
    1ca2:	28 2f       	mov	r18, r24
    1ca4:	30 e0       	ldi	r19, 0x00	; 0
    1ca6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ca8:	9b 81       	ldd	r25, Y+3	; 0x03
    1caa:	fc 01       	movw	r30, r24
    1cac:	e2 0f       	add	r30, r18
    1cae:	f3 1f       	adc	r31, r19
    1cb0:	80 81       	ld	r24, Z
    1cb2:	0e 94 5c 0d 	call	0x1ab8	; 0x1ab8 <LCD_voidSendCharacter>
		i++;
    1cb6:	89 81       	ldd	r24, Y+1	; 0x01
    1cb8:	8f 5f       	subi	r24, 0xFF	; 255
    1cba:	89 83       	std	Y+1, r24	; 0x01
}

void LCD_voidSendString(u8 Arr[])
{
	u8 i = 0;
	while(Arr[i] != '\0')
    1cbc:	89 81       	ldd	r24, Y+1	; 0x01
    1cbe:	28 2f       	mov	r18, r24
    1cc0:	30 e0       	ldi	r19, 0x00	; 0
    1cc2:	8a 81       	ldd	r24, Y+2	; 0x02
    1cc4:	9b 81       	ldd	r25, Y+3	; 0x03
    1cc6:	fc 01       	movw	r30, r24
    1cc8:	e2 0f       	add	r30, r18
    1cca:	f3 1f       	adc	r31, r19
    1ccc:	80 81       	ld	r24, Z
    1cce:	88 23       	and	r24, r24
    1cd0:	39 f7       	brne	.-50     	; 0x1ca0 <LCD_voidSendString+0x14>
	{
		LCD_voidSendCharacter(Arr[i]);
		i++;
	}
}
    1cd2:	0f 90       	pop	r0
    1cd4:	0f 90       	pop	r0
    1cd6:	0f 90       	pop	r0
    1cd8:	cf 91       	pop	r28
    1cda:	df 91       	pop	r29
    1cdc:	08 95       	ret

00001cde <LCD_voidGoTORowCol>:

/*Row (0->1) , Col (0->15)*/
u8 LCD_voidGoTORowCol(u8 Copy_u8Row, u8 Copy_u8Col)
{
    1cde:	df 93       	push	r29
    1ce0:	cf 93       	push	r28
    1ce2:	00 d0       	rcall	.+0      	; 0x1ce4 <LCD_voidGoTORowCol+0x6>
    1ce4:	00 d0       	rcall	.+0      	; 0x1ce6 <LCD_voidGoTORowCol+0x8>
    1ce6:	cd b7       	in	r28, 0x3d	; 61
    1ce8:	de b7       	in	r29, 0x3e	; 62
    1cea:	8b 83       	std	Y+3, r24	; 0x03
    1cec:	6c 83       	std	Y+4, r22	; 0x04
	u8 Local_u8ErrorState = 0;
    1cee:	1a 82       	std	Y+2, r1	; 0x02

	u8 Local_u8DDRAMAddress;

	if(((Copy_u8Row == 0) || (Copy_u8Row == 1)) && ((Copy_u8Col >= 0) && (Copy_u8Col < 16)))
    1cf0:	8b 81       	ldd	r24, Y+3	; 0x03
    1cf2:	88 23       	and	r24, r24
    1cf4:	19 f0       	breq	.+6      	; 0x1cfc <LCD_voidGoTORowCol+0x1e>
    1cf6:	8b 81       	ldd	r24, Y+3	; 0x03
    1cf8:	81 30       	cpi	r24, 0x01	; 1
    1cfa:	81 f4       	brne	.+32     	; 0x1d1c <LCD_voidGoTORowCol+0x3e>
    1cfc:	8c 81       	ldd	r24, Y+4	; 0x04
    1cfe:	80 31       	cpi	r24, 0x10	; 16
    1d00:	68 f4       	brcc	.+26     	; 0x1d1c <LCD_voidGoTORowCol+0x3e>
	{
		if(Copy_u8Row == 0)
    1d02:	8b 81       	ldd	r24, Y+3	; 0x03
    1d04:	88 23       	and	r24, r24
    1d06:	19 f4       	brne	.+6      	; 0x1d0e <LCD_voidGoTORowCol+0x30>
		{
			Local_u8DDRAMAddress = Copy_u8Col;
    1d08:	8c 81       	ldd	r24, Y+4	; 0x04
    1d0a:	89 83       	std	Y+1, r24	; 0x01
    1d0c:	09 c0       	rjmp	.+18     	; 0x1d20 <LCD_voidGoTORowCol+0x42>
		}
		else if(Copy_u8Row == 1)
    1d0e:	8b 81       	ldd	r24, Y+3	; 0x03
    1d10:	81 30       	cpi	r24, 0x01	; 1
    1d12:	31 f4       	brne	.+12     	; 0x1d20 <LCD_voidGoTORowCol+0x42>
		{
			Local_u8DDRAMAddress = Copy_u8Col + 0x40;
    1d14:	8c 81       	ldd	r24, Y+4	; 0x04
    1d16:	80 5c       	subi	r24, 0xC0	; 192
    1d18:	89 83       	std	Y+1, r24	; 0x01
    1d1a:	02 c0       	rjmp	.+4      	; 0x1d20 <LCD_voidGoTORowCol+0x42>
		}
	}
	else
	{
		Local_u8ErrorState = 1;
    1d1c:	81 e0       	ldi	r24, 0x01	; 1
    1d1e:	8a 83       	std	Y+2, r24	; 0x02
	}

	/*modify the command to make bit 7 = 1*/
	Local_u8DDRAMAddress += 128;
    1d20:	89 81       	ldd	r24, Y+1	; 0x01
    1d22:	80 58       	subi	r24, 0x80	; 128
    1d24:	89 83       	std	Y+1, r24	; 0x01

	/*send command : Set DDRAM address*/
	LCD_voidSendCommand(Local_u8DDRAMAddress);
    1d26:	89 81       	ldd	r24, Y+1	; 0x01
    1d28:	0e 94 7f 0b 	call	0x16fe	; 0x16fe <LCD_voidSendCommand>

	return Local_u8ErrorState;
    1d2c:	8a 81       	ldd	r24, Y+2	; 0x02
}
    1d2e:	0f 90       	pop	r0
    1d30:	0f 90       	pop	r0
    1d32:	0f 90       	pop	r0
    1d34:	0f 90       	pop	r0
    1d36:	cf 91       	pop	r28
    1d38:	df 91       	pop	r29
    1d3a:	08 95       	ret

00001d3c <LCD_voidSendSpecialCharacter>:

void LCD_voidSendSpecialCharacter(u8 * Copy_pu8Pattern, u8 Copy_u8Location,u8 Copy_u8Row, u8 Copy_u8Col)
{
    1d3c:	df 93       	push	r29
    1d3e:	cf 93       	push	r28
    1d40:	cd b7       	in	r28, 0x3d	; 61
    1d42:	de b7       	in	r29, 0x3e	; 62
    1d44:	27 97       	sbiw	r28, 0x07	; 7
    1d46:	0f b6       	in	r0, 0x3f	; 63
    1d48:	f8 94       	cli
    1d4a:	de bf       	out	0x3e, r29	; 62
    1d4c:	0f be       	out	0x3f, r0	; 63
    1d4e:	cd bf       	out	0x3d, r28	; 61
    1d50:	9c 83       	std	Y+4, r25	; 0x04
    1d52:	8b 83       	std	Y+3, r24	; 0x03
    1d54:	6d 83       	std	Y+5, r22	; 0x05
    1d56:	4e 83       	std	Y+6, r20	; 0x06
    1d58:	2f 83       	std	Y+7, r18	; 0x07
	/*to calculate CGRAM location*/
	u8 Local_u8CGRAMAddress;
	u8 Local_u8PatternIterator;

	Local_u8CGRAMAddress = Copy_u8Location * 8;
    1d5a:	8d 81       	ldd	r24, Y+5	; 0x05
    1d5c:	88 2f       	mov	r24, r24
    1d5e:	90 e0       	ldi	r25, 0x00	; 0
    1d60:	88 0f       	add	r24, r24
    1d62:	99 1f       	adc	r25, r25
    1d64:	88 0f       	add	r24, r24
    1d66:	99 1f       	adc	r25, r25
    1d68:	88 0f       	add	r24, r24
    1d6a:	99 1f       	adc	r25, r25
    1d6c:	8a 83       	std	Y+2, r24	; 0x02

	SET_BIT(Local_u8CGRAMAddress, 6);
    1d6e:	8a 81       	ldd	r24, Y+2	; 0x02
    1d70:	80 64       	ori	r24, 0x40	; 64
    1d72:	8a 83       	std	Y+2, r24	; 0x02

	LCD_voidSendCommand(Local_u8CGRAMAddress);
    1d74:	8a 81       	ldd	r24, Y+2	; 0x02
    1d76:	0e 94 7f 0b 	call	0x16fe	; 0x16fe <LCD_voidSendCommand>

	for(Local_u8PatternIterator = 0;Local_u8PatternIterator<=7;Local_u8PatternIterator++)
    1d7a:	19 82       	std	Y+1, r1	; 0x01
    1d7c:	0e c0       	rjmp	.+28     	; 0x1d9a <LCD_voidSendSpecialCharacter+0x5e>
	{
		LCD_voidSendCharacter(Copy_pu8Pattern[Local_u8PatternIterator]);
    1d7e:	89 81       	ldd	r24, Y+1	; 0x01
    1d80:	28 2f       	mov	r18, r24
    1d82:	30 e0       	ldi	r19, 0x00	; 0
    1d84:	8b 81       	ldd	r24, Y+3	; 0x03
    1d86:	9c 81       	ldd	r25, Y+4	; 0x04
    1d88:	fc 01       	movw	r30, r24
    1d8a:	e2 0f       	add	r30, r18
    1d8c:	f3 1f       	adc	r31, r19
    1d8e:	80 81       	ld	r24, Z
    1d90:	0e 94 5c 0d 	call	0x1ab8	; 0x1ab8 <LCD_voidSendCharacter>

	SET_BIT(Local_u8CGRAMAddress, 6);

	LCD_voidSendCommand(Local_u8CGRAMAddress);

	for(Local_u8PatternIterator = 0;Local_u8PatternIterator<=7;Local_u8PatternIterator++)
    1d94:	89 81       	ldd	r24, Y+1	; 0x01
    1d96:	8f 5f       	subi	r24, 0xFF	; 255
    1d98:	89 83       	std	Y+1, r24	; 0x01
    1d9a:	89 81       	ldd	r24, Y+1	; 0x01
    1d9c:	88 30       	cpi	r24, 0x08	; 8
    1d9e:	78 f3       	brcs	.-34     	; 0x1d7e <LCD_voidSendSpecialCharacter+0x42>
	{
		LCD_voidSendCharacter(Copy_pu8Pattern[Local_u8PatternIterator]);
	}

	LCD_voidGoTORowCol(Copy_u8Row, Copy_u8Col);
    1da0:	8e 81       	ldd	r24, Y+6	; 0x06
    1da2:	6f 81       	ldd	r22, Y+7	; 0x07
    1da4:	0e 94 6f 0e 	call	0x1cde	; 0x1cde <LCD_voidGoTORowCol>

	LCD_voidSendCharacter(Copy_u8Location);
    1da8:	8d 81       	ldd	r24, Y+5	; 0x05
    1daa:	0e 94 5c 0d 	call	0x1ab8	; 0x1ab8 <LCD_voidSendCharacter>
}
    1dae:	27 96       	adiw	r28, 0x07	; 7
    1db0:	0f b6       	in	r0, 0x3f	; 63
    1db2:	f8 94       	cli
    1db4:	de bf       	out	0x3e, r29	; 62
    1db6:	0f be       	out	0x3f, r0	; 63
    1db8:	cd bf       	out	0x3d, r28	; 61
    1dba:	cf 91       	pop	r28
    1dbc:	df 91       	pop	r29
    1dbe:	08 95       	ret

00001dc0 <LCD_voidSendVariable>:

void LCD_voidSendVariable(u8 Copy_u8Variable)
{
    1dc0:	df 93       	push	r29
    1dc2:	cf 93       	push	r28
    1dc4:	cd b7       	in	r28, 0x3d	; 61
    1dc6:	de b7       	in	r29, 0x3e	; 62
    1dc8:	64 97       	sbiw	r28, 0x14	; 20
    1dca:	0f b6       	in	r0, 0x3f	; 63
    1dcc:	f8 94       	cli
    1dce:	de bf       	out	0x3e, r29	; 62
    1dd0:	0f be       	out	0x3f, r0	; 63
    1dd2:	cd bf       	out	0x3d, r28	; 61
    1dd4:	8c 8b       	std	Y+20, r24	; 0x14
	u8 Local_u8Remainder = 0;
    1dd6:	1b 82       	std	Y+3, r1	; 0x03
	u8 Local_u8Arr[16];
	u8 Local_u8Iterator = 0, Local_u8Counter = 0;
    1dd8:	1a 82       	std	Y+2, r1	; 0x02
    1dda:	19 82       	std	Y+1, r1	; 0x01
    1ddc:	1d c0       	rjmp	.+58     	; 0x1e18 <LCD_voidSendVariable+0x58>

	while(Copy_u8Variable > 0)
	{
		Local_u8Remainder = Copy_u8Variable % 10;
    1dde:	8c 89       	ldd	r24, Y+20	; 0x14
    1de0:	9a e0       	ldi	r25, 0x0A	; 10
    1de2:	69 2f       	mov	r22, r25
    1de4:	0e 94 ab 27 	call	0x4f56	; 0x4f56 <__udivmodqi4>
    1de8:	89 2f       	mov	r24, r25
    1dea:	8b 83       	std	Y+3, r24	; 0x03
		Local_u8Arr[Local_u8Iterator] = Local_u8Remainder;
    1dec:	8a 81       	ldd	r24, Y+2	; 0x02
    1dee:	28 2f       	mov	r18, r24
    1df0:	30 e0       	ldi	r19, 0x00	; 0
    1df2:	ce 01       	movw	r24, r28
    1df4:	04 96       	adiw	r24, 0x04	; 4
    1df6:	fc 01       	movw	r30, r24
    1df8:	e2 0f       	add	r30, r18
    1dfa:	f3 1f       	adc	r31, r19
    1dfc:	8b 81       	ldd	r24, Y+3	; 0x03
    1dfe:	80 83       	st	Z, r24
		Copy_u8Variable = Copy_u8Variable /10;
    1e00:	8c 89       	ldd	r24, Y+20	; 0x14
    1e02:	9a e0       	ldi	r25, 0x0A	; 10
    1e04:	69 2f       	mov	r22, r25
    1e06:	0e 94 ab 27 	call	0x4f56	; 0x4f56 <__udivmodqi4>
    1e0a:	8c 8b       	std	Y+20, r24	; 0x14
		Local_u8Counter ++ ;
    1e0c:	89 81       	ldd	r24, Y+1	; 0x01
    1e0e:	8f 5f       	subi	r24, 0xFF	; 255
    1e10:	89 83       	std	Y+1, r24	; 0x01
		Local_u8Iterator++;
    1e12:	8a 81       	ldd	r24, Y+2	; 0x02
    1e14:	8f 5f       	subi	r24, 0xFF	; 255
    1e16:	8a 83       	std	Y+2, r24	; 0x02
{
	u8 Local_u8Remainder = 0;
	u8 Local_u8Arr[16];
	u8 Local_u8Iterator = 0, Local_u8Counter = 0;

	while(Copy_u8Variable > 0)
    1e18:	8c 89       	ldd	r24, Y+20	; 0x14
    1e1a:	88 23       	and	r24, r24
    1e1c:	01 f7       	brne	.-64     	; 0x1dde <LCD_voidSendVariable+0x1e>
		Copy_u8Variable = Copy_u8Variable /10;
		Local_u8Counter ++ ;
		Local_u8Iterator++;
	}

	for(Local_u8Iterator = Local_u8Counter; Local_u8Iterator > 0; Local_u8Iterator--)
    1e1e:	89 81       	ldd	r24, Y+1	; 0x01
    1e20:	8a 83       	std	Y+2, r24	; 0x02
    1e22:	b6 c0       	rjmp	.+364    	; 0x1f90 <LCD_voidSendVariable+0x1d0>
	{
		if(Local_u8Arr[Local_u8Iterator-1] == 0)
    1e24:	8a 81       	ldd	r24, Y+2	; 0x02
    1e26:	88 2f       	mov	r24, r24
    1e28:	90 e0       	ldi	r25, 0x00	; 0
    1e2a:	9c 01       	movw	r18, r24
    1e2c:	21 50       	subi	r18, 0x01	; 1
    1e2e:	30 40       	sbci	r19, 0x00	; 0
    1e30:	ce 01       	movw	r24, r28
    1e32:	04 96       	adiw	r24, 0x04	; 4
    1e34:	fc 01       	movw	r30, r24
    1e36:	e2 0f       	add	r30, r18
    1e38:	f3 1f       	adc	r31, r19
    1e3a:	80 81       	ld	r24, Z
    1e3c:	88 23       	and	r24, r24
    1e3e:	21 f4       	brne	.+8      	; 0x1e48 <LCD_voidSendVariable+0x88>
		{
			LCD_voidSendCharacter('0');
    1e40:	80 e3       	ldi	r24, 0x30	; 48
    1e42:	0e 94 5c 0d 	call	0x1ab8	; 0x1ab8 <LCD_voidSendCharacter>
    1e46:	a1 c0       	rjmp	.+322    	; 0x1f8a <LCD_voidSendVariable+0x1ca>
		}
		else if(Local_u8Arr[Local_u8Iterator-1] == 1)
    1e48:	8a 81       	ldd	r24, Y+2	; 0x02
    1e4a:	88 2f       	mov	r24, r24
    1e4c:	90 e0       	ldi	r25, 0x00	; 0
    1e4e:	9c 01       	movw	r18, r24
    1e50:	21 50       	subi	r18, 0x01	; 1
    1e52:	30 40       	sbci	r19, 0x00	; 0
    1e54:	ce 01       	movw	r24, r28
    1e56:	04 96       	adiw	r24, 0x04	; 4
    1e58:	fc 01       	movw	r30, r24
    1e5a:	e2 0f       	add	r30, r18
    1e5c:	f3 1f       	adc	r31, r19
    1e5e:	80 81       	ld	r24, Z
    1e60:	81 30       	cpi	r24, 0x01	; 1
    1e62:	21 f4       	brne	.+8      	; 0x1e6c <LCD_voidSendVariable+0xac>
		{
			LCD_voidSendCharacter('1');
    1e64:	81 e3       	ldi	r24, 0x31	; 49
    1e66:	0e 94 5c 0d 	call	0x1ab8	; 0x1ab8 <LCD_voidSendCharacter>
    1e6a:	8f c0       	rjmp	.+286    	; 0x1f8a <LCD_voidSendVariable+0x1ca>
		}
		else if(Local_u8Arr[Local_u8Iterator-1] == 2)
    1e6c:	8a 81       	ldd	r24, Y+2	; 0x02
    1e6e:	88 2f       	mov	r24, r24
    1e70:	90 e0       	ldi	r25, 0x00	; 0
    1e72:	9c 01       	movw	r18, r24
    1e74:	21 50       	subi	r18, 0x01	; 1
    1e76:	30 40       	sbci	r19, 0x00	; 0
    1e78:	ce 01       	movw	r24, r28
    1e7a:	04 96       	adiw	r24, 0x04	; 4
    1e7c:	fc 01       	movw	r30, r24
    1e7e:	e2 0f       	add	r30, r18
    1e80:	f3 1f       	adc	r31, r19
    1e82:	80 81       	ld	r24, Z
    1e84:	82 30       	cpi	r24, 0x02	; 2
    1e86:	21 f4       	brne	.+8      	; 0x1e90 <LCD_voidSendVariable+0xd0>
		{
			LCD_voidSendCharacter('2');
    1e88:	82 e3       	ldi	r24, 0x32	; 50
    1e8a:	0e 94 5c 0d 	call	0x1ab8	; 0x1ab8 <LCD_voidSendCharacter>
    1e8e:	7d c0       	rjmp	.+250    	; 0x1f8a <LCD_voidSendVariable+0x1ca>
		}
		else if(Local_u8Arr[Local_u8Iterator-1] == 3)
    1e90:	8a 81       	ldd	r24, Y+2	; 0x02
    1e92:	88 2f       	mov	r24, r24
    1e94:	90 e0       	ldi	r25, 0x00	; 0
    1e96:	9c 01       	movw	r18, r24
    1e98:	21 50       	subi	r18, 0x01	; 1
    1e9a:	30 40       	sbci	r19, 0x00	; 0
    1e9c:	ce 01       	movw	r24, r28
    1e9e:	04 96       	adiw	r24, 0x04	; 4
    1ea0:	fc 01       	movw	r30, r24
    1ea2:	e2 0f       	add	r30, r18
    1ea4:	f3 1f       	adc	r31, r19
    1ea6:	80 81       	ld	r24, Z
    1ea8:	83 30       	cpi	r24, 0x03	; 3
    1eaa:	21 f4       	brne	.+8      	; 0x1eb4 <LCD_voidSendVariable+0xf4>
		{
			LCD_voidSendCharacter('3');
    1eac:	83 e3       	ldi	r24, 0x33	; 51
    1eae:	0e 94 5c 0d 	call	0x1ab8	; 0x1ab8 <LCD_voidSendCharacter>
    1eb2:	6b c0       	rjmp	.+214    	; 0x1f8a <LCD_voidSendVariable+0x1ca>
		}
		else if(Local_u8Arr[Local_u8Iterator-1] == 4)
    1eb4:	8a 81       	ldd	r24, Y+2	; 0x02
    1eb6:	88 2f       	mov	r24, r24
    1eb8:	90 e0       	ldi	r25, 0x00	; 0
    1eba:	9c 01       	movw	r18, r24
    1ebc:	21 50       	subi	r18, 0x01	; 1
    1ebe:	30 40       	sbci	r19, 0x00	; 0
    1ec0:	ce 01       	movw	r24, r28
    1ec2:	04 96       	adiw	r24, 0x04	; 4
    1ec4:	fc 01       	movw	r30, r24
    1ec6:	e2 0f       	add	r30, r18
    1ec8:	f3 1f       	adc	r31, r19
    1eca:	80 81       	ld	r24, Z
    1ecc:	84 30       	cpi	r24, 0x04	; 4
    1ece:	21 f4       	brne	.+8      	; 0x1ed8 <LCD_voidSendVariable+0x118>
		{
			LCD_voidSendCharacter('4');
    1ed0:	84 e3       	ldi	r24, 0x34	; 52
    1ed2:	0e 94 5c 0d 	call	0x1ab8	; 0x1ab8 <LCD_voidSendCharacter>
    1ed6:	59 c0       	rjmp	.+178    	; 0x1f8a <LCD_voidSendVariable+0x1ca>
		}
		else if(Local_u8Arr[Local_u8Iterator-1] == 5)
    1ed8:	8a 81       	ldd	r24, Y+2	; 0x02
    1eda:	88 2f       	mov	r24, r24
    1edc:	90 e0       	ldi	r25, 0x00	; 0
    1ede:	9c 01       	movw	r18, r24
    1ee0:	21 50       	subi	r18, 0x01	; 1
    1ee2:	30 40       	sbci	r19, 0x00	; 0
    1ee4:	ce 01       	movw	r24, r28
    1ee6:	04 96       	adiw	r24, 0x04	; 4
    1ee8:	fc 01       	movw	r30, r24
    1eea:	e2 0f       	add	r30, r18
    1eec:	f3 1f       	adc	r31, r19
    1eee:	80 81       	ld	r24, Z
    1ef0:	85 30       	cpi	r24, 0x05	; 5
    1ef2:	21 f4       	brne	.+8      	; 0x1efc <LCD_voidSendVariable+0x13c>
		{
			LCD_voidSendCharacter('5');
    1ef4:	85 e3       	ldi	r24, 0x35	; 53
    1ef6:	0e 94 5c 0d 	call	0x1ab8	; 0x1ab8 <LCD_voidSendCharacter>
    1efa:	47 c0       	rjmp	.+142    	; 0x1f8a <LCD_voidSendVariable+0x1ca>
		}
		else if(Local_u8Arr[Local_u8Iterator-1] == 6)
    1efc:	8a 81       	ldd	r24, Y+2	; 0x02
    1efe:	88 2f       	mov	r24, r24
    1f00:	90 e0       	ldi	r25, 0x00	; 0
    1f02:	9c 01       	movw	r18, r24
    1f04:	21 50       	subi	r18, 0x01	; 1
    1f06:	30 40       	sbci	r19, 0x00	; 0
    1f08:	ce 01       	movw	r24, r28
    1f0a:	04 96       	adiw	r24, 0x04	; 4
    1f0c:	fc 01       	movw	r30, r24
    1f0e:	e2 0f       	add	r30, r18
    1f10:	f3 1f       	adc	r31, r19
    1f12:	80 81       	ld	r24, Z
    1f14:	86 30       	cpi	r24, 0x06	; 6
    1f16:	21 f4       	brne	.+8      	; 0x1f20 <LCD_voidSendVariable+0x160>
		{
			LCD_voidSendCharacter('6');
    1f18:	86 e3       	ldi	r24, 0x36	; 54
    1f1a:	0e 94 5c 0d 	call	0x1ab8	; 0x1ab8 <LCD_voidSendCharacter>
    1f1e:	35 c0       	rjmp	.+106    	; 0x1f8a <LCD_voidSendVariable+0x1ca>
		}
		else if(Local_u8Arr[Local_u8Iterator-1] == 7)
    1f20:	8a 81       	ldd	r24, Y+2	; 0x02
    1f22:	88 2f       	mov	r24, r24
    1f24:	90 e0       	ldi	r25, 0x00	; 0
    1f26:	9c 01       	movw	r18, r24
    1f28:	21 50       	subi	r18, 0x01	; 1
    1f2a:	30 40       	sbci	r19, 0x00	; 0
    1f2c:	ce 01       	movw	r24, r28
    1f2e:	04 96       	adiw	r24, 0x04	; 4
    1f30:	fc 01       	movw	r30, r24
    1f32:	e2 0f       	add	r30, r18
    1f34:	f3 1f       	adc	r31, r19
    1f36:	80 81       	ld	r24, Z
    1f38:	87 30       	cpi	r24, 0x07	; 7
    1f3a:	21 f4       	brne	.+8      	; 0x1f44 <LCD_voidSendVariable+0x184>
		{
			LCD_voidSendCharacter('7');
    1f3c:	87 e3       	ldi	r24, 0x37	; 55
    1f3e:	0e 94 5c 0d 	call	0x1ab8	; 0x1ab8 <LCD_voidSendCharacter>
    1f42:	23 c0       	rjmp	.+70     	; 0x1f8a <LCD_voidSendVariable+0x1ca>
		}
		else if(Local_u8Arr[Local_u8Iterator-1] == 8)
    1f44:	8a 81       	ldd	r24, Y+2	; 0x02
    1f46:	88 2f       	mov	r24, r24
    1f48:	90 e0       	ldi	r25, 0x00	; 0
    1f4a:	9c 01       	movw	r18, r24
    1f4c:	21 50       	subi	r18, 0x01	; 1
    1f4e:	30 40       	sbci	r19, 0x00	; 0
    1f50:	ce 01       	movw	r24, r28
    1f52:	04 96       	adiw	r24, 0x04	; 4
    1f54:	fc 01       	movw	r30, r24
    1f56:	e2 0f       	add	r30, r18
    1f58:	f3 1f       	adc	r31, r19
    1f5a:	80 81       	ld	r24, Z
    1f5c:	88 30       	cpi	r24, 0x08	; 8
    1f5e:	21 f4       	brne	.+8      	; 0x1f68 <LCD_voidSendVariable+0x1a8>
		{
			LCD_voidSendCharacter('8');
    1f60:	88 e3       	ldi	r24, 0x38	; 56
    1f62:	0e 94 5c 0d 	call	0x1ab8	; 0x1ab8 <LCD_voidSendCharacter>
    1f66:	11 c0       	rjmp	.+34     	; 0x1f8a <LCD_voidSendVariable+0x1ca>
		}
		else if(Local_u8Arr[Local_u8Iterator-1] == 9)
    1f68:	8a 81       	ldd	r24, Y+2	; 0x02
    1f6a:	88 2f       	mov	r24, r24
    1f6c:	90 e0       	ldi	r25, 0x00	; 0
    1f6e:	9c 01       	movw	r18, r24
    1f70:	21 50       	subi	r18, 0x01	; 1
    1f72:	30 40       	sbci	r19, 0x00	; 0
    1f74:	ce 01       	movw	r24, r28
    1f76:	04 96       	adiw	r24, 0x04	; 4
    1f78:	fc 01       	movw	r30, r24
    1f7a:	e2 0f       	add	r30, r18
    1f7c:	f3 1f       	adc	r31, r19
    1f7e:	80 81       	ld	r24, Z
    1f80:	89 30       	cpi	r24, 0x09	; 9
    1f82:	19 f4       	brne	.+6      	; 0x1f8a <LCD_voidSendVariable+0x1ca>
		{
			LCD_voidSendCharacter('9');
    1f84:	89 e3       	ldi	r24, 0x39	; 57
    1f86:	0e 94 5c 0d 	call	0x1ab8	; 0x1ab8 <LCD_voidSendCharacter>
		Copy_u8Variable = Copy_u8Variable /10;
		Local_u8Counter ++ ;
		Local_u8Iterator++;
	}

	for(Local_u8Iterator = Local_u8Counter; Local_u8Iterator > 0; Local_u8Iterator--)
    1f8a:	8a 81       	ldd	r24, Y+2	; 0x02
    1f8c:	81 50       	subi	r24, 0x01	; 1
    1f8e:	8a 83       	std	Y+2, r24	; 0x02
    1f90:	8a 81       	ldd	r24, Y+2	; 0x02
    1f92:	88 23       	and	r24, r24
    1f94:	09 f0       	breq	.+2      	; 0x1f98 <LCD_voidSendVariable+0x1d8>
    1f96:	46 cf       	rjmp	.-372    	; 0x1e24 <LCD_voidSendVariable+0x64>
		else if(Local_u8Arr[Local_u8Iterator-1] == 9)
		{
			LCD_voidSendCharacter('9');
		}
	}
}
    1f98:	64 96       	adiw	r28, 0x14	; 20
    1f9a:	0f b6       	in	r0, 0x3f	; 63
    1f9c:	f8 94       	cli
    1f9e:	de bf       	out	0x3e, r29	; 62
    1fa0:	0f be       	out	0x3f, r0	; 63
    1fa2:	cd bf       	out	0x3d, r28	; 61
    1fa4:	cf 91       	pop	r28
    1fa6:	df 91       	pop	r29
    1fa8:	08 95       	ret

00001faa <LCD_voidClearScreen>:

void LCD_voidClearScreen(void)
{
    1faa:	df 93       	push	r29
    1fac:	cf 93       	push	r28
    1fae:	cd b7       	in	r28, 0x3d	; 61
    1fb0:	de b7       	in	r29, 0x3e	; 62
    1fb2:	2e 97       	sbiw	r28, 0x0e	; 14
    1fb4:	0f b6       	in	r0, 0x3f	; 63
    1fb6:	f8 94       	cli
    1fb8:	de bf       	out	0x3e, r29	; 62
    1fba:	0f be       	out	0x3f, r0	; 63
    1fbc:	cd bf       	out	0x3d, r28	; 61
	LCD_voidSendCommand(0x01);   //clear screen
    1fbe:	81 e0       	ldi	r24, 0x01	; 1
    1fc0:	0e 94 7f 0b 	call	0x16fe	; 0x16fe <LCD_voidSendCommand>
    1fc4:	80 e0       	ldi	r24, 0x00	; 0
    1fc6:	90 e0       	ldi	r25, 0x00	; 0
    1fc8:	a0 e0       	ldi	r26, 0x00	; 0
    1fca:	b0 e4       	ldi	r27, 0x40	; 64
    1fcc:	8b 87       	std	Y+11, r24	; 0x0b
    1fce:	9c 87       	std	Y+12, r25	; 0x0c
    1fd0:	ad 87       	std	Y+13, r26	; 0x0d
    1fd2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fd4:	6b 85       	ldd	r22, Y+11	; 0x0b
    1fd6:	7c 85       	ldd	r23, Y+12	; 0x0c
    1fd8:	8d 85       	ldd	r24, Y+13	; 0x0d
    1fda:	9e 85       	ldd	r25, Y+14	; 0x0e
    1fdc:	20 e0       	ldi	r18, 0x00	; 0
    1fde:	30 e0       	ldi	r19, 0x00	; 0
    1fe0:	4a ef       	ldi	r20, 0xFA	; 250
    1fe2:	54 e4       	ldi	r21, 0x44	; 68
    1fe4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fe8:	dc 01       	movw	r26, r24
    1fea:	cb 01       	movw	r24, r22
    1fec:	8f 83       	std	Y+7, r24	; 0x07
    1fee:	98 87       	std	Y+8, r25	; 0x08
    1ff0:	a9 87       	std	Y+9, r26	; 0x09
    1ff2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1ff4:	6f 81       	ldd	r22, Y+7	; 0x07
    1ff6:	78 85       	ldd	r23, Y+8	; 0x08
    1ff8:	89 85       	ldd	r24, Y+9	; 0x09
    1ffa:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ffc:	20 e0       	ldi	r18, 0x00	; 0
    1ffe:	30 e0       	ldi	r19, 0x00	; 0
    2000:	40 e8       	ldi	r20, 0x80	; 128
    2002:	5f e3       	ldi	r21, 0x3F	; 63
    2004:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2008:	88 23       	and	r24, r24
    200a:	2c f4       	brge	.+10     	; 0x2016 <LCD_voidClearScreen+0x6c>
		__ticks = 1;
    200c:	81 e0       	ldi	r24, 0x01	; 1
    200e:	90 e0       	ldi	r25, 0x00	; 0
    2010:	9e 83       	std	Y+6, r25	; 0x06
    2012:	8d 83       	std	Y+5, r24	; 0x05
    2014:	3f c0       	rjmp	.+126    	; 0x2094 <LCD_voidClearScreen+0xea>
	else if (__tmp > 65535)
    2016:	6f 81       	ldd	r22, Y+7	; 0x07
    2018:	78 85       	ldd	r23, Y+8	; 0x08
    201a:	89 85       	ldd	r24, Y+9	; 0x09
    201c:	9a 85       	ldd	r25, Y+10	; 0x0a
    201e:	20 e0       	ldi	r18, 0x00	; 0
    2020:	3f ef       	ldi	r19, 0xFF	; 255
    2022:	4f e7       	ldi	r20, 0x7F	; 127
    2024:	57 e4       	ldi	r21, 0x47	; 71
    2026:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    202a:	18 16       	cp	r1, r24
    202c:	4c f5       	brge	.+82     	; 0x2080 <LCD_voidClearScreen+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    202e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2030:	7c 85       	ldd	r23, Y+12	; 0x0c
    2032:	8d 85       	ldd	r24, Y+13	; 0x0d
    2034:	9e 85       	ldd	r25, Y+14	; 0x0e
    2036:	20 e0       	ldi	r18, 0x00	; 0
    2038:	30 e0       	ldi	r19, 0x00	; 0
    203a:	40 e2       	ldi	r20, 0x20	; 32
    203c:	51 e4       	ldi	r21, 0x41	; 65
    203e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2042:	dc 01       	movw	r26, r24
    2044:	cb 01       	movw	r24, r22
    2046:	bc 01       	movw	r22, r24
    2048:	cd 01       	movw	r24, r26
    204a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    204e:	dc 01       	movw	r26, r24
    2050:	cb 01       	movw	r24, r22
    2052:	9e 83       	std	Y+6, r25	; 0x06
    2054:	8d 83       	std	Y+5, r24	; 0x05
    2056:	0f c0       	rjmp	.+30     	; 0x2076 <LCD_voidClearScreen+0xcc>
    2058:	88 ec       	ldi	r24, 0xC8	; 200
    205a:	90 e0       	ldi	r25, 0x00	; 0
    205c:	9c 83       	std	Y+4, r25	; 0x04
    205e:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2060:	8b 81       	ldd	r24, Y+3	; 0x03
    2062:	9c 81       	ldd	r25, Y+4	; 0x04
    2064:	01 97       	sbiw	r24, 0x01	; 1
    2066:	f1 f7       	brne	.-4      	; 0x2064 <LCD_voidClearScreen+0xba>
    2068:	9c 83       	std	Y+4, r25	; 0x04
    206a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    206c:	8d 81       	ldd	r24, Y+5	; 0x05
    206e:	9e 81       	ldd	r25, Y+6	; 0x06
    2070:	01 97       	sbiw	r24, 0x01	; 1
    2072:	9e 83       	std	Y+6, r25	; 0x06
    2074:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2076:	8d 81       	ldd	r24, Y+5	; 0x05
    2078:	9e 81       	ldd	r25, Y+6	; 0x06
    207a:	00 97       	sbiw	r24, 0x00	; 0
    207c:	69 f7       	brne	.-38     	; 0x2058 <LCD_voidClearScreen+0xae>
    207e:	14 c0       	rjmp	.+40     	; 0x20a8 <LCD_voidClearScreen+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2080:	6f 81       	ldd	r22, Y+7	; 0x07
    2082:	78 85       	ldd	r23, Y+8	; 0x08
    2084:	89 85       	ldd	r24, Y+9	; 0x09
    2086:	9a 85       	ldd	r25, Y+10	; 0x0a
    2088:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    208c:	dc 01       	movw	r26, r24
    208e:	cb 01       	movw	r24, r22
    2090:	9e 83       	std	Y+6, r25	; 0x06
    2092:	8d 83       	std	Y+5, r24	; 0x05
    2094:	8d 81       	ldd	r24, Y+5	; 0x05
    2096:	9e 81       	ldd	r25, Y+6	; 0x06
    2098:	9a 83       	std	Y+2, r25	; 0x02
    209a:	89 83       	std	Y+1, r24	; 0x01
    209c:	89 81       	ldd	r24, Y+1	; 0x01
    209e:	9a 81       	ldd	r25, Y+2	; 0x02
    20a0:	01 97       	sbiw	r24, 0x01	; 1
    20a2:	f1 f7       	brne	.-4      	; 0x20a0 <LCD_voidClearScreen+0xf6>
    20a4:	9a 83       	std	Y+2, r25	; 0x02
    20a6:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    20a8:	2e 96       	adiw	r28, 0x0e	; 14
    20aa:	0f b6       	in	r0, 0x3f	; 63
    20ac:	f8 94       	cli
    20ae:	de bf       	out	0x3e, r29	; 62
    20b0:	0f be       	out	0x3f, r0	; 63
    20b2:	cd bf       	out	0x3d, r28	; 61
    20b4:	cf 91       	pop	r28
    20b6:	df 91       	pop	r29
    20b8:	08 95       	ret

000020ba <DC_MotorInit>:
#include "DC_interface.h"
#include "DC_config.h"
#include "DC_private.h"

void DC_MotorInit(void)
{
    20ba:	df 93       	push	r29
    20bc:	cf 93       	push	r28
    20be:	cd b7       	in	r28, 0x3d	; 61
    20c0:	de b7       	in	r29, 0x3e	; 62
	DIO_u8SetPinDirection(PORT_1, PIN_1, DIO_u8PIN_OUTPUT);
    20c2:	80 e0       	ldi	r24, 0x00	; 0
    20c4:	60 e0       	ldi	r22, 0x00	; 0
    20c6:	41 e0       	ldi	r20, 0x01	; 1
    20c8:	0e 94 a1 10 	call	0x2142	; 0x2142 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(PORT_2, PIN_2, DIO_u8PIN_OUTPUT);
    20cc:	80 e0       	ldi	r24, 0x00	; 0
    20ce:	67 e0       	ldi	r22, 0x07	; 7
    20d0:	41 e0       	ldi	r20, 0x01	; 1
    20d2:	0e 94 a1 10 	call	0x2142	; 0x2142 <DIO_u8SetPinDirection>
}
    20d6:	cf 91       	pop	r28
    20d8:	df 91       	pop	r29
    20da:	08 95       	ret

000020dc <DC_MotorCWContinous>:

void DC_MotorCWContinous(void)
{
    20dc:	df 93       	push	r29
    20de:	cf 93       	push	r28
    20e0:	cd b7       	in	r28, 0x3d	; 61
    20e2:	de b7       	in	r29, 0x3e	; 62
	DIO_u8SetPinValue(PORT_1, PIN_1, DIO_u8PIN_HIGH);
    20e4:	80 e0       	ldi	r24, 0x00	; 0
    20e6:	60 e0       	ldi	r22, 0x00	; 0
    20e8:	41 e0       	ldi	r20, 0x01	; 1
    20ea:	0e 94 26 12 	call	0x244c	; 0x244c <DIO_u8SetPinValue>
	DIO_u8SetPinValue(PORT_2, PIN_2, DIO_u8PIN_LOW);
    20ee:	80 e0       	ldi	r24, 0x00	; 0
    20f0:	67 e0       	ldi	r22, 0x07	; 7
    20f2:	40 e0       	ldi	r20, 0x00	; 0
    20f4:	0e 94 26 12 	call	0x244c	; 0x244c <DIO_u8SetPinValue>
}
    20f8:	cf 91       	pop	r28
    20fa:	df 91       	pop	r29
    20fc:	08 95       	ret

000020fe <DC_MotorCCWContinous>:

void DC_MotorCCWContinous(void)
{
    20fe:	df 93       	push	r29
    2100:	cf 93       	push	r28
    2102:	cd b7       	in	r28, 0x3d	; 61
    2104:	de b7       	in	r29, 0x3e	; 62
	DIO_u8SetPinValue(PORT_1, PIN_1, DIO_u8PIN_LOW);
    2106:	80 e0       	ldi	r24, 0x00	; 0
    2108:	60 e0       	ldi	r22, 0x00	; 0
    210a:	40 e0       	ldi	r20, 0x00	; 0
    210c:	0e 94 26 12 	call	0x244c	; 0x244c <DIO_u8SetPinValue>
	DIO_u8SetPinValue(PORT_2, PIN_2, DIO_u8PIN_HIGH);
    2110:	80 e0       	ldi	r24, 0x00	; 0
    2112:	67 e0       	ldi	r22, 0x07	; 7
    2114:	41 e0       	ldi	r20, 0x01	; 1
    2116:	0e 94 26 12 	call	0x244c	; 0x244c <DIO_u8SetPinValue>
}
    211a:	cf 91       	pop	r28
    211c:	df 91       	pop	r29
    211e:	08 95       	ret

00002120 <DC_MotorStop>:

void DC_MotorStop(void)
{
    2120:	df 93       	push	r29
    2122:	cf 93       	push	r28
    2124:	cd b7       	in	r28, 0x3d	; 61
    2126:	de b7       	in	r29, 0x3e	; 62
	DIO_u8SetPinValue(PORT_1, PIN_1, DIO_u8PIN_HIGH);
    2128:	80 e0       	ldi	r24, 0x00	; 0
    212a:	60 e0       	ldi	r22, 0x00	; 0
    212c:	41 e0       	ldi	r20, 0x01	; 1
    212e:	0e 94 26 12 	call	0x244c	; 0x244c <DIO_u8SetPinValue>
	DIO_u8SetPinValue(PORT_2, PIN_2, DIO_u8PIN_HIGH);
    2132:	80 e0       	ldi	r24, 0x00	; 0
    2134:	67 e0       	ldi	r22, 0x07	; 7
    2136:	41 e0       	ldi	r20, 0x01	; 1
    2138:	0e 94 26 12 	call	0x244c	; 0x244c <DIO_u8SetPinValue>
}
    213c:	cf 91       	pop	r28
    213e:	df 91       	pop	r29
    2140:	08 95       	ret

00002142 <DIO_u8SetPinDirection>:
#include "DIO_private.h"
#include "DIO_config.h"


u8 DIO_u8SetPinDirection(u8 Copy_u8Port, u8 Copy_u8Pin, u8 Copy_u8Direction)   /* 0:input , 1:output*/
{
    2142:	df 93       	push	r29
    2144:	cf 93       	push	r28
    2146:	cd b7       	in	r28, 0x3d	; 61
    2148:	de b7       	in	r29, 0x3e	; 62
    214a:	28 97       	sbiw	r28, 0x08	; 8
    214c:	0f b6       	in	r0, 0x3f	; 63
    214e:	f8 94       	cli
    2150:	de bf       	out	0x3e, r29	; 62
    2152:	0f be       	out	0x3f, r0	; 63
    2154:	cd bf       	out	0x3d, r28	; 61
    2156:	8a 83       	std	Y+2, r24	; 0x02
    2158:	6b 83       	std	Y+3, r22	; 0x03
    215a:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState=0;
    215c:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8Port<=DIO_u8PIN7)
    215e:	8a 81       	ldd	r24, Y+2	; 0x02
    2160:	88 30       	cpi	r24, 0x08	; 8
    2162:	08 f0       	brcs	.+2      	; 0x2166 <DIO_u8SetPinDirection+0x24>
    2164:	1f c1       	rjmp	.+574    	; 0x23a4 <DIO_u8SetPinDirection+0x262>
	{
		if(Copy_u8Direction==DIO_u8PIN_INPUT)
    2166:	8c 81       	ldd	r24, Y+4	; 0x04
    2168:	88 23       	and	r24, r24
    216a:	09 f0       	breq	.+2      	; 0x216e <DIO_u8SetPinDirection+0x2c>
    216c:	8c c0       	rjmp	.+280    	; 0x2286 <DIO_u8SetPinDirection+0x144>
		{
			switch(Copy_u8Port)
    216e:	8a 81       	ldd	r24, Y+2	; 0x02
    2170:	28 2f       	mov	r18, r24
    2172:	30 e0       	ldi	r19, 0x00	; 0
    2174:	38 87       	std	Y+8, r19	; 0x08
    2176:	2f 83       	std	Y+7, r18	; 0x07
    2178:	8f 81       	ldd	r24, Y+7	; 0x07
    217a:	98 85       	ldd	r25, Y+8	; 0x08
    217c:	81 30       	cpi	r24, 0x01	; 1
    217e:	91 05       	cpc	r25, r1
    2180:	89 f1       	breq	.+98     	; 0x21e4 <DIO_u8SetPinDirection+0xa2>
    2182:	ef 81       	ldd	r30, Y+7	; 0x07
    2184:	f8 85       	ldd	r31, Y+8	; 0x08
    2186:	e2 30       	cpi	r30, 0x02	; 2
    2188:	f1 05       	cpc	r31, r1
    218a:	34 f4       	brge	.+12     	; 0x2198 <DIO_u8SetPinDirection+0x56>
    218c:	2f 81       	ldd	r18, Y+7	; 0x07
    218e:	38 85       	ldd	r19, Y+8	; 0x08
    2190:	21 15       	cp	r18, r1
    2192:	31 05       	cpc	r19, r1
    2194:	69 f0       	breq	.+26     	; 0x21b0 <DIO_u8SetPinDirection+0x6e>
    2196:	74 c0       	rjmp	.+232    	; 0x2280 <DIO_u8SetPinDirection+0x13e>
    2198:	8f 81       	ldd	r24, Y+7	; 0x07
    219a:	98 85       	ldd	r25, Y+8	; 0x08
    219c:	82 30       	cpi	r24, 0x02	; 2
    219e:	91 05       	cpc	r25, r1
    21a0:	d9 f1       	breq	.+118    	; 0x2218 <DIO_u8SetPinDirection+0xd6>
    21a2:	ef 81       	ldd	r30, Y+7	; 0x07
    21a4:	f8 85       	ldd	r31, Y+8	; 0x08
    21a6:	e3 30       	cpi	r30, 0x03	; 3
    21a8:	f1 05       	cpc	r31, r1
    21aa:	09 f4       	brne	.+2      	; 0x21ae <DIO_u8SetPinDirection+0x6c>
    21ac:	4f c0       	rjmp	.+158    	; 0x224c <DIO_u8SetPinDirection+0x10a>
    21ae:	68 c0       	rjmp	.+208    	; 0x2280 <DIO_u8SetPinDirection+0x13e>
			{
			case DIO_u8PORTA: CLR_BIT(DDRA,Copy_u8Pin); break;
    21b0:	4a e3       	ldi	r20, 0x3A	; 58
    21b2:	50 e0       	ldi	r21, 0x00	; 0
    21b4:	aa e3       	ldi	r26, 0x3A	; 58
    21b6:	b0 e0       	ldi	r27, 0x00	; 0
    21b8:	ea e3       	ldi	r30, 0x3A	; 58
    21ba:	f0 e0       	ldi	r31, 0x00	; 0
    21bc:	80 81       	ld	r24, Z
    21be:	68 2f       	mov	r22, r24
    21c0:	8b 81       	ldd	r24, Y+3	; 0x03
    21c2:	28 2f       	mov	r18, r24
    21c4:	30 e0       	ldi	r19, 0x00	; 0
    21c6:	81 e0       	ldi	r24, 0x01	; 1
    21c8:	90 e0       	ldi	r25, 0x00	; 0
    21ca:	02 2e       	mov	r0, r18
    21cc:	02 c0       	rjmp	.+4      	; 0x21d2 <DIO_u8SetPinDirection+0x90>
    21ce:	88 0f       	add	r24, r24
    21d0:	99 1f       	adc	r25, r25
    21d2:	0a 94       	dec	r0
    21d4:	e2 f7       	brpl	.-8      	; 0x21ce <DIO_u8SetPinDirection+0x8c>
    21d6:	80 95       	com	r24
    21d8:	86 23       	and	r24, r22
    21da:	8c 93       	st	X, r24
    21dc:	8c 91       	ld	r24, X
    21de:	fa 01       	movw	r30, r20
    21e0:	80 83       	st	Z, r24
    21e2:	e2 c0       	rjmp	.+452    	; 0x23a8 <DIO_u8SetPinDirection+0x266>
			case DIO_u8PORTB: CLR_BIT(DDRB,Copy_u8Pin); break;
    21e4:	47 e3       	ldi	r20, 0x37	; 55
    21e6:	50 e0       	ldi	r21, 0x00	; 0
    21e8:	a7 e3       	ldi	r26, 0x37	; 55
    21ea:	b0 e0       	ldi	r27, 0x00	; 0
    21ec:	e7 e3       	ldi	r30, 0x37	; 55
    21ee:	f0 e0       	ldi	r31, 0x00	; 0
    21f0:	80 81       	ld	r24, Z
    21f2:	68 2f       	mov	r22, r24
    21f4:	8b 81       	ldd	r24, Y+3	; 0x03
    21f6:	28 2f       	mov	r18, r24
    21f8:	30 e0       	ldi	r19, 0x00	; 0
    21fa:	81 e0       	ldi	r24, 0x01	; 1
    21fc:	90 e0       	ldi	r25, 0x00	; 0
    21fe:	02 2e       	mov	r0, r18
    2200:	02 c0       	rjmp	.+4      	; 0x2206 <DIO_u8SetPinDirection+0xc4>
    2202:	88 0f       	add	r24, r24
    2204:	99 1f       	adc	r25, r25
    2206:	0a 94       	dec	r0
    2208:	e2 f7       	brpl	.-8      	; 0x2202 <DIO_u8SetPinDirection+0xc0>
    220a:	80 95       	com	r24
    220c:	86 23       	and	r24, r22
    220e:	8c 93       	st	X, r24
    2210:	8c 91       	ld	r24, X
    2212:	fa 01       	movw	r30, r20
    2214:	80 83       	st	Z, r24
    2216:	c8 c0       	rjmp	.+400    	; 0x23a8 <DIO_u8SetPinDirection+0x266>
			case DIO_u8PORTC: CLR_BIT(DDRC,Copy_u8Pin); break;
    2218:	44 e3       	ldi	r20, 0x34	; 52
    221a:	50 e0       	ldi	r21, 0x00	; 0
    221c:	a4 e3       	ldi	r26, 0x34	; 52
    221e:	b0 e0       	ldi	r27, 0x00	; 0
    2220:	e4 e3       	ldi	r30, 0x34	; 52
    2222:	f0 e0       	ldi	r31, 0x00	; 0
    2224:	80 81       	ld	r24, Z
    2226:	68 2f       	mov	r22, r24
    2228:	8b 81       	ldd	r24, Y+3	; 0x03
    222a:	28 2f       	mov	r18, r24
    222c:	30 e0       	ldi	r19, 0x00	; 0
    222e:	81 e0       	ldi	r24, 0x01	; 1
    2230:	90 e0       	ldi	r25, 0x00	; 0
    2232:	02 2e       	mov	r0, r18
    2234:	02 c0       	rjmp	.+4      	; 0x223a <DIO_u8SetPinDirection+0xf8>
    2236:	88 0f       	add	r24, r24
    2238:	99 1f       	adc	r25, r25
    223a:	0a 94       	dec	r0
    223c:	e2 f7       	brpl	.-8      	; 0x2236 <DIO_u8SetPinDirection+0xf4>
    223e:	80 95       	com	r24
    2240:	86 23       	and	r24, r22
    2242:	8c 93       	st	X, r24
    2244:	8c 91       	ld	r24, X
    2246:	fa 01       	movw	r30, r20
    2248:	80 83       	st	Z, r24
    224a:	ae c0       	rjmp	.+348    	; 0x23a8 <DIO_u8SetPinDirection+0x266>
			case DIO_u8PORTD: CLR_BIT(DDRD,Copy_u8Pin); break;
    224c:	41 e3       	ldi	r20, 0x31	; 49
    224e:	50 e0       	ldi	r21, 0x00	; 0
    2250:	a1 e3       	ldi	r26, 0x31	; 49
    2252:	b0 e0       	ldi	r27, 0x00	; 0
    2254:	e1 e3       	ldi	r30, 0x31	; 49
    2256:	f0 e0       	ldi	r31, 0x00	; 0
    2258:	80 81       	ld	r24, Z
    225a:	68 2f       	mov	r22, r24
    225c:	8b 81       	ldd	r24, Y+3	; 0x03
    225e:	28 2f       	mov	r18, r24
    2260:	30 e0       	ldi	r19, 0x00	; 0
    2262:	81 e0       	ldi	r24, 0x01	; 1
    2264:	90 e0       	ldi	r25, 0x00	; 0
    2266:	02 2e       	mov	r0, r18
    2268:	02 c0       	rjmp	.+4      	; 0x226e <DIO_u8SetPinDirection+0x12c>
    226a:	88 0f       	add	r24, r24
    226c:	99 1f       	adc	r25, r25
    226e:	0a 94       	dec	r0
    2270:	e2 f7       	brpl	.-8      	; 0x226a <DIO_u8SetPinDirection+0x128>
    2272:	80 95       	com	r24
    2274:	86 23       	and	r24, r22
    2276:	8c 93       	st	X, r24
    2278:	8c 91       	ld	r24, X
    227a:	fa 01       	movw	r30, r20
    227c:	80 83       	st	Z, r24
    227e:	94 c0       	rjmp	.+296    	; 0x23a8 <DIO_u8SetPinDirection+0x266>
			default: Local_u8ErrorState=1; break;
    2280:	81 e0       	ldi	r24, 0x01	; 1
    2282:	89 83       	std	Y+1, r24	; 0x01
    2284:	91 c0       	rjmp	.+290    	; 0x23a8 <DIO_u8SetPinDirection+0x266>
			}
		}
		else if(Copy_u8Direction==DIO_u8PIN_OUTPUT)
    2286:	8c 81       	ldd	r24, Y+4	; 0x04
    2288:	81 30       	cpi	r24, 0x01	; 1
    228a:	09 f0       	breq	.+2      	; 0x228e <DIO_u8SetPinDirection+0x14c>
    228c:	88 c0       	rjmp	.+272    	; 0x239e <DIO_u8SetPinDirection+0x25c>
		{
			switch(Copy_u8Port)
    228e:	8a 81       	ldd	r24, Y+2	; 0x02
    2290:	28 2f       	mov	r18, r24
    2292:	30 e0       	ldi	r19, 0x00	; 0
    2294:	3e 83       	std	Y+6, r19	; 0x06
    2296:	2d 83       	std	Y+5, r18	; 0x05
    2298:	8d 81       	ldd	r24, Y+5	; 0x05
    229a:	9e 81       	ldd	r25, Y+6	; 0x06
    229c:	81 30       	cpi	r24, 0x01	; 1
    229e:	91 05       	cpc	r25, r1
    22a0:	81 f1       	breq	.+96     	; 0x2302 <DIO_u8SetPinDirection+0x1c0>
    22a2:	ed 81       	ldd	r30, Y+5	; 0x05
    22a4:	fe 81       	ldd	r31, Y+6	; 0x06
    22a6:	e2 30       	cpi	r30, 0x02	; 2
    22a8:	f1 05       	cpc	r31, r1
    22aa:	34 f4       	brge	.+12     	; 0x22b8 <DIO_u8SetPinDirection+0x176>
    22ac:	2d 81       	ldd	r18, Y+5	; 0x05
    22ae:	3e 81       	ldd	r19, Y+6	; 0x06
    22b0:	21 15       	cp	r18, r1
    22b2:	31 05       	cpc	r19, r1
    22b4:	69 f0       	breq	.+26     	; 0x22d0 <DIO_u8SetPinDirection+0x18e>
    22b6:	70 c0       	rjmp	.+224    	; 0x2398 <DIO_u8SetPinDirection+0x256>
    22b8:	8d 81       	ldd	r24, Y+5	; 0x05
    22ba:	9e 81       	ldd	r25, Y+6	; 0x06
    22bc:	82 30       	cpi	r24, 0x02	; 2
    22be:	91 05       	cpc	r25, r1
    22c0:	c9 f1       	breq	.+114    	; 0x2334 <DIO_u8SetPinDirection+0x1f2>
    22c2:	ed 81       	ldd	r30, Y+5	; 0x05
    22c4:	fe 81       	ldd	r31, Y+6	; 0x06
    22c6:	e3 30       	cpi	r30, 0x03	; 3
    22c8:	f1 05       	cpc	r31, r1
    22ca:	09 f4       	brne	.+2      	; 0x22ce <DIO_u8SetPinDirection+0x18c>
    22cc:	4c c0       	rjmp	.+152    	; 0x2366 <DIO_u8SetPinDirection+0x224>
    22ce:	64 c0       	rjmp	.+200    	; 0x2398 <DIO_u8SetPinDirection+0x256>
			{
			case DIO_u8PORTA: SET_BIT(DDRA,Copy_u8Pin); break;
    22d0:	4a e3       	ldi	r20, 0x3A	; 58
    22d2:	50 e0       	ldi	r21, 0x00	; 0
    22d4:	aa e3       	ldi	r26, 0x3A	; 58
    22d6:	b0 e0       	ldi	r27, 0x00	; 0
    22d8:	ea e3       	ldi	r30, 0x3A	; 58
    22da:	f0 e0       	ldi	r31, 0x00	; 0
    22dc:	80 81       	ld	r24, Z
    22de:	68 2f       	mov	r22, r24
    22e0:	8b 81       	ldd	r24, Y+3	; 0x03
    22e2:	28 2f       	mov	r18, r24
    22e4:	30 e0       	ldi	r19, 0x00	; 0
    22e6:	81 e0       	ldi	r24, 0x01	; 1
    22e8:	90 e0       	ldi	r25, 0x00	; 0
    22ea:	02 2e       	mov	r0, r18
    22ec:	02 c0       	rjmp	.+4      	; 0x22f2 <DIO_u8SetPinDirection+0x1b0>
    22ee:	88 0f       	add	r24, r24
    22f0:	99 1f       	adc	r25, r25
    22f2:	0a 94       	dec	r0
    22f4:	e2 f7       	brpl	.-8      	; 0x22ee <DIO_u8SetPinDirection+0x1ac>
    22f6:	86 2b       	or	r24, r22
    22f8:	8c 93       	st	X, r24
    22fa:	8c 91       	ld	r24, X
    22fc:	fa 01       	movw	r30, r20
    22fe:	80 83       	st	Z, r24
    2300:	53 c0       	rjmp	.+166    	; 0x23a8 <DIO_u8SetPinDirection+0x266>
			case DIO_u8PORTB: SET_BIT(DDRB,Copy_u8Pin); break;
    2302:	47 e3       	ldi	r20, 0x37	; 55
    2304:	50 e0       	ldi	r21, 0x00	; 0
    2306:	a7 e3       	ldi	r26, 0x37	; 55
    2308:	b0 e0       	ldi	r27, 0x00	; 0
    230a:	e7 e3       	ldi	r30, 0x37	; 55
    230c:	f0 e0       	ldi	r31, 0x00	; 0
    230e:	80 81       	ld	r24, Z
    2310:	68 2f       	mov	r22, r24
    2312:	8b 81       	ldd	r24, Y+3	; 0x03
    2314:	28 2f       	mov	r18, r24
    2316:	30 e0       	ldi	r19, 0x00	; 0
    2318:	81 e0       	ldi	r24, 0x01	; 1
    231a:	90 e0       	ldi	r25, 0x00	; 0
    231c:	02 2e       	mov	r0, r18
    231e:	02 c0       	rjmp	.+4      	; 0x2324 <DIO_u8SetPinDirection+0x1e2>
    2320:	88 0f       	add	r24, r24
    2322:	99 1f       	adc	r25, r25
    2324:	0a 94       	dec	r0
    2326:	e2 f7       	brpl	.-8      	; 0x2320 <DIO_u8SetPinDirection+0x1de>
    2328:	86 2b       	or	r24, r22
    232a:	8c 93       	st	X, r24
    232c:	8c 91       	ld	r24, X
    232e:	fa 01       	movw	r30, r20
    2330:	80 83       	st	Z, r24
    2332:	3a c0       	rjmp	.+116    	; 0x23a8 <DIO_u8SetPinDirection+0x266>
			case DIO_u8PORTC: SET_BIT(DDRC,Copy_u8Pin); break;
    2334:	44 e3       	ldi	r20, 0x34	; 52
    2336:	50 e0       	ldi	r21, 0x00	; 0
    2338:	a4 e3       	ldi	r26, 0x34	; 52
    233a:	b0 e0       	ldi	r27, 0x00	; 0
    233c:	e4 e3       	ldi	r30, 0x34	; 52
    233e:	f0 e0       	ldi	r31, 0x00	; 0
    2340:	80 81       	ld	r24, Z
    2342:	68 2f       	mov	r22, r24
    2344:	8b 81       	ldd	r24, Y+3	; 0x03
    2346:	28 2f       	mov	r18, r24
    2348:	30 e0       	ldi	r19, 0x00	; 0
    234a:	81 e0       	ldi	r24, 0x01	; 1
    234c:	90 e0       	ldi	r25, 0x00	; 0
    234e:	02 2e       	mov	r0, r18
    2350:	02 c0       	rjmp	.+4      	; 0x2356 <DIO_u8SetPinDirection+0x214>
    2352:	88 0f       	add	r24, r24
    2354:	99 1f       	adc	r25, r25
    2356:	0a 94       	dec	r0
    2358:	e2 f7       	brpl	.-8      	; 0x2352 <DIO_u8SetPinDirection+0x210>
    235a:	86 2b       	or	r24, r22
    235c:	8c 93       	st	X, r24
    235e:	8c 91       	ld	r24, X
    2360:	fa 01       	movw	r30, r20
    2362:	80 83       	st	Z, r24
    2364:	21 c0       	rjmp	.+66     	; 0x23a8 <DIO_u8SetPinDirection+0x266>
			case DIO_u8PORTD: SET_BIT(DDRD,Copy_u8Pin); break;
    2366:	41 e3       	ldi	r20, 0x31	; 49
    2368:	50 e0       	ldi	r21, 0x00	; 0
    236a:	a1 e3       	ldi	r26, 0x31	; 49
    236c:	b0 e0       	ldi	r27, 0x00	; 0
    236e:	e1 e3       	ldi	r30, 0x31	; 49
    2370:	f0 e0       	ldi	r31, 0x00	; 0
    2372:	80 81       	ld	r24, Z
    2374:	68 2f       	mov	r22, r24
    2376:	8b 81       	ldd	r24, Y+3	; 0x03
    2378:	28 2f       	mov	r18, r24
    237a:	30 e0       	ldi	r19, 0x00	; 0
    237c:	81 e0       	ldi	r24, 0x01	; 1
    237e:	90 e0       	ldi	r25, 0x00	; 0
    2380:	02 2e       	mov	r0, r18
    2382:	02 c0       	rjmp	.+4      	; 0x2388 <DIO_u8SetPinDirection+0x246>
    2384:	88 0f       	add	r24, r24
    2386:	99 1f       	adc	r25, r25
    2388:	0a 94       	dec	r0
    238a:	e2 f7       	brpl	.-8      	; 0x2384 <DIO_u8SetPinDirection+0x242>
    238c:	86 2b       	or	r24, r22
    238e:	8c 93       	st	X, r24
    2390:	8c 91       	ld	r24, X
    2392:	fa 01       	movw	r30, r20
    2394:	80 83       	st	Z, r24
    2396:	08 c0       	rjmp	.+16     	; 0x23a8 <DIO_u8SetPinDirection+0x266>
			default: Local_u8ErrorState=1; break;
    2398:	81 e0       	ldi	r24, 0x01	; 1
    239a:	89 83       	std	Y+1, r24	; 0x01
    239c:	05 c0       	rjmp	.+10     	; 0x23a8 <DIO_u8SetPinDirection+0x266>
			}
		}
		else
		{
			Local_u8ErrorState=1;
    239e:	81 e0       	ldi	r24, 0x01	; 1
    23a0:	89 83       	std	Y+1, r24	; 0x01
    23a2:	02 c0       	rjmp	.+4      	; 0x23a8 <DIO_u8SetPinDirection+0x266>
		}
	}
	else
	{
		Local_u8ErrorState=1;
    23a4:	81 e0       	ldi	r24, 0x01	; 1
    23a6:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    23a8:	89 81       	ldd	r24, Y+1	; 0x01
}
    23aa:	28 96       	adiw	r28, 0x08	; 8
    23ac:	0f b6       	in	r0, 0x3f	; 63
    23ae:	f8 94       	cli
    23b0:	de bf       	out	0x3e, r29	; 62
    23b2:	0f be       	out	0x3f, r0	; 63
    23b4:	cd bf       	out	0x3d, r28	; 61
    23b6:	cf 91       	pop	r28
    23b8:	df 91       	pop	r29
    23ba:	08 95       	ret

000023bc <DIO_u8SetPortDirection>:

u8 DIO_u8SetPortDirection(u8 Copy_u8Port, u8 Copy_u8Direction)   /* 0:input , 1:output*/
{
    23bc:	df 93       	push	r29
    23be:	cf 93       	push	r28
    23c0:	00 d0       	rcall	.+0      	; 0x23c2 <DIO_u8SetPortDirection+0x6>
    23c2:	00 d0       	rcall	.+0      	; 0x23c4 <DIO_u8SetPortDirection+0x8>
    23c4:	0f 92       	push	r0
    23c6:	cd b7       	in	r28, 0x3d	; 61
    23c8:	de b7       	in	r29, 0x3e	; 62
    23ca:	8a 83       	std	Y+2, r24	; 0x02
    23cc:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState=0;
    23ce:	19 82       	std	Y+1, r1	; 0x01
	switch(Copy_u8Port)
    23d0:	8a 81       	ldd	r24, Y+2	; 0x02
    23d2:	28 2f       	mov	r18, r24
    23d4:	30 e0       	ldi	r19, 0x00	; 0
    23d6:	3d 83       	std	Y+5, r19	; 0x05
    23d8:	2c 83       	std	Y+4, r18	; 0x04
    23da:	8c 81       	ldd	r24, Y+4	; 0x04
    23dc:	9d 81       	ldd	r25, Y+5	; 0x05
    23de:	81 30       	cpi	r24, 0x01	; 1
    23e0:	91 05       	cpc	r25, r1
    23e2:	d1 f0       	breq	.+52     	; 0x2418 <DIO_u8SetPortDirection+0x5c>
    23e4:	2c 81       	ldd	r18, Y+4	; 0x04
    23e6:	3d 81       	ldd	r19, Y+5	; 0x05
    23e8:	22 30       	cpi	r18, 0x02	; 2
    23ea:	31 05       	cpc	r19, r1
    23ec:	2c f4       	brge	.+10     	; 0x23f8 <DIO_u8SetPortDirection+0x3c>
    23ee:	8c 81       	ldd	r24, Y+4	; 0x04
    23f0:	9d 81       	ldd	r25, Y+5	; 0x05
    23f2:	00 97       	sbiw	r24, 0x00	; 0
    23f4:	61 f0       	breq	.+24     	; 0x240e <DIO_u8SetPortDirection+0x52>
    23f6:	1f c0       	rjmp	.+62     	; 0x2436 <DIO_u8SetPortDirection+0x7a>
    23f8:	2c 81       	ldd	r18, Y+4	; 0x04
    23fa:	3d 81       	ldd	r19, Y+5	; 0x05
    23fc:	22 30       	cpi	r18, 0x02	; 2
    23fe:	31 05       	cpc	r19, r1
    2400:	81 f0       	breq	.+32     	; 0x2422 <DIO_u8SetPortDirection+0x66>
    2402:	8c 81       	ldd	r24, Y+4	; 0x04
    2404:	9d 81       	ldd	r25, Y+5	; 0x05
    2406:	83 30       	cpi	r24, 0x03	; 3
    2408:	91 05       	cpc	r25, r1
    240a:	81 f0       	breq	.+32     	; 0x242c <DIO_u8SetPortDirection+0x70>
    240c:	14 c0       	rjmp	.+40     	; 0x2436 <DIO_u8SetPortDirection+0x7a>
	{
	case DIO_u8PORTA: DDRA=Copy_u8Direction; break;
    240e:	ea e3       	ldi	r30, 0x3A	; 58
    2410:	f0 e0       	ldi	r31, 0x00	; 0
    2412:	8b 81       	ldd	r24, Y+3	; 0x03
    2414:	80 83       	st	Z, r24
    2416:	11 c0       	rjmp	.+34     	; 0x243a <DIO_u8SetPortDirection+0x7e>
	case DIO_u8PORTB: DDRB=Copy_u8Direction; break;
    2418:	e7 e3       	ldi	r30, 0x37	; 55
    241a:	f0 e0       	ldi	r31, 0x00	; 0
    241c:	8b 81       	ldd	r24, Y+3	; 0x03
    241e:	80 83       	st	Z, r24
    2420:	0c c0       	rjmp	.+24     	; 0x243a <DIO_u8SetPortDirection+0x7e>
	case DIO_u8PORTC: DDRC=Copy_u8Direction; break;
    2422:	e4 e3       	ldi	r30, 0x34	; 52
    2424:	f0 e0       	ldi	r31, 0x00	; 0
    2426:	8b 81       	ldd	r24, Y+3	; 0x03
    2428:	80 83       	st	Z, r24
    242a:	07 c0       	rjmp	.+14     	; 0x243a <DIO_u8SetPortDirection+0x7e>
	case DIO_u8PORTD: DDRD=Copy_u8Direction; break;
    242c:	e1 e3       	ldi	r30, 0x31	; 49
    242e:	f0 e0       	ldi	r31, 0x00	; 0
    2430:	8b 81       	ldd	r24, Y+3	; 0x03
    2432:	80 83       	st	Z, r24
    2434:	02 c0       	rjmp	.+4      	; 0x243a <DIO_u8SetPortDirection+0x7e>
	default: Local_u8ErrorState=1;
    2436:	81 e0       	ldi	r24, 0x01	; 1
    2438:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    243a:	89 81       	ldd	r24, Y+1	; 0x01
}
    243c:	0f 90       	pop	r0
    243e:	0f 90       	pop	r0
    2440:	0f 90       	pop	r0
    2442:	0f 90       	pop	r0
    2444:	0f 90       	pop	r0
    2446:	cf 91       	pop	r28
    2448:	df 91       	pop	r29
    244a:	08 95       	ret

0000244c <DIO_u8SetPinValue>:

u8 DIO_u8SetPinValue(u8 Copy_u8Port, u8 Copy_u8Pin, u8 Copy_u8Value)   /*0:low , 1:high*/
{
    244c:	df 93       	push	r29
    244e:	cf 93       	push	r28
    2450:	cd b7       	in	r28, 0x3d	; 61
    2452:	de b7       	in	r29, 0x3e	; 62
    2454:	28 97       	sbiw	r28, 0x08	; 8
    2456:	0f b6       	in	r0, 0x3f	; 63
    2458:	f8 94       	cli
    245a:	de bf       	out	0x3e, r29	; 62
    245c:	0f be       	out	0x3f, r0	; 63
    245e:	cd bf       	out	0x3d, r28	; 61
    2460:	8a 83       	std	Y+2, r24	; 0x02
    2462:	6b 83       	std	Y+3, r22	; 0x03
    2464:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState=0;
    2466:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8Port<=DIO_u8PIN7)
    2468:	8a 81       	ldd	r24, Y+2	; 0x02
    246a:	88 30       	cpi	r24, 0x08	; 8
    246c:	08 f0       	brcs	.+2      	; 0x2470 <DIO_u8SetPinValue+0x24>
    246e:	1f c1       	rjmp	.+574    	; 0x26ae <DIO_u8SetPinValue+0x262>
	{
		if(Copy_u8Value==DIO_u8PIN_LOW)
    2470:	8c 81       	ldd	r24, Y+4	; 0x04
    2472:	88 23       	and	r24, r24
    2474:	09 f0       	breq	.+2      	; 0x2478 <DIO_u8SetPinValue+0x2c>
    2476:	8c c0       	rjmp	.+280    	; 0x2590 <DIO_u8SetPinValue+0x144>
		{
			switch(Copy_u8Port)
    2478:	8a 81       	ldd	r24, Y+2	; 0x02
    247a:	28 2f       	mov	r18, r24
    247c:	30 e0       	ldi	r19, 0x00	; 0
    247e:	38 87       	std	Y+8, r19	; 0x08
    2480:	2f 83       	std	Y+7, r18	; 0x07
    2482:	8f 81       	ldd	r24, Y+7	; 0x07
    2484:	98 85       	ldd	r25, Y+8	; 0x08
    2486:	81 30       	cpi	r24, 0x01	; 1
    2488:	91 05       	cpc	r25, r1
    248a:	89 f1       	breq	.+98     	; 0x24ee <DIO_u8SetPinValue+0xa2>
    248c:	ef 81       	ldd	r30, Y+7	; 0x07
    248e:	f8 85       	ldd	r31, Y+8	; 0x08
    2490:	e2 30       	cpi	r30, 0x02	; 2
    2492:	f1 05       	cpc	r31, r1
    2494:	34 f4       	brge	.+12     	; 0x24a2 <DIO_u8SetPinValue+0x56>
    2496:	2f 81       	ldd	r18, Y+7	; 0x07
    2498:	38 85       	ldd	r19, Y+8	; 0x08
    249a:	21 15       	cp	r18, r1
    249c:	31 05       	cpc	r19, r1
    249e:	69 f0       	breq	.+26     	; 0x24ba <DIO_u8SetPinValue+0x6e>
    24a0:	74 c0       	rjmp	.+232    	; 0x258a <DIO_u8SetPinValue+0x13e>
    24a2:	8f 81       	ldd	r24, Y+7	; 0x07
    24a4:	98 85       	ldd	r25, Y+8	; 0x08
    24a6:	82 30       	cpi	r24, 0x02	; 2
    24a8:	91 05       	cpc	r25, r1
    24aa:	d9 f1       	breq	.+118    	; 0x2522 <DIO_u8SetPinValue+0xd6>
    24ac:	ef 81       	ldd	r30, Y+7	; 0x07
    24ae:	f8 85       	ldd	r31, Y+8	; 0x08
    24b0:	e3 30       	cpi	r30, 0x03	; 3
    24b2:	f1 05       	cpc	r31, r1
    24b4:	09 f4       	brne	.+2      	; 0x24b8 <DIO_u8SetPinValue+0x6c>
    24b6:	4f c0       	rjmp	.+158    	; 0x2556 <DIO_u8SetPinValue+0x10a>
    24b8:	68 c0       	rjmp	.+208    	; 0x258a <DIO_u8SetPinValue+0x13e>
			{
			case DIO_u8PORTA: CLR_BIT(PORTA,Copy_u8Pin); break;
    24ba:	4b e3       	ldi	r20, 0x3B	; 59
    24bc:	50 e0       	ldi	r21, 0x00	; 0
    24be:	ab e3       	ldi	r26, 0x3B	; 59
    24c0:	b0 e0       	ldi	r27, 0x00	; 0
    24c2:	eb e3       	ldi	r30, 0x3B	; 59
    24c4:	f0 e0       	ldi	r31, 0x00	; 0
    24c6:	80 81       	ld	r24, Z
    24c8:	68 2f       	mov	r22, r24
    24ca:	8b 81       	ldd	r24, Y+3	; 0x03
    24cc:	28 2f       	mov	r18, r24
    24ce:	30 e0       	ldi	r19, 0x00	; 0
    24d0:	81 e0       	ldi	r24, 0x01	; 1
    24d2:	90 e0       	ldi	r25, 0x00	; 0
    24d4:	02 2e       	mov	r0, r18
    24d6:	02 c0       	rjmp	.+4      	; 0x24dc <DIO_u8SetPinValue+0x90>
    24d8:	88 0f       	add	r24, r24
    24da:	99 1f       	adc	r25, r25
    24dc:	0a 94       	dec	r0
    24de:	e2 f7       	brpl	.-8      	; 0x24d8 <DIO_u8SetPinValue+0x8c>
    24e0:	80 95       	com	r24
    24e2:	86 23       	and	r24, r22
    24e4:	8c 93       	st	X, r24
    24e6:	8c 91       	ld	r24, X
    24e8:	fa 01       	movw	r30, r20
    24ea:	80 83       	st	Z, r24
    24ec:	e2 c0       	rjmp	.+452    	; 0x26b2 <DIO_u8SetPinValue+0x266>
			case DIO_u8PORTB: CLR_BIT(PORTB,Copy_u8Pin); break;
    24ee:	48 e3       	ldi	r20, 0x38	; 56
    24f0:	50 e0       	ldi	r21, 0x00	; 0
    24f2:	a8 e3       	ldi	r26, 0x38	; 56
    24f4:	b0 e0       	ldi	r27, 0x00	; 0
    24f6:	e8 e3       	ldi	r30, 0x38	; 56
    24f8:	f0 e0       	ldi	r31, 0x00	; 0
    24fa:	80 81       	ld	r24, Z
    24fc:	68 2f       	mov	r22, r24
    24fe:	8b 81       	ldd	r24, Y+3	; 0x03
    2500:	28 2f       	mov	r18, r24
    2502:	30 e0       	ldi	r19, 0x00	; 0
    2504:	81 e0       	ldi	r24, 0x01	; 1
    2506:	90 e0       	ldi	r25, 0x00	; 0
    2508:	02 2e       	mov	r0, r18
    250a:	02 c0       	rjmp	.+4      	; 0x2510 <DIO_u8SetPinValue+0xc4>
    250c:	88 0f       	add	r24, r24
    250e:	99 1f       	adc	r25, r25
    2510:	0a 94       	dec	r0
    2512:	e2 f7       	brpl	.-8      	; 0x250c <DIO_u8SetPinValue+0xc0>
    2514:	80 95       	com	r24
    2516:	86 23       	and	r24, r22
    2518:	8c 93       	st	X, r24
    251a:	8c 91       	ld	r24, X
    251c:	fa 01       	movw	r30, r20
    251e:	80 83       	st	Z, r24
    2520:	c8 c0       	rjmp	.+400    	; 0x26b2 <DIO_u8SetPinValue+0x266>
			case DIO_u8PORTC: CLR_BIT(PORTC,Copy_u8Pin); break;
    2522:	45 e3       	ldi	r20, 0x35	; 53
    2524:	50 e0       	ldi	r21, 0x00	; 0
    2526:	a5 e3       	ldi	r26, 0x35	; 53
    2528:	b0 e0       	ldi	r27, 0x00	; 0
    252a:	e5 e3       	ldi	r30, 0x35	; 53
    252c:	f0 e0       	ldi	r31, 0x00	; 0
    252e:	80 81       	ld	r24, Z
    2530:	68 2f       	mov	r22, r24
    2532:	8b 81       	ldd	r24, Y+3	; 0x03
    2534:	28 2f       	mov	r18, r24
    2536:	30 e0       	ldi	r19, 0x00	; 0
    2538:	81 e0       	ldi	r24, 0x01	; 1
    253a:	90 e0       	ldi	r25, 0x00	; 0
    253c:	02 2e       	mov	r0, r18
    253e:	02 c0       	rjmp	.+4      	; 0x2544 <DIO_u8SetPinValue+0xf8>
    2540:	88 0f       	add	r24, r24
    2542:	99 1f       	adc	r25, r25
    2544:	0a 94       	dec	r0
    2546:	e2 f7       	brpl	.-8      	; 0x2540 <DIO_u8SetPinValue+0xf4>
    2548:	80 95       	com	r24
    254a:	86 23       	and	r24, r22
    254c:	8c 93       	st	X, r24
    254e:	8c 91       	ld	r24, X
    2550:	fa 01       	movw	r30, r20
    2552:	80 83       	st	Z, r24
    2554:	ae c0       	rjmp	.+348    	; 0x26b2 <DIO_u8SetPinValue+0x266>
			case DIO_u8PORTD: CLR_BIT(PORTD,Copy_u8Pin); break;
    2556:	42 e3       	ldi	r20, 0x32	; 50
    2558:	50 e0       	ldi	r21, 0x00	; 0
    255a:	a2 e3       	ldi	r26, 0x32	; 50
    255c:	b0 e0       	ldi	r27, 0x00	; 0
    255e:	e2 e3       	ldi	r30, 0x32	; 50
    2560:	f0 e0       	ldi	r31, 0x00	; 0
    2562:	80 81       	ld	r24, Z
    2564:	68 2f       	mov	r22, r24
    2566:	8b 81       	ldd	r24, Y+3	; 0x03
    2568:	28 2f       	mov	r18, r24
    256a:	30 e0       	ldi	r19, 0x00	; 0
    256c:	81 e0       	ldi	r24, 0x01	; 1
    256e:	90 e0       	ldi	r25, 0x00	; 0
    2570:	02 2e       	mov	r0, r18
    2572:	02 c0       	rjmp	.+4      	; 0x2578 <DIO_u8SetPinValue+0x12c>
    2574:	88 0f       	add	r24, r24
    2576:	99 1f       	adc	r25, r25
    2578:	0a 94       	dec	r0
    257a:	e2 f7       	brpl	.-8      	; 0x2574 <DIO_u8SetPinValue+0x128>
    257c:	80 95       	com	r24
    257e:	86 23       	and	r24, r22
    2580:	8c 93       	st	X, r24
    2582:	8c 91       	ld	r24, X
    2584:	fa 01       	movw	r30, r20
    2586:	80 83       	st	Z, r24
    2588:	94 c0       	rjmp	.+296    	; 0x26b2 <DIO_u8SetPinValue+0x266>
			default: Local_u8ErrorState=1; break;
    258a:	81 e0       	ldi	r24, 0x01	; 1
    258c:	89 83       	std	Y+1, r24	; 0x01
    258e:	91 c0       	rjmp	.+290    	; 0x26b2 <DIO_u8SetPinValue+0x266>
			}
		}
		else if(Copy_u8Value==DIO_u8PIN_HIGH)
    2590:	8c 81       	ldd	r24, Y+4	; 0x04
    2592:	81 30       	cpi	r24, 0x01	; 1
    2594:	09 f0       	breq	.+2      	; 0x2598 <DIO_u8SetPinValue+0x14c>
    2596:	88 c0       	rjmp	.+272    	; 0x26a8 <DIO_u8SetPinValue+0x25c>
		{
			switch(Copy_u8Port)
    2598:	8a 81       	ldd	r24, Y+2	; 0x02
    259a:	28 2f       	mov	r18, r24
    259c:	30 e0       	ldi	r19, 0x00	; 0
    259e:	3e 83       	std	Y+6, r19	; 0x06
    25a0:	2d 83       	std	Y+5, r18	; 0x05
    25a2:	8d 81       	ldd	r24, Y+5	; 0x05
    25a4:	9e 81       	ldd	r25, Y+6	; 0x06
    25a6:	81 30       	cpi	r24, 0x01	; 1
    25a8:	91 05       	cpc	r25, r1
    25aa:	81 f1       	breq	.+96     	; 0x260c <DIO_u8SetPinValue+0x1c0>
    25ac:	ed 81       	ldd	r30, Y+5	; 0x05
    25ae:	fe 81       	ldd	r31, Y+6	; 0x06
    25b0:	e2 30       	cpi	r30, 0x02	; 2
    25b2:	f1 05       	cpc	r31, r1
    25b4:	34 f4       	brge	.+12     	; 0x25c2 <DIO_u8SetPinValue+0x176>
    25b6:	2d 81       	ldd	r18, Y+5	; 0x05
    25b8:	3e 81       	ldd	r19, Y+6	; 0x06
    25ba:	21 15       	cp	r18, r1
    25bc:	31 05       	cpc	r19, r1
    25be:	69 f0       	breq	.+26     	; 0x25da <DIO_u8SetPinValue+0x18e>
    25c0:	70 c0       	rjmp	.+224    	; 0x26a2 <DIO_u8SetPinValue+0x256>
    25c2:	8d 81       	ldd	r24, Y+5	; 0x05
    25c4:	9e 81       	ldd	r25, Y+6	; 0x06
    25c6:	82 30       	cpi	r24, 0x02	; 2
    25c8:	91 05       	cpc	r25, r1
    25ca:	c9 f1       	breq	.+114    	; 0x263e <DIO_u8SetPinValue+0x1f2>
    25cc:	ed 81       	ldd	r30, Y+5	; 0x05
    25ce:	fe 81       	ldd	r31, Y+6	; 0x06
    25d0:	e3 30       	cpi	r30, 0x03	; 3
    25d2:	f1 05       	cpc	r31, r1
    25d4:	09 f4       	brne	.+2      	; 0x25d8 <DIO_u8SetPinValue+0x18c>
    25d6:	4c c0       	rjmp	.+152    	; 0x2670 <DIO_u8SetPinValue+0x224>
    25d8:	64 c0       	rjmp	.+200    	; 0x26a2 <DIO_u8SetPinValue+0x256>
			{
			case DIO_u8PORTA: SET_BIT(PORTA,Copy_u8Pin); break;
    25da:	4b e3       	ldi	r20, 0x3B	; 59
    25dc:	50 e0       	ldi	r21, 0x00	; 0
    25de:	ab e3       	ldi	r26, 0x3B	; 59
    25e0:	b0 e0       	ldi	r27, 0x00	; 0
    25e2:	eb e3       	ldi	r30, 0x3B	; 59
    25e4:	f0 e0       	ldi	r31, 0x00	; 0
    25e6:	80 81       	ld	r24, Z
    25e8:	68 2f       	mov	r22, r24
    25ea:	8b 81       	ldd	r24, Y+3	; 0x03
    25ec:	28 2f       	mov	r18, r24
    25ee:	30 e0       	ldi	r19, 0x00	; 0
    25f0:	81 e0       	ldi	r24, 0x01	; 1
    25f2:	90 e0       	ldi	r25, 0x00	; 0
    25f4:	02 2e       	mov	r0, r18
    25f6:	02 c0       	rjmp	.+4      	; 0x25fc <DIO_u8SetPinValue+0x1b0>
    25f8:	88 0f       	add	r24, r24
    25fa:	99 1f       	adc	r25, r25
    25fc:	0a 94       	dec	r0
    25fe:	e2 f7       	brpl	.-8      	; 0x25f8 <DIO_u8SetPinValue+0x1ac>
    2600:	86 2b       	or	r24, r22
    2602:	8c 93       	st	X, r24
    2604:	8c 91       	ld	r24, X
    2606:	fa 01       	movw	r30, r20
    2608:	80 83       	st	Z, r24
    260a:	53 c0       	rjmp	.+166    	; 0x26b2 <DIO_u8SetPinValue+0x266>
			case DIO_u8PORTB: SET_BIT(PORTB,Copy_u8Pin); break;
    260c:	48 e3       	ldi	r20, 0x38	; 56
    260e:	50 e0       	ldi	r21, 0x00	; 0
    2610:	a8 e3       	ldi	r26, 0x38	; 56
    2612:	b0 e0       	ldi	r27, 0x00	; 0
    2614:	e8 e3       	ldi	r30, 0x38	; 56
    2616:	f0 e0       	ldi	r31, 0x00	; 0
    2618:	80 81       	ld	r24, Z
    261a:	68 2f       	mov	r22, r24
    261c:	8b 81       	ldd	r24, Y+3	; 0x03
    261e:	28 2f       	mov	r18, r24
    2620:	30 e0       	ldi	r19, 0x00	; 0
    2622:	81 e0       	ldi	r24, 0x01	; 1
    2624:	90 e0       	ldi	r25, 0x00	; 0
    2626:	02 2e       	mov	r0, r18
    2628:	02 c0       	rjmp	.+4      	; 0x262e <DIO_u8SetPinValue+0x1e2>
    262a:	88 0f       	add	r24, r24
    262c:	99 1f       	adc	r25, r25
    262e:	0a 94       	dec	r0
    2630:	e2 f7       	brpl	.-8      	; 0x262a <DIO_u8SetPinValue+0x1de>
    2632:	86 2b       	or	r24, r22
    2634:	8c 93       	st	X, r24
    2636:	8c 91       	ld	r24, X
    2638:	fa 01       	movw	r30, r20
    263a:	80 83       	st	Z, r24
    263c:	3a c0       	rjmp	.+116    	; 0x26b2 <DIO_u8SetPinValue+0x266>
			case DIO_u8PORTC: SET_BIT(PORTC,Copy_u8Pin); break;
    263e:	45 e3       	ldi	r20, 0x35	; 53
    2640:	50 e0       	ldi	r21, 0x00	; 0
    2642:	a5 e3       	ldi	r26, 0x35	; 53
    2644:	b0 e0       	ldi	r27, 0x00	; 0
    2646:	e5 e3       	ldi	r30, 0x35	; 53
    2648:	f0 e0       	ldi	r31, 0x00	; 0
    264a:	80 81       	ld	r24, Z
    264c:	68 2f       	mov	r22, r24
    264e:	8b 81       	ldd	r24, Y+3	; 0x03
    2650:	28 2f       	mov	r18, r24
    2652:	30 e0       	ldi	r19, 0x00	; 0
    2654:	81 e0       	ldi	r24, 0x01	; 1
    2656:	90 e0       	ldi	r25, 0x00	; 0
    2658:	02 2e       	mov	r0, r18
    265a:	02 c0       	rjmp	.+4      	; 0x2660 <DIO_u8SetPinValue+0x214>
    265c:	88 0f       	add	r24, r24
    265e:	99 1f       	adc	r25, r25
    2660:	0a 94       	dec	r0
    2662:	e2 f7       	brpl	.-8      	; 0x265c <DIO_u8SetPinValue+0x210>
    2664:	86 2b       	or	r24, r22
    2666:	8c 93       	st	X, r24
    2668:	8c 91       	ld	r24, X
    266a:	fa 01       	movw	r30, r20
    266c:	80 83       	st	Z, r24
    266e:	21 c0       	rjmp	.+66     	; 0x26b2 <DIO_u8SetPinValue+0x266>
			case DIO_u8PORTD: SET_BIT(PORTD,Copy_u8Pin); break;
    2670:	42 e3       	ldi	r20, 0x32	; 50
    2672:	50 e0       	ldi	r21, 0x00	; 0
    2674:	a2 e3       	ldi	r26, 0x32	; 50
    2676:	b0 e0       	ldi	r27, 0x00	; 0
    2678:	e2 e3       	ldi	r30, 0x32	; 50
    267a:	f0 e0       	ldi	r31, 0x00	; 0
    267c:	80 81       	ld	r24, Z
    267e:	68 2f       	mov	r22, r24
    2680:	8b 81       	ldd	r24, Y+3	; 0x03
    2682:	28 2f       	mov	r18, r24
    2684:	30 e0       	ldi	r19, 0x00	; 0
    2686:	81 e0       	ldi	r24, 0x01	; 1
    2688:	90 e0       	ldi	r25, 0x00	; 0
    268a:	02 2e       	mov	r0, r18
    268c:	02 c0       	rjmp	.+4      	; 0x2692 <DIO_u8SetPinValue+0x246>
    268e:	88 0f       	add	r24, r24
    2690:	99 1f       	adc	r25, r25
    2692:	0a 94       	dec	r0
    2694:	e2 f7       	brpl	.-8      	; 0x268e <DIO_u8SetPinValue+0x242>
    2696:	86 2b       	or	r24, r22
    2698:	8c 93       	st	X, r24
    269a:	8c 91       	ld	r24, X
    269c:	fa 01       	movw	r30, r20
    269e:	80 83       	st	Z, r24
    26a0:	08 c0       	rjmp	.+16     	; 0x26b2 <DIO_u8SetPinValue+0x266>
			default: Local_u8ErrorState=1; break;
    26a2:	81 e0       	ldi	r24, 0x01	; 1
    26a4:	89 83       	std	Y+1, r24	; 0x01
    26a6:	05 c0       	rjmp	.+10     	; 0x26b2 <DIO_u8SetPinValue+0x266>
			}
		}
		else
		{
			Local_u8ErrorState=1;
    26a8:	81 e0       	ldi	r24, 0x01	; 1
    26aa:	89 83       	std	Y+1, r24	; 0x01
    26ac:	02 c0       	rjmp	.+4      	; 0x26b2 <DIO_u8SetPinValue+0x266>
		}
	}
	else
	{
		Local_u8ErrorState=1;
    26ae:	81 e0       	ldi	r24, 0x01	; 1
    26b0:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    26b2:	89 81       	ldd	r24, Y+1	; 0x01
}
    26b4:	28 96       	adiw	r28, 0x08	; 8
    26b6:	0f b6       	in	r0, 0x3f	; 63
    26b8:	f8 94       	cli
    26ba:	de bf       	out	0x3e, r29	; 62
    26bc:	0f be       	out	0x3f, r0	; 63
    26be:	cd bf       	out	0x3d, r28	; 61
    26c0:	cf 91       	pop	r28
    26c2:	df 91       	pop	r29
    26c4:	08 95       	ret

000026c6 <DIO_u8SetPortValue>:

u8 DIO_u8SetPortValue(u8 Copy_u8Port, u8 Copy_u8Value)
{
    26c6:	df 93       	push	r29
    26c8:	cf 93       	push	r28
    26ca:	00 d0       	rcall	.+0      	; 0x26cc <DIO_u8SetPortValue+0x6>
    26cc:	00 d0       	rcall	.+0      	; 0x26ce <DIO_u8SetPortValue+0x8>
    26ce:	0f 92       	push	r0
    26d0:	cd b7       	in	r28, 0x3d	; 61
    26d2:	de b7       	in	r29, 0x3e	; 62
    26d4:	8a 83       	std	Y+2, r24	; 0x02
    26d6:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState=0;
    26d8:	19 82       	std	Y+1, r1	; 0x01
	switch(Copy_u8Port)
    26da:	8a 81       	ldd	r24, Y+2	; 0x02
    26dc:	28 2f       	mov	r18, r24
    26de:	30 e0       	ldi	r19, 0x00	; 0
    26e0:	3d 83       	std	Y+5, r19	; 0x05
    26e2:	2c 83       	std	Y+4, r18	; 0x04
    26e4:	8c 81       	ldd	r24, Y+4	; 0x04
    26e6:	9d 81       	ldd	r25, Y+5	; 0x05
    26e8:	81 30       	cpi	r24, 0x01	; 1
    26ea:	91 05       	cpc	r25, r1
    26ec:	d1 f0       	breq	.+52     	; 0x2722 <DIO_u8SetPortValue+0x5c>
    26ee:	2c 81       	ldd	r18, Y+4	; 0x04
    26f0:	3d 81       	ldd	r19, Y+5	; 0x05
    26f2:	22 30       	cpi	r18, 0x02	; 2
    26f4:	31 05       	cpc	r19, r1
    26f6:	2c f4       	brge	.+10     	; 0x2702 <DIO_u8SetPortValue+0x3c>
    26f8:	8c 81       	ldd	r24, Y+4	; 0x04
    26fa:	9d 81       	ldd	r25, Y+5	; 0x05
    26fc:	00 97       	sbiw	r24, 0x00	; 0
    26fe:	61 f0       	breq	.+24     	; 0x2718 <DIO_u8SetPortValue+0x52>
    2700:	1f c0       	rjmp	.+62     	; 0x2740 <DIO_u8SetPortValue+0x7a>
    2702:	2c 81       	ldd	r18, Y+4	; 0x04
    2704:	3d 81       	ldd	r19, Y+5	; 0x05
    2706:	22 30       	cpi	r18, 0x02	; 2
    2708:	31 05       	cpc	r19, r1
    270a:	81 f0       	breq	.+32     	; 0x272c <DIO_u8SetPortValue+0x66>
    270c:	8c 81       	ldd	r24, Y+4	; 0x04
    270e:	9d 81       	ldd	r25, Y+5	; 0x05
    2710:	83 30       	cpi	r24, 0x03	; 3
    2712:	91 05       	cpc	r25, r1
    2714:	81 f0       	breq	.+32     	; 0x2736 <DIO_u8SetPortValue+0x70>
    2716:	14 c0       	rjmp	.+40     	; 0x2740 <DIO_u8SetPortValue+0x7a>
	{
	case DIO_u8PORTA: PORTA=Copy_u8Value; break;
    2718:	eb e3       	ldi	r30, 0x3B	; 59
    271a:	f0 e0       	ldi	r31, 0x00	; 0
    271c:	8b 81       	ldd	r24, Y+3	; 0x03
    271e:	80 83       	st	Z, r24
    2720:	11 c0       	rjmp	.+34     	; 0x2744 <DIO_u8SetPortValue+0x7e>
	case DIO_u8PORTB: PORTB=Copy_u8Value; break;
    2722:	e8 e3       	ldi	r30, 0x38	; 56
    2724:	f0 e0       	ldi	r31, 0x00	; 0
    2726:	8b 81       	ldd	r24, Y+3	; 0x03
    2728:	80 83       	st	Z, r24
    272a:	0c c0       	rjmp	.+24     	; 0x2744 <DIO_u8SetPortValue+0x7e>
	case DIO_u8PORTC: PORTC=Copy_u8Value; break;
    272c:	e5 e3       	ldi	r30, 0x35	; 53
    272e:	f0 e0       	ldi	r31, 0x00	; 0
    2730:	8b 81       	ldd	r24, Y+3	; 0x03
    2732:	80 83       	st	Z, r24
    2734:	07 c0       	rjmp	.+14     	; 0x2744 <DIO_u8SetPortValue+0x7e>
	case DIO_u8PORTD: PORTD=Copy_u8Value; break;
    2736:	e2 e3       	ldi	r30, 0x32	; 50
    2738:	f0 e0       	ldi	r31, 0x00	; 0
    273a:	8b 81       	ldd	r24, Y+3	; 0x03
    273c:	80 83       	st	Z, r24
    273e:	02 c0       	rjmp	.+4      	; 0x2744 <DIO_u8SetPortValue+0x7e>
	default: Local_u8ErrorState=1;
    2740:	81 e0       	ldi	r24, 0x01	; 1
    2742:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    2744:	89 81       	ldd	r24, Y+1	; 0x01
}
    2746:	0f 90       	pop	r0
    2748:	0f 90       	pop	r0
    274a:	0f 90       	pop	r0
    274c:	0f 90       	pop	r0
    274e:	0f 90       	pop	r0
    2750:	cf 91       	pop	r28
    2752:	df 91       	pop	r29
    2754:	08 95       	ret

00002756 <DIO_u8GetPinValue>:

u8 DIO_u8GetPinValue(u8 Copy_u8Port, u8 Copy_u8Pin)
{
    2756:	df 93       	push	r29
    2758:	cf 93       	push	r28
    275a:	00 d0       	rcall	.+0      	; 0x275c <DIO_u8GetPinValue+0x6>
    275c:	00 d0       	rcall	.+0      	; 0x275e <DIO_u8GetPinValue+0x8>
    275e:	00 d0       	rcall	.+0      	; 0x2760 <DIO_u8GetPinValue+0xa>
    2760:	cd b7       	in	r28, 0x3d	; 61
    2762:	de b7       	in	r29, 0x3e	; 62
    2764:	8b 83       	std	Y+3, r24	; 0x03
    2766:	6c 83       	std	Y+4, r22	; 0x04
	u8 Copy_u8Value;
	u8 Local_u8ErrorState=0;
    2768:	19 82       	std	Y+1, r1	; 0x01

			switch(Copy_u8Port)
    276a:	8b 81       	ldd	r24, Y+3	; 0x03
    276c:	28 2f       	mov	r18, r24
    276e:	30 e0       	ldi	r19, 0x00	; 0
    2770:	3e 83       	std	Y+6, r19	; 0x06
    2772:	2d 83       	std	Y+5, r18	; 0x05
    2774:	4d 81       	ldd	r20, Y+5	; 0x05
    2776:	5e 81       	ldd	r21, Y+6	; 0x06
    2778:	41 30       	cpi	r20, 0x01	; 1
    277a:	51 05       	cpc	r21, r1
    277c:	41 f1       	breq	.+80     	; 0x27ce <DIO_u8GetPinValue+0x78>
    277e:	8d 81       	ldd	r24, Y+5	; 0x05
    2780:	9e 81       	ldd	r25, Y+6	; 0x06
    2782:	82 30       	cpi	r24, 0x02	; 2
    2784:	91 05       	cpc	r25, r1
    2786:	34 f4       	brge	.+12     	; 0x2794 <DIO_u8GetPinValue+0x3e>
    2788:	2d 81       	ldd	r18, Y+5	; 0x05
    278a:	3e 81       	ldd	r19, Y+6	; 0x06
    278c:	21 15       	cp	r18, r1
    278e:	31 05       	cpc	r19, r1
    2790:	61 f0       	breq	.+24     	; 0x27aa <DIO_u8GetPinValue+0x54>
    2792:	53 c0       	rjmp	.+166    	; 0x283a <DIO_u8GetPinValue+0xe4>
    2794:	4d 81       	ldd	r20, Y+5	; 0x05
    2796:	5e 81       	ldd	r21, Y+6	; 0x06
    2798:	42 30       	cpi	r20, 0x02	; 2
    279a:	51 05       	cpc	r21, r1
    279c:	51 f1       	breq	.+84     	; 0x27f2 <DIO_u8GetPinValue+0x9c>
    279e:	8d 81       	ldd	r24, Y+5	; 0x05
    27a0:	9e 81       	ldd	r25, Y+6	; 0x06
    27a2:	83 30       	cpi	r24, 0x03	; 3
    27a4:	91 05       	cpc	r25, r1
    27a6:	b9 f1       	breq	.+110    	; 0x2816 <DIO_u8GetPinValue+0xc0>
    27a8:	48 c0       	rjmp	.+144    	; 0x283a <DIO_u8GetPinValue+0xe4>
			{
			case DIO_u8PORTA: Copy_u8Value=GET_BIT(PINA,Copy_u8Pin); break;
    27aa:	e9 e3       	ldi	r30, 0x39	; 57
    27ac:	f0 e0       	ldi	r31, 0x00	; 0
    27ae:	80 81       	ld	r24, Z
    27b0:	28 2f       	mov	r18, r24
    27b2:	30 e0       	ldi	r19, 0x00	; 0
    27b4:	8c 81       	ldd	r24, Y+4	; 0x04
    27b6:	88 2f       	mov	r24, r24
    27b8:	90 e0       	ldi	r25, 0x00	; 0
    27ba:	a9 01       	movw	r20, r18
    27bc:	02 c0       	rjmp	.+4      	; 0x27c2 <DIO_u8GetPinValue+0x6c>
    27be:	55 95       	asr	r21
    27c0:	47 95       	ror	r20
    27c2:	8a 95       	dec	r24
    27c4:	e2 f7       	brpl	.-8      	; 0x27be <DIO_u8GetPinValue+0x68>
    27c6:	ca 01       	movw	r24, r20
    27c8:	81 70       	andi	r24, 0x01	; 1
    27ca:	8a 83       	std	Y+2, r24	; 0x02
    27cc:	38 c0       	rjmp	.+112    	; 0x283e <DIO_u8GetPinValue+0xe8>
			case DIO_u8PORTB: Copy_u8Value=GET_BIT(PINB,Copy_u8Pin); break;
    27ce:	e6 e3       	ldi	r30, 0x36	; 54
    27d0:	f0 e0       	ldi	r31, 0x00	; 0
    27d2:	80 81       	ld	r24, Z
    27d4:	28 2f       	mov	r18, r24
    27d6:	30 e0       	ldi	r19, 0x00	; 0
    27d8:	8c 81       	ldd	r24, Y+4	; 0x04
    27da:	88 2f       	mov	r24, r24
    27dc:	90 e0       	ldi	r25, 0x00	; 0
    27de:	a9 01       	movw	r20, r18
    27e0:	02 c0       	rjmp	.+4      	; 0x27e6 <DIO_u8GetPinValue+0x90>
    27e2:	55 95       	asr	r21
    27e4:	47 95       	ror	r20
    27e6:	8a 95       	dec	r24
    27e8:	e2 f7       	brpl	.-8      	; 0x27e2 <DIO_u8GetPinValue+0x8c>
    27ea:	ca 01       	movw	r24, r20
    27ec:	81 70       	andi	r24, 0x01	; 1
    27ee:	8a 83       	std	Y+2, r24	; 0x02
    27f0:	26 c0       	rjmp	.+76     	; 0x283e <DIO_u8GetPinValue+0xe8>
			case DIO_u8PORTC: Copy_u8Value=GET_BIT(PINC,Copy_u8Pin); break;
    27f2:	e3 e3       	ldi	r30, 0x33	; 51
    27f4:	f0 e0       	ldi	r31, 0x00	; 0
    27f6:	80 81       	ld	r24, Z
    27f8:	28 2f       	mov	r18, r24
    27fa:	30 e0       	ldi	r19, 0x00	; 0
    27fc:	8c 81       	ldd	r24, Y+4	; 0x04
    27fe:	88 2f       	mov	r24, r24
    2800:	90 e0       	ldi	r25, 0x00	; 0
    2802:	a9 01       	movw	r20, r18
    2804:	02 c0       	rjmp	.+4      	; 0x280a <DIO_u8GetPinValue+0xb4>
    2806:	55 95       	asr	r21
    2808:	47 95       	ror	r20
    280a:	8a 95       	dec	r24
    280c:	e2 f7       	brpl	.-8      	; 0x2806 <DIO_u8GetPinValue+0xb0>
    280e:	ca 01       	movw	r24, r20
    2810:	81 70       	andi	r24, 0x01	; 1
    2812:	8a 83       	std	Y+2, r24	; 0x02
    2814:	14 c0       	rjmp	.+40     	; 0x283e <DIO_u8GetPinValue+0xe8>
			case DIO_u8PORTD: Copy_u8Value=GET_BIT(PIND,Copy_u8Pin); break;
    2816:	e0 e3       	ldi	r30, 0x30	; 48
    2818:	f0 e0       	ldi	r31, 0x00	; 0
    281a:	80 81       	ld	r24, Z
    281c:	28 2f       	mov	r18, r24
    281e:	30 e0       	ldi	r19, 0x00	; 0
    2820:	8c 81       	ldd	r24, Y+4	; 0x04
    2822:	88 2f       	mov	r24, r24
    2824:	90 e0       	ldi	r25, 0x00	; 0
    2826:	a9 01       	movw	r20, r18
    2828:	02 c0       	rjmp	.+4      	; 0x282e <DIO_u8GetPinValue+0xd8>
    282a:	55 95       	asr	r21
    282c:	47 95       	ror	r20
    282e:	8a 95       	dec	r24
    2830:	e2 f7       	brpl	.-8      	; 0x282a <DIO_u8GetPinValue+0xd4>
    2832:	ca 01       	movw	r24, r20
    2834:	81 70       	andi	r24, 0x01	; 1
    2836:	8a 83       	std	Y+2, r24	; 0x02
    2838:	02 c0       	rjmp	.+4      	; 0x283e <DIO_u8GetPinValue+0xe8>
			default: Local_u8ErrorState=1;
    283a:	81 e0       	ldi	r24, 0x01	; 1
    283c:	89 83       	std	Y+1, r24	; 0x01
			}

		return Copy_u8Value;
    283e:	8a 81       	ldd	r24, Y+2	; 0x02
}
    2840:	26 96       	adiw	r28, 0x06	; 6
    2842:	0f b6       	in	r0, 0x3f	; 63
    2844:	f8 94       	cli
    2846:	de bf       	out	0x3e, r29	; 62
    2848:	0f be       	out	0x3f, r0	; 63
    284a:	cd bf       	out	0x3d, r28	; 61
    284c:	cf 91       	pop	r28
    284e:	df 91       	pop	r29
    2850:	08 95       	ret

00002852 <DIO_u8ToggleBit>:

void DIO_u8ToggleBit(u8 Copy_u8Port, u8 Copy_u8Pin)
{
    2852:	df 93       	push	r29
    2854:	cf 93       	push	r28
    2856:	cd b7       	in	r28, 0x3d	; 61
    2858:	de b7       	in	r29, 0x3e	; 62
    285a:	6e 97       	sbiw	r28, 0x1e	; 30
    285c:	0f b6       	in	r0, 0x3f	; 63
    285e:	f8 94       	cli
    2860:	de bf       	out	0x3e, r29	; 62
    2862:	0f be       	out	0x3f, r0	; 63
    2864:	cd bf       	out	0x3d, r28	; 61
    2866:	8d 8f       	std	Y+29, r24	; 0x1d
    2868:	6e 8f       	std	Y+30, r22	; 0x1e
	DIO_u8SetPinValue(Copy_u8Port, Copy_u8Pin, DIO_u8PIN_HIGH);
    286a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    286c:	6e 8d       	ldd	r22, Y+30	; 0x1e
    286e:	41 e0       	ldi	r20, 0x01	; 1
    2870:	0e 94 26 12 	call	0x244c	; 0x244c <DIO_u8SetPinValue>
    2874:	80 e0       	ldi	r24, 0x00	; 0
    2876:	90 e0       	ldi	r25, 0x00	; 0
    2878:	aa e7       	ldi	r26, 0x7A	; 122
    287a:	b3 e4       	ldi	r27, 0x43	; 67
    287c:	89 8f       	std	Y+25, r24	; 0x19
    287e:	9a 8f       	std	Y+26, r25	; 0x1a
    2880:	ab 8f       	std	Y+27, r26	; 0x1b
    2882:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2884:	69 8d       	ldd	r22, Y+25	; 0x19
    2886:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2888:	8b 8d       	ldd	r24, Y+27	; 0x1b
    288a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    288c:	20 e0       	ldi	r18, 0x00	; 0
    288e:	30 e0       	ldi	r19, 0x00	; 0
    2890:	4a ef       	ldi	r20, 0xFA	; 250
    2892:	54 e4       	ldi	r21, 0x44	; 68
    2894:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2898:	dc 01       	movw	r26, r24
    289a:	cb 01       	movw	r24, r22
    289c:	8d 8b       	std	Y+21, r24	; 0x15
    289e:	9e 8b       	std	Y+22, r25	; 0x16
    28a0:	af 8b       	std	Y+23, r26	; 0x17
    28a2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    28a4:	6d 89       	ldd	r22, Y+21	; 0x15
    28a6:	7e 89       	ldd	r23, Y+22	; 0x16
    28a8:	8f 89       	ldd	r24, Y+23	; 0x17
    28aa:	98 8d       	ldd	r25, Y+24	; 0x18
    28ac:	20 e0       	ldi	r18, 0x00	; 0
    28ae:	30 e0       	ldi	r19, 0x00	; 0
    28b0:	40 e8       	ldi	r20, 0x80	; 128
    28b2:	5f e3       	ldi	r21, 0x3F	; 63
    28b4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    28b8:	88 23       	and	r24, r24
    28ba:	2c f4       	brge	.+10     	; 0x28c6 <DIO_u8ToggleBit+0x74>
		__ticks = 1;
    28bc:	81 e0       	ldi	r24, 0x01	; 1
    28be:	90 e0       	ldi	r25, 0x00	; 0
    28c0:	9c 8b       	std	Y+20, r25	; 0x14
    28c2:	8b 8b       	std	Y+19, r24	; 0x13
    28c4:	3f c0       	rjmp	.+126    	; 0x2944 <DIO_u8ToggleBit+0xf2>
	else if (__tmp > 65535)
    28c6:	6d 89       	ldd	r22, Y+21	; 0x15
    28c8:	7e 89       	ldd	r23, Y+22	; 0x16
    28ca:	8f 89       	ldd	r24, Y+23	; 0x17
    28cc:	98 8d       	ldd	r25, Y+24	; 0x18
    28ce:	20 e0       	ldi	r18, 0x00	; 0
    28d0:	3f ef       	ldi	r19, 0xFF	; 255
    28d2:	4f e7       	ldi	r20, 0x7F	; 127
    28d4:	57 e4       	ldi	r21, 0x47	; 71
    28d6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    28da:	18 16       	cp	r1, r24
    28dc:	4c f5       	brge	.+82     	; 0x2930 <DIO_u8ToggleBit+0xde>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28de:	69 8d       	ldd	r22, Y+25	; 0x19
    28e0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    28e2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    28e4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    28e6:	20 e0       	ldi	r18, 0x00	; 0
    28e8:	30 e0       	ldi	r19, 0x00	; 0
    28ea:	40 e2       	ldi	r20, 0x20	; 32
    28ec:	51 e4       	ldi	r21, 0x41	; 65
    28ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28f2:	dc 01       	movw	r26, r24
    28f4:	cb 01       	movw	r24, r22
    28f6:	bc 01       	movw	r22, r24
    28f8:	cd 01       	movw	r24, r26
    28fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28fe:	dc 01       	movw	r26, r24
    2900:	cb 01       	movw	r24, r22
    2902:	9c 8b       	std	Y+20, r25	; 0x14
    2904:	8b 8b       	std	Y+19, r24	; 0x13
    2906:	0f c0       	rjmp	.+30     	; 0x2926 <DIO_u8ToggleBit+0xd4>
    2908:	88 ec       	ldi	r24, 0xC8	; 200
    290a:	90 e0       	ldi	r25, 0x00	; 0
    290c:	9a 8b       	std	Y+18, r25	; 0x12
    290e:	89 8b       	std	Y+17, r24	; 0x11
    2910:	89 89       	ldd	r24, Y+17	; 0x11
    2912:	9a 89       	ldd	r25, Y+18	; 0x12
    2914:	01 97       	sbiw	r24, 0x01	; 1
    2916:	f1 f7       	brne	.-4      	; 0x2914 <DIO_u8ToggleBit+0xc2>
    2918:	9a 8b       	std	Y+18, r25	; 0x12
    291a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    291c:	8b 89       	ldd	r24, Y+19	; 0x13
    291e:	9c 89       	ldd	r25, Y+20	; 0x14
    2920:	01 97       	sbiw	r24, 0x01	; 1
    2922:	9c 8b       	std	Y+20, r25	; 0x14
    2924:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2926:	8b 89       	ldd	r24, Y+19	; 0x13
    2928:	9c 89       	ldd	r25, Y+20	; 0x14
    292a:	00 97       	sbiw	r24, 0x00	; 0
    292c:	69 f7       	brne	.-38     	; 0x2908 <DIO_u8ToggleBit+0xb6>
    292e:	14 c0       	rjmp	.+40     	; 0x2958 <DIO_u8ToggleBit+0x106>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2930:	6d 89       	ldd	r22, Y+21	; 0x15
    2932:	7e 89       	ldd	r23, Y+22	; 0x16
    2934:	8f 89       	ldd	r24, Y+23	; 0x17
    2936:	98 8d       	ldd	r25, Y+24	; 0x18
    2938:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    293c:	dc 01       	movw	r26, r24
    293e:	cb 01       	movw	r24, r22
    2940:	9c 8b       	std	Y+20, r25	; 0x14
    2942:	8b 8b       	std	Y+19, r24	; 0x13
    2944:	8b 89       	ldd	r24, Y+19	; 0x13
    2946:	9c 89       	ldd	r25, Y+20	; 0x14
    2948:	98 8b       	std	Y+16, r25	; 0x10
    294a:	8f 87       	std	Y+15, r24	; 0x0f
    294c:	8f 85       	ldd	r24, Y+15	; 0x0f
    294e:	98 89       	ldd	r25, Y+16	; 0x10
    2950:	01 97       	sbiw	r24, 0x01	; 1
    2952:	f1 f7       	brne	.-4      	; 0x2950 <DIO_u8ToggleBit+0xfe>
    2954:	98 8b       	std	Y+16, r25	; 0x10
    2956:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(250);
	DIO_u8SetPinValue(Copy_u8Port, Copy_u8Pin, DIO_u8PIN_LOW);
    2958:	8d 8d       	ldd	r24, Y+29	; 0x1d
    295a:	6e 8d       	ldd	r22, Y+30	; 0x1e
    295c:	40 e0       	ldi	r20, 0x00	; 0
    295e:	0e 94 26 12 	call	0x244c	; 0x244c <DIO_u8SetPinValue>
    2962:	80 e0       	ldi	r24, 0x00	; 0
    2964:	90 e0       	ldi	r25, 0x00	; 0
    2966:	aa e7       	ldi	r26, 0x7A	; 122
    2968:	b3 e4       	ldi	r27, 0x43	; 67
    296a:	8b 87       	std	Y+11, r24	; 0x0b
    296c:	9c 87       	std	Y+12, r25	; 0x0c
    296e:	ad 87       	std	Y+13, r26	; 0x0d
    2970:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2972:	6b 85       	ldd	r22, Y+11	; 0x0b
    2974:	7c 85       	ldd	r23, Y+12	; 0x0c
    2976:	8d 85       	ldd	r24, Y+13	; 0x0d
    2978:	9e 85       	ldd	r25, Y+14	; 0x0e
    297a:	20 e0       	ldi	r18, 0x00	; 0
    297c:	30 e0       	ldi	r19, 0x00	; 0
    297e:	4a ef       	ldi	r20, 0xFA	; 250
    2980:	54 e4       	ldi	r21, 0x44	; 68
    2982:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2986:	dc 01       	movw	r26, r24
    2988:	cb 01       	movw	r24, r22
    298a:	8f 83       	std	Y+7, r24	; 0x07
    298c:	98 87       	std	Y+8, r25	; 0x08
    298e:	a9 87       	std	Y+9, r26	; 0x09
    2990:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2992:	6f 81       	ldd	r22, Y+7	; 0x07
    2994:	78 85       	ldd	r23, Y+8	; 0x08
    2996:	89 85       	ldd	r24, Y+9	; 0x09
    2998:	9a 85       	ldd	r25, Y+10	; 0x0a
    299a:	20 e0       	ldi	r18, 0x00	; 0
    299c:	30 e0       	ldi	r19, 0x00	; 0
    299e:	40 e8       	ldi	r20, 0x80	; 128
    29a0:	5f e3       	ldi	r21, 0x3F	; 63
    29a2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    29a6:	88 23       	and	r24, r24
    29a8:	2c f4       	brge	.+10     	; 0x29b4 <DIO_u8ToggleBit+0x162>
		__ticks = 1;
    29aa:	81 e0       	ldi	r24, 0x01	; 1
    29ac:	90 e0       	ldi	r25, 0x00	; 0
    29ae:	9e 83       	std	Y+6, r25	; 0x06
    29b0:	8d 83       	std	Y+5, r24	; 0x05
    29b2:	3f c0       	rjmp	.+126    	; 0x2a32 <DIO_u8ToggleBit+0x1e0>
	else if (__tmp > 65535)
    29b4:	6f 81       	ldd	r22, Y+7	; 0x07
    29b6:	78 85       	ldd	r23, Y+8	; 0x08
    29b8:	89 85       	ldd	r24, Y+9	; 0x09
    29ba:	9a 85       	ldd	r25, Y+10	; 0x0a
    29bc:	20 e0       	ldi	r18, 0x00	; 0
    29be:	3f ef       	ldi	r19, 0xFF	; 255
    29c0:	4f e7       	ldi	r20, 0x7F	; 127
    29c2:	57 e4       	ldi	r21, 0x47	; 71
    29c4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    29c8:	18 16       	cp	r1, r24
    29ca:	4c f5       	brge	.+82     	; 0x2a1e <DIO_u8ToggleBit+0x1cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29cc:	6b 85       	ldd	r22, Y+11	; 0x0b
    29ce:	7c 85       	ldd	r23, Y+12	; 0x0c
    29d0:	8d 85       	ldd	r24, Y+13	; 0x0d
    29d2:	9e 85       	ldd	r25, Y+14	; 0x0e
    29d4:	20 e0       	ldi	r18, 0x00	; 0
    29d6:	30 e0       	ldi	r19, 0x00	; 0
    29d8:	40 e2       	ldi	r20, 0x20	; 32
    29da:	51 e4       	ldi	r21, 0x41	; 65
    29dc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29e0:	dc 01       	movw	r26, r24
    29e2:	cb 01       	movw	r24, r22
    29e4:	bc 01       	movw	r22, r24
    29e6:	cd 01       	movw	r24, r26
    29e8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29ec:	dc 01       	movw	r26, r24
    29ee:	cb 01       	movw	r24, r22
    29f0:	9e 83       	std	Y+6, r25	; 0x06
    29f2:	8d 83       	std	Y+5, r24	; 0x05
    29f4:	0f c0       	rjmp	.+30     	; 0x2a14 <DIO_u8ToggleBit+0x1c2>
    29f6:	88 ec       	ldi	r24, 0xC8	; 200
    29f8:	90 e0       	ldi	r25, 0x00	; 0
    29fa:	9c 83       	std	Y+4, r25	; 0x04
    29fc:	8b 83       	std	Y+3, r24	; 0x03
    29fe:	8b 81       	ldd	r24, Y+3	; 0x03
    2a00:	9c 81       	ldd	r25, Y+4	; 0x04
    2a02:	01 97       	sbiw	r24, 0x01	; 1
    2a04:	f1 f7       	brne	.-4      	; 0x2a02 <DIO_u8ToggleBit+0x1b0>
    2a06:	9c 83       	std	Y+4, r25	; 0x04
    2a08:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a0a:	8d 81       	ldd	r24, Y+5	; 0x05
    2a0c:	9e 81       	ldd	r25, Y+6	; 0x06
    2a0e:	01 97       	sbiw	r24, 0x01	; 1
    2a10:	9e 83       	std	Y+6, r25	; 0x06
    2a12:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a14:	8d 81       	ldd	r24, Y+5	; 0x05
    2a16:	9e 81       	ldd	r25, Y+6	; 0x06
    2a18:	00 97       	sbiw	r24, 0x00	; 0
    2a1a:	69 f7       	brne	.-38     	; 0x29f6 <DIO_u8ToggleBit+0x1a4>
    2a1c:	14 c0       	rjmp	.+40     	; 0x2a46 <DIO_u8ToggleBit+0x1f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a1e:	6f 81       	ldd	r22, Y+7	; 0x07
    2a20:	78 85       	ldd	r23, Y+8	; 0x08
    2a22:	89 85       	ldd	r24, Y+9	; 0x09
    2a24:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a26:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a2a:	dc 01       	movw	r26, r24
    2a2c:	cb 01       	movw	r24, r22
    2a2e:	9e 83       	std	Y+6, r25	; 0x06
    2a30:	8d 83       	std	Y+5, r24	; 0x05
    2a32:	8d 81       	ldd	r24, Y+5	; 0x05
    2a34:	9e 81       	ldd	r25, Y+6	; 0x06
    2a36:	9a 83       	std	Y+2, r25	; 0x02
    2a38:	89 83       	std	Y+1, r24	; 0x01
    2a3a:	89 81       	ldd	r24, Y+1	; 0x01
    2a3c:	9a 81       	ldd	r25, Y+2	; 0x02
    2a3e:	01 97       	sbiw	r24, 0x01	; 1
    2a40:	f1 f7       	brne	.-4      	; 0x2a3e <DIO_u8ToggleBit+0x1ec>
    2a42:	9a 83       	std	Y+2, r25	; 0x02
    2a44:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(250);
}
    2a46:	6e 96       	adiw	r28, 0x1e	; 30
    2a48:	0f b6       	in	r0, 0x3f	; 63
    2a4a:	f8 94       	cli
    2a4c:	de bf       	out	0x3e, r29	; 62
    2a4e:	0f be       	out	0x3f, r0	; 63
    2a50:	cd bf       	out	0x3d, r28	; 61
    2a52:	cf 91       	pop	r28
    2a54:	df 91       	pop	r29
    2a56:	08 95       	ret

00002a58 <Delay_voidSync>:
#include "Delay_config.h"

void (*GlobalCallBackFuncPtr)(void) = NULL;

void Delay_voidSync(u16 Copy_u16Time_ms)
{
    2a58:	df 93       	push	r29
    2a5a:	cf 93       	push	r28
    2a5c:	00 d0       	rcall	.+0      	; 0x2a5e <Delay_voidSync+0x6>
    2a5e:	cd b7       	in	r28, 0x3d	; 61
    2a60:	de b7       	in	r29, 0x3e	; 62
    2a62:	9a 83       	std	Y+2, r25	; 0x02
    2a64:	89 83       	std	Y+1, r24	; 0x01
	/*setting timer1 to CTC mode*/
	CLR_BIT(TCCR1A, TCCR1A_WGM10);
    2a66:	2f e4       	ldi	r18, 0x4F	; 79
    2a68:	30 e0       	ldi	r19, 0x00	; 0
    2a6a:	af e4       	ldi	r26, 0x4F	; 79
    2a6c:	b0 e0       	ldi	r27, 0x00	; 0
    2a6e:	ef e4       	ldi	r30, 0x4F	; 79
    2a70:	f0 e0       	ldi	r31, 0x00	; 0
    2a72:	80 81       	ld	r24, Z
    2a74:	8e 7f       	andi	r24, 0xFE	; 254
    2a76:	8c 93       	st	X, r24
    2a78:	8c 91       	ld	r24, X
    2a7a:	f9 01       	movw	r30, r18
    2a7c:	80 83       	st	Z, r24
	CLR_BIT(TCCR1A, TCCR1A_WGM11);
    2a7e:	2f e4       	ldi	r18, 0x4F	; 79
    2a80:	30 e0       	ldi	r19, 0x00	; 0
    2a82:	af e4       	ldi	r26, 0x4F	; 79
    2a84:	b0 e0       	ldi	r27, 0x00	; 0
    2a86:	ef e4       	ldi	r30, 0x4F	; 79
    2a88:	f0 e0       	ldi	r31, 0x00	; 0
    2a8a:	80 81       	ld	r24, Z
    2a8c:	8d 7f       	andi	r24, 0xFD	; 253
    2a8e:	8c 93       	st	X, r24
    2a90:	8c 91       	ld	r24, X
    2a92:	f9 01       	movw	r30, r18
    2a94:	80 83       	st	Z, r24
	SET_BIT(TCCR1B, TCCR1B_WGM12);
    2a96:	2e e4       	ldi	r18, 0x4E	; 78
    2a98:	30 e0       	ldi	r19, 0x00	; 0
    2a9a:	ae e4       	ldi	r26, 0x4E	; 78
    2a9c:	b0 e0       	ldi	r27, 0x00	; 0
    2a9e:	ee e4       	ldi	r30, 0x4E	; 78
    2aa0:	f0 e0       	ldi	r31, 0x00	; 0
    2aa2:	80 81       	ld	r24, Z
    2aa4:	88 60       	ori	r24, 0x08	; 8
    2aa6:	8c 93       	st	X, r24
    2aa8:	8c 91       	ld	r24, X
    2aaa:	f9 01       	movw	r30, r18
    2aac:	80 83       	st	Z, r24
	CLR_BIT(TCCR1B, TCCR1B_WGM13);
    2aae:	2e e4       	ldi	r18, 0x4E	; 78
    2ab0:	30 e0       	ldi	r19, 0x00	; 0
    2ab2:	ae e4       	ldi	r26, 0x4E	; 78
    2ab4:	b0 e0       	ldi	r27, 0x00	; 0
    2ab6:	ee e4       	ldi	r30, 0x4E	; 78
    2ab8:	f0 e0       	ldi	r31, 0x00	; 0
    2aba:	80 81       	ld	r24, Z
    2abc:	8f 7e       	andi	r24, 0xEF	; 239
    2abe:	8c 93       	st	X, r24
    2ac0:	8c 91       	ld	r24, X
    2ac2:	f9 01       	movw	r30, r18
    2ac4:	80 83       	st	Z, r24

	/*setting timer1 to normal mode*/
	CLR_BIT(TCCR1A, TCCR1A_COM1A0);
    2ac6:	2f e4       	ldi	r18, 0x4F	; 79
    2ac8:	30 e0       	ldi	r19, 0x00	; 0
    2aca:	af e4       	ldi	r26, 0x4F	; 79
    2acc:	b0 e0       	ldi	r27, 0x00	; 0
    2ace:	ef e4       	ldi	r30, 0x4F	; 79
    2ad0:	f0 e0       	ldi	r31, 0x00	; 0
    2ad2:	80 81       	ld	r24, Z
    2ad4:	8f 7b       	andi	r24, 0xBF	; 191
    2ad6:	8c 93       	st	X, r24
    2ad8:	8c 91       	ld	r24, X
    2ada:	f9 01       	movw	r30, r18
    2adc:	80 83       	st	Z, r24
	CLR_BIT(TCCR1A, TCCR1A_COM1A1);
    2ade:	2f e4       	ldi	r18, 0x4F	; 79
    2ae0:	30 e0       	ldi	r19, 0x00	; 0
    2ae2:	af e4       	ldi	r26, 0x4F	; 79
    2ae4:	b0 e0       	ldi	r27, 0x00	; 0
    2ae6:	ef e4       	ldi	r30, 0x4F	; 79
    2ae8:	f0 e0       	ldi	r31, 0x00	; 0
    2aea:	80 81       	ld	r24, Z
    2aec:	8f 77       	andi	r24, 0x7F	; 127
    2aee:	8c 93       	st	X, r24
    2af0:	8c 91       	ld	r24, X
    2af2:	f9 01       	movw	r30, r18
    2af4:	80 83       	st	Z, r24

	if((Copy_u16Time_ms > 0) && (Copy_u16Time_ms < 8300))
    2af6:	89 81       	ldd	r24, Y+1	; 0x01
    2af8:	9a 81       	ldd	r25, Y+2	; 0x02
    2afa:	00 97       	sbiw	r24, 0x00	; 0
    2afc:	09 f1       	breq	.+66     	; 0x2b40 <Delay_voidSync+0xe8>
    2afe:	89 81       	ldd	r24, Y+1	; 0x01
    2b00:	9a 81       	ldd	r25, Y+2	; 0x02
    2b02:	f0 e2       	ldi	r31, 0x20	; 32
    2b04:	8c 36       	cpi	r24, 0x6C	; 108
    2b06:	9f 07       	cpc	r25, r31
    2b08:	d8 f4       	brcc	.+54     	; 0x2b40 <Delay_voidSync+0xe8>
	{
		/*setting compare match value = delay_time * 1000 / 128 */
		OCR1A = ((u32)Copy_u16Time_ms * (125UL / 16UL));
    2b0a:	ea e4       	ldi	r30, 0x4A	; 74
    2b0c:	f0 e0       	ldi	r31, 0x00	; 0
    2b0e:	89 81       	ldd	r24, Y+1	; 0x01
    2b10:	9a 81       	ldd	r25, Y+2	; 0x02
    2b12:	9c 01       	movw	r18, r24
    2b14:	40 e0       	ldi	r20, 0x00	; 0
    2b16:	50 e0       	ldi	r21, 0x00	; 0
    2b18:	da 01       	movw	r26, r20
    2b1a:	c9 01       	movw	r24, r18
    2b1c:	88 0f       	add	r24, r24
    2b1e:	99 1f       	adc	r25, r25
    2b20:	aa 1f       	adc	r26, r26
    2b22:	bb 1f       	adc	r27, r27
    2b24:	88 0f       	add	r24, r24
    2b26:	99 1f       	adc	r25, r25
    2b28:	aa 1f       	adc	r26, r26
    2b2a:	bb 1f       	adc	r27, r27
    2b2c:	88 0f       	add	r24, r24
    2b2e:	99 1f       	adc	r25, r25
    2b30:	aa 1f       	adc	r26, r26
    2b32:	bb 1f       	adc	r27, r27
    2b34:	82 1b       	sub	r24, r18
    2b36:	93 0b       	sbc	r25, r19
    2b38:	a4 0b       	sbc	r26, r20
    2b3a:	b5 0b       	sbc	r27, r21
    2b3c:	91 83       	std	Z+1, r25	; 0x01
    2b3e:	80 83       	st	Z, r24
	}

	/*setting prescaler*/
	TCCR1B &= PRESCALER_MASK;
    2b40:	ae e4       	ldi	r26, 0x4E	; 78
    2b42:	b0 e0       	ldi	r27, 0x00	; 0
    2b44:	ee e4       	ldi	r30, 0x4E	; 78
    2b46:	f0 e0       	ldi	r31, 0x00	; 0
    2b48:	80 81       	ld	r24, Z
    2b4a:	88 7f       	andi	r24, 0xF8	; 248
    2b4c:	8c 93       	st	X, r24
	TCCR1B |= DIVIDE_BY_1024;
    2b4e:	ae e4       	ldi	r26, 0x4E	; 78
    2b50:	b0 e0       	ldi	r27, 0x00	; 0
    2b52:	ee e4       	ldi	r30, 0x4E	; 78
    2b54:	f0 e0       	ldi	r31, 0x00	; 0
    2b56:	80 81       	ld	r24, Z
    2b58:	85 60       	ori	r24, 0x05	; 5
    2b5a:	8c 93       	st	X, r24

	/*wait till timer reaches OCR1A value*/
	while((GET_BIT(TIFR, TIFR_OCF1A)) == 0);
    2b5c:	e8 e5       	ldi	r30, 0x58	; 88
    2b5e:	f0 e0       	ldi	r31, 0x00	; 0
    2b60:	80 81       	ld	r24, Z
    2b62:	82 95       	swap	r24
    2b64:	8f 70       	andi	r24, 0x0F	; 15
    2b66:	88 2f       	mov	r24, r24
    2b68:	90 e0       	ldi	r25, 0x00	; 0
    2b6a:	81 70       	andi	r24, 0x01	; 1
    2b6c:	90 70       	andi	r25, 0x00	; 0
    2b6e:	00 97       	sbiw	r24, 0x00	; 0
    2b70:	a9 f3       	breq	.-22     	; 0x2b5c <Delay_voidSync+0x104>

	/*Clear interrupt flag of OCR1A*/
	SET_BIT(TIFR, TIFR_OCF1A);
    2b72:	28 e5       	ldi	r18, 0x58	; 88
    2b74:	30 e0       	ldi	r19, 0x00	; 0
    2b76:	a8 e5       	ldi	r26, 0x58	; 88
    2b78:	b0 e0       	ldi	r27, 0x00	; 0
    2b7a:	e8 e5       	ldi	r30, 0x58	; 88
    2b7c:	f0 e0       	ldi	r31, 0x00	; 0
    2b7e:	80 81       	ld	r24, Z
    2b80:	80 61       	ori	r24, 0x10	; 16
    2b82:	8c 93       	st	X, r24
    2b84:	8c 91       	ld	r24, X
    2b86:	f9 01       	movw	r30, r18
    2b88:	80 83       	st	Z, r24
}
    2b8a:	0f 90       	pop	r0
    2b8c:	0f 90       	pop	r0
    2b8e:	cf 91       	pop	r28
    2b90:	df 91       	pop	r29
    2b92:	08 95       	ret

00002b94 <Delay_voidAsync>:

void Delay_voidAsync(u16 Copy_u16Time_ms, void (*CallBackFuncPtr)(void))
{
    2b94:	0f 93       	push	r16
    2b96:	1f 93       	push	r17
    2b98:	df 93       	push	r29
    2b9a:	cf 93       	push	r28
    2b9c:	00 d0       	rcall	.+0      	; 0x2b9e <Delay_voidAsync+0xa>
    2b9e:	00 d0       	rcall	.+0      	; 0x2ba0 <Delay_voidAsync+0xc>
    2ba0:	cd b7       	in	r28, 0x3d	; 61
    2ba2:	de b7       	in	r29, 0x3e	; 62
    2ba4:	9a 83       	std	Y+2, r25	; 0x02
    2ba6:	89 83       	std	Y+1, r24	; 0x01
    2ba8:	7c 83       	std	Y+4, r23	; 0x04
    2baa:	6b 83       	std	Y+3, r22	; 0x03
	/*setting timer1 to normal mode*/
	CLR_BIT(TCCR1A, TCCR1A_COM1A0);
    2bac:	2f e4       	ldi	r18, 0x4F	; 79
    2bae:	30 e0       	ldi	r19, 0x00	; 0
    2bb0:	af e4       	ldi	r26, 0x4F	; 79
    2bb2:	b0 e0       	ldi	r27, 0x00	; 0
    2bb4:	ef e4       	ldi	r30, 0x4F	; 79
    2bb6:	f0 e0       	ldi	r31, 0x00	; 0
    2bb8:	80 81       	ld	r24, Z
    2bba:	8f 7b       	andi	r24, 0xBF	; 191
    2bbc:	8c 93       	st	X, r24
    2bbe:	8c 91       	ld	r24, X
    2bc0:	f9 01       	movw	r30, r18
    2bc2:	80 83       	st	Z, r24
	SET_BIT(TCCR1A, TCCR1A_COM1A1);
    2bc4:	2f e4       	ldi	r18, 0x4F	; 79
    2bc6:	30 e0       	ldi	r19, 0x00	; 0
    2bc8:	af e4       	ldi	r26, 0x4F	; 79
    2bca:	b0 e0       	ldi	r27, 0x00	; 0
    2bcc:	ef e4       	ldi	r30, 0x4F	; 79
    2bce:	f0 e0       	ldi	r31, 0x00	; 0
    2bd0:	80 81       	ld	r24, Z
    2bd2:	80 68       	ori	r24, 0x80	; 128
    2bd4:	8c 93       	st	X, r24
    2bd6:	8c 91       	ld	r24, X
    2bd8:	f9 01       	movw	r30, r18
    2bda:	80 83       	st	Z, r24

	/*setting timer1 to CTC mode*/
	CLR_BIT(TCCR1A, TCCR1A_WGM10);
    2bdc:	2f e4       	ldi	r18, 0x4F	; 79
    2bde:	30 e0       	ldi	r19, 0x00	; 0
    2be0:	af e4       	ldi	r26, 0x4F	; 79
    2be2:	b0 e0       	ldi	r27, 0x00	; 0
    2be4:	ef e4       	ldi	r30, 0x4F	; 79
    2be6:	f0 e0       	ldi	r31, 0x00	; 0
    2be8:	80 81       	ld	r24, Z
    2bea:	8e 7f       	andi	r24, 0xFE	; 254
    2bec:	8c 93       	st	X, r24
    2bee:	8c 91       	ld	r24, X
    2bf0:	f9 01       	movw	r30, r18
    2bf2:	80 83       	st	Z, r24
	CLR_BIT(TCCR1A, TCCR1A_WGM11);
    2bf4:	2f e4       	ldi	r18, 0x4F	; 79
    2bf6:	30 e0       	ldi	r19, 0x00	; 0
    2bf8:	af e4       	ldi	r26, 0x4F	; 79
    2bfa:	b0 e0       	ldi	r27, 0x00	; 0
    2bfc:	ef e4       	ldi	r30, 0x4F	; 79
    2bfe:	f0 e0       	ldi	r31, 0x00	; 0
    2c00:	80 81       	ld	r24, Z
    2c02:	8d 7f       	andi	r24, 0xFD	; 253
    2c04:	8c 93       	st	X, r24
    2c06:	8c 91       	ld	r24, X
    2c08:	f9 01       	movw	r30, r18
    2c0a:	80 83       	st	Z, r24
	SET_BIT(TCCR1B, TCCR1B_WGM12);
    2c0c:	2e e4       	ldi	r18, 0x4E	; 78
    2c0e:	30 e0       	ldi	r19, 0x00	; 0
    2c10:	ae e4       	ldi	r26, 0x4E	; 78
    2c12:	b0 e0       	ldi	r27, 0x00	; 0
    2c14:	ee e4       	ldi	r30, 0x4E	; 78
    2c16:	f0 e0       	ldi	r31, 0x00	; 0
    2c18:	80 81       	ld	r24, Z
    2c1a:	88 60       	ori	r24, 0x08	; 8
    2c1c:	8c 93       	st	X, r24
    2c1e:	8c 91       	ld	r24, X
    2c20:	f9 01       	movw	r30, r18
    2c22:	80 83       	st	Z, r24
	CLR_BIT(TCCR1B, TCCR1B_WGM13);
    2c24:	2e e4       	ldi	r18, 0x4E	; 78
    2c26:	30 e0       	ldi	r19, 0x00	; 0
    2c28:	ae e4       	ldi	r26, 0x4E	; 78
    2c2a:	b0 e0       	ldi	r27, 0x00	; 0
    2c2c:	ee e4       	ldi	r30, 0x4E	; 78
    2c2e:	f0 e0       	ldi	r31, 0x00	; 0
    2c30:	80 81       	ld	r24, Z
    2c32:	8f 7e       	andi	r24, 0xEF	; 239
    2c34:	8c 93       	st	X, r24
    2c36:	8c 91       	ld	r24, X
    2c38:	f9 01       	movw	r30, r18
    2c3a:	80 83       	st	Z, r24

	/*setting prescaler*/
	TCCR1B &= PRESCALER_MASK;
    2c3c:	ae e4       	ldi	r26, 0x4E	; 78
    2c3e:	b0 e0       	ldi	r27, 0x00	; 0
    2c40:	ee e4       	ldi	r30, 0x4E	; 78
    2c42:	f0 e0       	ldi	r31, 0x00	; 0
    2c44:	80 81       	ld	r24, Z
    2c46:	88 7f       	andi	r24, 0xF8	; 248
    2c48:	8c 93       	st	X, r24
	TCCR1B |= DIVIDE_BY_1024;
    2c4a:	ae e4       	ldi	r26, 0x4E	; 78
    2c4c:	b0 e0       	ldi	r27, 0x00	; 0
    2c4e:	ee e4       	ldi	r30, 0x4E	; 78
    2c50:	f0 e0       	ldi	r31, 0x00	; 0
    2c52:	80 81       	ld	r24, Z
    2c54:	85 60       	ori	r24, 0x05	; 5
    2c56:	8c 93       	st	X, r24

	if((Copy_u16Time_ms > 0) && (Copy_u16Time_ms < 8300))
    2c58:	89 81       	ldd	r24, Y+1	; 0x01
    2c5a:	9a 81       	ldd	r25, Y+2	; 0x02
    2c5c:	00 97       	sbiw	r24, 0x00	; 0
    2c5e:	11 f1       	breq	.+68     	; 0x2ca4 <Delay_voidAsync+0x110>
    2c60:	89 81       	ldd	r24, Y+1	; 0x01
    2c62:	9a 81       	ldd	r25, Y+2	; 0x02
    2c64:	f0 e2       	ldi	r31, 0x20	; 32
    2c66:	8c 36       	cpi	r24, 0x6C	; 108
    2c68:	9f 07       	cpc	r25, r31
    2c6a:	e0 f4       	brcc	.+56     	; 0x2ca4 <Delay_voidAsync+0x110>
	{
		/*setting compare match value = delay_time * 1000 / 128 */
		OCR1A = (((u32)Copy_u16Time_ms * 125UL) / 16UL);
    2c6c:	0a e4       	ldi	r16, 0x4A	; 74
    2c6e:	10 e0       	ldi	r17, 0x00	; 0
    2c70:	89 81       	ldd	r24, Y+1	; 0x01
    2c72:	9a 81       	ldd	r25, Y+2	; 0x02
    2c74:	cc 01       	movw	r24, r24
    2c76:	a0 e0       	ldi	r26, 0x00	; 0
    2c78:	b0 e0       	ldi	r27, 0x00	; 0
    2c7a:	2d e7       	ldi	r18, 0x7D	; 125
    2c7c:	30 e0       	ldi	r19, 0x00	; 0
    2c7e:	40 e0       	ldi	r20, 0x00	; 0
    2c80:	50 e0       	ldi	r21, 0x00	; 0
    2c82:	bc 01       	movw	r22, r24
    2c84:	cd 01       	movw	r24, r26
    2c86:	0e 94 8c 27 	call	0x4f18	; 0x4f18 <__mulsi3>
    2c8a:	dc 01       	movw	r26, r24
    2c8c:	cb 01       	movw	r24, r22
    2c8e:	68 94       	set
    2c90:	13 f8       	bld	r1, 3
    2c92:	b6 95       	lsr	r27
    2c94:	a7 95       	ror	r26
    2c96:	97 95       	ror	r25
    2c98:	87 95       	ror	r24
    2c9a:	16 94       	lsr	r1
    2c9c:	d1 f7       	brne	.-12     	; 0x2c92 <Delay_voidAsync+0xfe>
    2c9e:	f8 01       	movw	r30, r16
    2ca0:	91 83       	std	Z+1, r25	; 0x01
    2ca2:	80 83       	st	Z, r24
	}

	/*Enable GIE*/
	GIE_voidEnable();
    2ca4:	0e 94 19 18 	call	0x3032	; 0x3032 <GIE_voidEnable>

	/*enable compare_matchA interrupt*/
	SET_BIT(TIMSK, TIMSK_OCIE1A);
    2ca8:	29 e5       	ldi	r18, 0x59	; 89
    2caa:	30 e0       	ldi	r19, 0x00	; 0
    2cac:	a9 e5       	ldi	r26, 0x59	; 89
    2cae:	b0 e0       	ldi	r27, 0x00	; 0
    2cb0:	e9 e5       	ldi	r30, 0x59	; 89
    2cb2:	f0 e0       	ldi	r31, 0x00	; 0
    2cb4:	80 81       	ld	r24, Z
    2cb6:	80 61       	ori	r24, 0x10	; 16
    2cb8:	8c 93       	st	X, r24
    2cba:	8c 91       	ld	r24, X
    2cbc:	f9 01       	movw	r30, r18
    2cbe:	80 83       	st	Z, r24

	/*passing ISR ptr to func to global*/
	GlobalCallBackFuncPtr = CallBackFuncPtr;
    2cc0:	8b 81       	ldd	r24, Y+3	; 0x03
    2cc2:	9c 81       	ldd	r25, Y+4	; 0x04
    2cc4:	90 93 40 05 	sts	0x0540, r25
    2cc8:	80 93 3f 05 	sts	0x053F, r24
}
    2ccc:	0f 90       	pop	r0
    2cce:	0f 90       	pop	r0
    2cd0:	0f 90       	pop	r0
    2cd2:	0f 90       	pop	r0
    2cd4:	cf 91       	pop	r28
    2cd6:	df 91       	pop	r29
    2cd8:	1f 91       	pop	r17
    2cda:	0f 91       	pop	r16
    2cdc:	08 95       	ret

00002cde <__vector_7>:


/*OCR1A ISR*/
void __vector_7(void) __attribute__((signal));
void __vector_7(void)
{
    2cde:	1f 92       	push	r1
    2ce0:	0f 92       	push	r0
    2ce2:	0f b6       	in	r0, 0x3f	; 63
    2ce4:	0f 92       	push	r0
    2ce6:	11 24       	eor	r1, r1
    2ce8:	2f 93       	push	r18
    2cea:	3f 93       	push	r19
    2cec:	4f 93       	push	r20
    2cee:	5f 93       	push	r21
    2cf0:	6f 93       	push	r22
    2cf2:	7f 93       	push	r23
    2cf4:	8f 93       	push	r24
    2cf6:	9f 93       	push	r25
    2cf8:	af 93       	push	r26
    2cfa:	bf 93       	push	r27
    2cfc:	ef 93       	push	r30
    2cfe:	ff 93       	push	r31
    2d00:	df 93       	push	r29
    2d02:	cf 93       	push	r28
    2d04:	cd b7       	in	r28, 0x3d	; 61
    2d06:	de b7       	in	r29, 0x3e	; 62
	if(GlobalCallBackFuncPtr != NULL)
    2d08:	80 91 3f 05 	lds	r24, 0x053F
    2d0c:	90 91 40 05 	lds	r25, 0x0540
    2d10:	00 97       	sbiw	r24, 0x00	; 0
    2d12:	29 f0       	breq	.+10     	; 0x2d1e <__vector_7+0x40>
	{
		GlobalCallBackFuncPtr();
    2d14:	e0 91 3f 05 	lds	r30, 0x053F
    2d18:	f0 91 40 05 	lds	r31, 0x0540
    2d1c:	09 95       	icall
	}
}
    2d1e:	cf 91       	pop	r28
    2d20:	df 91       	pop	r29
    2d22:	ff 91       	pop	r31
    2d24:	ef 91       	pop	r30
    2d26:	bf 91       	pop	r27
    2d28:	af 91       	pop	r26
    2d2a:	9f 91       	pop	r25
    2d2c:	8f 91       	pop	r24
    2d2e:	7f 91       	pop	r23
    2d30:	6f 91       	pop	r22
    2d32:	5f 91       	pop	r21
    2d34:	4f 91       	pop	r20
    2d36:	3f 91       	pop	r19
    2d38:	2f 91       	pop	r18
    2d3a:	0f 90       	pop	r0
    2d3c:	0f be       	out	0x3f, r0	; 63
    2d3e:	0f 90       	pop	r0
    2d40:	1f 90       	pop	r1
    2d42:	18 95       	reti

00002d44 <EEPROM_voidSendByte>:
#include "EEPROM_interface.h"



void EEPROM_voidSendByte(u16 Copy_u16Address,u8 Copy_u8Data)
{
    2d44:	df 93       	push	r29
    2d46:	cf 93       	push	r28
    2d48:	cd b7       	in	r28, 0x3d	; 61
    2d4a:	de b7       	in	r29, 0x3e	; 62
    2d4c:	62 97       	sbiw	r28, 0x12	; 18
    2d4e:	0f b6       	in	r0, 0x3f	; 63
    2d50:	f8 94       	cli
    2d52:	de bf       	out	0x3e, r29	; 62
    2d54:	0f be       	out	0x3f, r0	; 63
    2d56:	cd bf       	out	0x3d, r28	; 61
    2d58:	99 8b       	std	Y+17, r25	; 0x11
    2d5a:	88 8b       	std	Y+16, r24	; 0x10
    2d5c:	6a 8b       	std	Y+18, r22	; 0x12
	u8 Local_u8Address = 0;
    2d5e:	1f 86       	std	Y+15, r1	; 0x0f

	/*EEPROM Slave Address*/
	Local_u8Address = ((EEPROM_ADDRESS_MASK)|(EEPROM_A2_ADDRESS<<2)|(u8)(Copy_u16Address>>8));
    2d60:	88 89       	ldd	r24, Y+16	; 0x10
    2d62:	99 89       	ldd	r25, Y+17	; 0x11
    2d64:	89 2f       	mov	r24, r25
    2d66:	99 27       	eor	r25, r25
    2d68:	84 65       	ori	r24, 0x54	; 84
    2d6a:	8f 87       	std	Y+15, r24	; 0x0f

	/*Send Start Condition to Start Communication and Control the Bus*/
	TWI_SendStartCondition();
    2d6c:	0e 94 0e 1a 	call	0x341c	; 0x341c <TWI_SendStartCondition>

	/*Send EEPROM Slave Address with Write*/
	TWI_SendSlaveAddressWithWrite(Local_u8Address);
    2d70:	8f 85       	ldd	r24, Y+15	; 0x0f
    2d72:	0e 94 76 1a 	call	0x34ec	; 0x34ec <TWI_SendSlaveAddressWithWrite>

	/*Send the Byte Location in the EEPROM*/
	TWI_MasterSendData((u8)Copy_u16Address);
    2d76:	88 89       	ldd	r24, Y+16	; 0x10
    2d78:	0e 94 18 1b 	call	0x3630	; 0x3630 <TWI_MasterSendData>

	/*Send Required Data*/
	TWI_MasterSendData(Copy_u8Data);
    2d7c:	8a 89       	ldd	r24, Y+18	; 0x12
    2d7e:	0e 94 18 1b 	call	0x3630	; 0x3630 <TWI_MasterSendData>

	/*Send Stop Condition to Stop Communication and Free the Bus*/
	TWI_SendStopCondition();
    2d82:	0e 94 12 1c 	call	0x3824	; 0x3824 <TWI_SendStopCondition>
    2d86:	80 e0       	ldi	r24, 0x00	; 0
    2d88:	90 e0       	ldi	r25, 0x00	; 0
    2d8a:	a0 ea       	ldi	r26, 0xA0	; 160
    2d8c:	b1 e4       	ldi	r27, 0x41	; 65
    2d8e:	8b 87       	std	Y+11, r24	; 0x0b
    2d90:	9c 87       	std	Y+12, r25	; 0x0c
    2d92:	ad 87       	std	Y+13, r26	; 0x0d
    2d94:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d96:	6b 85       	ldd	r22, Y+11	; 0x0b
    2d98:	7c 85       	ldd	r23, Y+12	; 0x0c
    2d9a:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d9c:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d9e:	20 e0       	ldi	r18, 0x00	; 0
    2da0:	30 e0       	ldi	r19, 0x00	; 0
    2da2:	4a ef       	ldi	r20, 0xFA	; 250
    2da4:	54 e4       	ldi	r21, 0x44	; 68
    2da6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2daa:	dc 01       	movw	r26, r24
    2dac:	cb 01       	movw	r24, r22
    2dae:	8f 83       	std	Y+7, r24	; 0x07
    2db0:	98 87       	std	Y+8, r25	; 0x08
    2db2:	a9 87       	std	Y+9, r26	; 0x09
    2db4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2db6:	6f 81       	ldd	r22, Y+7	; 0x07
    2db8:	78 85       	ldd	r23, Y+8	; 0x08
    2dba:	89 85       	ldd	r24, Y+9	; 0x09
    2dbc:	9a 85       	ldd	r25, Y+10	; 0x0a
    2dbe:	20 e0       	ldi	r18, 0x00	; 0
    2dc0:	30 e0       	ldi	r19, 0x00	; 0
    2dc2:	40 e8       	ldi	r20, 0x80	; 128
    2dc4:	5f e3       	ldi	r21, 0x3F	; 63
    2dc6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2dca:	88 23       	and	r24, r24
    2dcc:	2c f4       	brge	.+10     	; 0x2dd8 <EEPROM_voidSendByte+0x94>
		__ticks = 1;
    2dce:	81 e0       	ldi	r24, 0x01	; 1
    2dd0:	90 e0       	ldi	r25, 0x00	; 0
    2dd2:	9e 83       	std	Y+6, r25	; 0x06
    2dd4:	8d 83       	std	Y+5, r24	; 0x05
    2dd6:	3f c0       	rjmp	.+126    	; 0x2e56 <EEPROM_voidSendByte+0x112>
	else if (__tmp > 65535)
    2dd8:	6f 81       	ldd	r22, Y+7	; 0x07
    2dda:	78 85       	ldd	r23, Y+8	; 0x08
    2ddc:	89 85       	ldd	r24, Y+9	; 0x09
    2dde:	9a 85       	ldd	r25, Y+10	; 0x0a
    2de0:	20 e0       	ldi	r18, 0x00	; 0
    2de2:	3f ef       	ldi	r19, 0xFF	; 255
    2de4:	4f e7       	ldi	r20, 0x7F	; 127
    2de6:	57 e4       	ldi	r21, 0x47	; 71
    2de8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2dec:	18 16       	cp	r1, r24
    2dee:	4c f5       	brge	.+82     	; 0x2e42 <EEPROM_voidSendByte+0xfe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2df0:	6b 85       	ldd	r22, Y+11	; 0x0b
    2df2:	7c 85       	ldd	r23, Y+12	; 0x0c
    2df4:	8d 85       	ldd	r24, Y+13	; 0x0d
    2df6:	9e 85       	ldd	r25, Y+14	; 0x0e
    2df8:	20 e0       	ldi	r18, 0x00	; 0
    2dfa:	30 e0       	ldi	r19, 0x00	; 0
    2dfc:	40 e2       	ldi	r20, 0x20	; 32
    2dfe:	51 e4       	ldi	r21, 0x41	; 65
    2e00:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e04:	dc 01       	movw	r26, r24
    2e06:	cb 01       	movw	r24, r22
    2e08:	bc 01       	movw	r22, r24
    2e0a:	cd 01       	movw	r24, r26
    2e0c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e10:	dc 01       	movw	r26, r24
    2e12:	cb 01       	movw	r24, r22
    2e14:	9e 83       	std	Y+6, r25	; 0x06
    2e16:	8d 83       	std	Y+5, r24	; 0x05
    2e18:	0f c0       	rjmp	.+30     	; 0x2e38 <EEPROM_voidSendByte+0xf4>
    2e1a:	88 ec       	ldi	r24, 0xC8	; 200
    2e1c:	90 e0       	ldi	r25, 0x00	; 0
    2e1e:	9c 83       	std	Y+4, r25	; 0x04
    2e20:	8b 83       	std	Y+3, r24	; 0x03
    2e22:	8b 81       	ldd	r24, Y+3	; 0x03
    2e24:	9c 81       	ldd	r25, Y+4	; 0x04
    2e26:	01 97       	sbiw	r24, 0x01	; 1
    2e28:	f1 f7       	brne	.-4      	; 0x2e26 <EEPROM_voidSendByte+0xe2>
    2e2a:	9c 83       	std	Y+4, r25	; 0x04
    2e2c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e2e:	8d 81       	ldd	r24, Y+5	; 0x05
    2e30:	9e 81       	ldd	r25, Y+6	; 0x06
    2e32:	01 97       	sbiw	r24, 0x01	; 1
    2e34:	9e 83       	std	Y+6, r25	; 0x06
    2e36:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e38:	8d 81       	ldd	r24, Y+5	; 0x05
    2e3a:	9e 81       	ldd	r25, Y+6	; 0x06
    2e3c:	00 97       	sbiw	r24, 0x00	; 0
    2e3e:	69 f7       	brne	.-38     	; 0x2e1a <EEPROM_voidSendByte+0xd6>
    2e40:	14 c0       	rjmp	.+40     	; 0x2e6a <EEPROM_voidSendByte+0x126>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e42:	6f 81       	ldd	r22, Y+7	; 0x07
    2e44:	78 85       	ldd	r23, Y+8	; 0x08
    2e46:	89 85       	ldd	r24, Y+9	; 0x09
    2e48:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e4a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e4e:	dc 01       	movw	r26, r24
    2e50:	cb 01       	movw	r24, r22
    2e52:	9e 83       	std	Y+6, r25	; 0x06
    2e54:	8d 83       	std	Y+5, r24	; 0x05
    2e56:	8d 81       	ldd	r24, Y+5	; 0x05
    2e58:	9e 81       	ldd	r25, Y+6	; 0x06
    2e5a:	9a 83       	std	Y+2, r25	; 0x02
    2e5c:	89 83       	std	Y+1, r24	; 0x01
    2e5e:	89 81       	ldd	r24, Y+1	; 0x01
    2e60:	9a 81       	ldd	r25, Y+2	; 0x02
    2e62:	01 97       	sbiw	r24, 0x01	; 1
    2e64:	f1 f7       	brne	.-4      	; 0x2e62 <EEPROM_voidSendByte+0x11e>
    2e66:	9a 83       	std	Y+2, r25	; 0x02
    2e68:	89 83       	std	Y+1, r24	; 0x01

	/*Delay until the write cycle is finished*/
	_delay_ms(20);
}
    2e6a:	62 96       	adiw	r28, 0x12	; 18
    2e6c:	0f b6       	in	r0, 0x3f	; 63
    2e6e:	f8 94       	cli
    2e70:	de bf       	out	0x3e, r29	; 62
    2e72:	0f be       	out	0x3f, r0	; 63
    2e74:	cd bf       	out	0x3d, r28	; 61
    2e76:	cf 91       	pop	r28
    2e78:	df 91       	pop	r29
    2e7a:	08 95       	ret

00002e7c <EEPROM_voidReceiveStr>:
//
//	return Local_u8Data;
//}

void EEPROM_voidReceiveStr(u16 Copy_u16Address,u8* Copy_u8Str, u8 Copy_strlength)
{
    2e7c:	df 93       	push	r29
    2e7e:	cf 93       	push	r28
    2e80:	cd b7       	in	r28, 0x3d	; 61
    2e82:	de b7       	in	r29, 0x3e	; 62
    2e84:	64 97       	sbiw	r28, 0x14	; 20
    2e86:	0f b6       	in	r0, 0x3f	; 63
    2e88:	f8 94       	cli
    2e8a:	de bf       	out	0x3e, r29	; 62
    2e8c:	0f be       	out	0x3f, r0	; 63
    2e8e:	cd bf       	out	0x3d, r28	; 61
    2e90:	99 8b       	std	Y+17, r25	; 0x11
    2e92:	88 8b       	std	Y+16, r24	; 0x10
    2e94:	7b 8b       	std	Y+19, r23	; 0x13
    2e96:	6a 8b       	std	Y+18, r22	; 0x12
    2e98:	4c 8b       	std	Y+20, r20	; 0x14
	u8 Local_u8Address = 0 ;
    2e9a:	1f 86       	std	Y+15, r1	; 0x0f
	Local_u8Address = ((EEPROM_ADDRESS_MASK)|(EEPROM_A2_ADDRESS<<2)|(u8)(Copy_u16Address>>8));
    2e9c:	88 89       	ldd	r24, Y+16	; 0x10
    2e9e:	99 89       	ldd	r25, Y+17	; 0x11
    2ea0:	89 2f       	mov	r24, r25
    2ea2:	99 27       	eor	r25, r25
    2ea4:	84 65       	ori	r24, 0x54	; 84
    2ea6:	8f 87       	std	Y+15, r24	; 0x0f

	/*Send Start Condition to Start Communication and Control the Bus*/
	TWI_SendStartCondition();
    2ea8:	0e 94 0e 1a 	call	0x341c	; 0x341c <TWI_SendStartCondition>

	/*Send EEPROM Slave Address with Write*/
	TWI_SendSlaveAddressWithWrite(Local_u8Address);
    2eac:	8f 85       	ldd	r24, Y+15	; 0x0f
    2eae:	0e 94 76 1a 	call	0x34ec	; 0x34ec <TWI_SendSlaveAddressWithWrite>

	/*Send the Byte Location in the EEPROM*/
	TWI_MasterSendData((u8)Copy_u16Address);
    2eb2:	88 89       	ldd	r24, Y+16	; 0x10
    2eb4:	0e 94 18 1b 	call	0x3630	; 0x3630 <TWI_MasterSendData>

	/*Send Repeat Start to Change Condition to Read*/
	TWI_SendRepeatedStart();
    2eb8:	0e 94 42 1a 	call	0x3484	; 0x3484 <TWI_SendRepeatedStart>

	/*Send EEPROM Slave Address with Write*/
	TWI_SendSlaveAddressWithRead(Local_u8Address);
    2ebc:	8f 85       	ldd	r24, Y+15	; 0x0f
    2ebe:	0e 94 c7 1a 	call	0x358e	; 0x358e <TWI_SendSlaveAddressWithRead>

	/*Send Required Data*/
	TWI_MasterReceiveStr(Copy_u8Str,Copy_strlength);
    2ec2:	8a 89       	ldd	r24, Y+18	; 0x12
    2ec4:	9b 89       	ldd	r25, Y+19	; 0x13
    2ec6:	6c 89       	ldd	r22, Y+20	; 0x14
    2ec8:	0e 94 9c 1b 	call	0x3738	; 0x3738 <TWI_MasterReceiveStr>

	/*Send Stop Condition to Stop Communication and Free the Bus*/
	TWI_SendStopCondition();
    2ecc:	0e 94 12 1c 	call	0x3824	; 0x3824 <TWI_SendStopCondition>
    2ed0:	80 e0       	ldi	r24, 0x00	; 0
    2ed2:	90 e0       	ldi	r25, 0x00	; 0
    2ed4:	a0 ea       	ldi	r26, 0xA0	; 160
    2ed6:	b1 e4       	ldi	r27, 0x41	; 65
    2ed8:	8b 87       	std	Y+11, r24	; 0x0b
    2eda:	9c 87       	std	Y+12, r25	; 0x0c
    2edc:	ad 87       	std	Y+13, r26	; 0x0d
    2ede:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ee0:	6b 85       	ldd	r22, Y+11	; 0x0b
    2ee2:	7c 85       	ldd	r23, Y+12	; 0x0c
    2ee4:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ee6:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ee8:	20 e0       	ldi	r18, 0x00	; 0
    2eea:	30 e0       	ldi	r19, 0x00	; 0
    2eec:	4a ef       	ldi	r20, 0xFA	; 250
    2eee:	54 e4       	ldi	r21, 0x44	; 68
    2ef0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ef4:	dc 01       	movw	r26, r24
    2ef6:	cb 01       	movw	r24, r22
    2ef8:	8f 83       	std	Y+7, r24	; 0x07
    2efa:	98 87       	std	Y+8, r25	; 0x08
    2efc:	a9 87       	std	Y+9, r26	; 0x09
    2efe:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2f00:	6f 81       	ldd	r22, Y+7	; 0x07
    2f02:	78 85       	ldd	r23, Y+8	; 0x08
    2f04:	89 85       	ldd	r24, Y+9	; 0x09
    2f06:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f08:	20 e0       	ldi	r18, 0x00	; 0
    2f0a:	30 e0       	ldi	r19, 0x00	; 0
    2f0c:	40 e8       	ldi	r20, 0x80	; 128
    2f0e:	5f e3       	ldi	r21, 0x3F	; 63
    2f10:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2f14:	88 23       	and	r24, r24
    2f16:	2c f4       	brge	.+10     	; 0x2f22 <EEPROM_voidReceiveStr+0xa6>
		__ticks = 1;
    2f18:	81 e0       	ldi	r24, 0x01	; 1
    2f1a:	90 e0       	ldi	r25, 0x00	; 0
    2f1c:	9e 83       	std	Y+6, r25	; 0x06
    2f1e:	8d 83       	std	Y+5, r24	; 0x05
    2f20:	3f c0       	rjmp	.+126    	; 0x2fa0 <EEPROM_voidReceiveStr+0x124>
	else if (__tmp > 65535)
    2f22:	6f 81       	ldd	r22, Y+7	; 0x07
    2f24:	78 85       	ldd	r23, Y+8	; 0x08
    2f26:	89 85       	ldd	r24, Y+9	; 0x09
    2f28:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f2a:	20 e0       	ldi	r18, 0x00	; 0
    2f2c:	3f ef       	ldi	r19, 0xFF	; 255
    2f2e:	4f e7       	ldi	r20, 0x7F	; 127
    2f30:	57 e4       	ldi	r21, 0x47	; 71
    2f32:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2f36:	18 16       	cp	r1, r24
    2f38:	4c f5       	brge	.+82     	; 0x2f8c <EEPROM_voidReceiveStr+0x110>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f3a:	6b 85       	ldd	r22, Y+11	; 0x0b
    2f3c:	7c 85       	ldd	r23, Y+12	; 0x0c
    2f3e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f40:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f42:	20 e0       	ldi	r18, 0x00	; 0
    2f44:	30 e0       	ldi	r19, 0x00	; 0
    2f46:	40 e2       	ldi	r20, 0x20	; 32
    2f48:	51 e4       	ldi	r21, 0x41	; 65
    2f4a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f4e:	dc 01       	movw	r26, r24
    2f50:	cb 01       	movw	r24, r22
    2f52:	bc 01       	movw	r22, r24
    2f54:	cd 01       	movw	r24, r26
    2f56:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f5a:	dc 01       	movw	r26, r24
    2f5c:	cb 01       	movw	r24, r22
    2f5e:	9e 83       	std	Y+6, r25	; 0x06
    2f60:	8d 83       	std	Y+5, r24	; 0x05
    2f62:	0f c0       	rjmp	.+30     	; 0x2f82 <EEPROM_voidReceiveStr+0x106>
    2f64:	88 ec       	ldi	r24, 0xC8	; 200
    2f66:	90 e0       	ldi	r25, 0x00	; 0
    2f68:	9c 83       	std	Y+4, r25	; 0x04
    2f6a:	8b 83       	std	Y+3, r24	; 0x03
    2f6c:	8b 81       	ldd	r24, Y+3	; 0x03
    2f6e:	9c 81       	ldd	r25, Y+4	; 0x04
    2f70:	01 97       	sbiw	r24, 0x01	; 1
    2f72:	f1 f7       	brne	.-4      	; 0x2f70 <EEPROM_voidReceiveStr+0xf4>
    2f74:	9c 83       	std	Y+4, r25	; 0x04
    2f76:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f78:	8d 81       	ldd	r24, Y+5	; 0x05
    2f7a:	9e 81       	ldd	r25, Y+6	; 0x06
    2f7c:	01 97       	sbiw	r24, 0x01	; 1
    2f7e:	9e 83       	std	Y+6, r25	; 0x06
    2f80:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f82:	8d 81       	ldd	r24, Y+5	; 0x05
    2f84:	9e 81       	ldd	r25, Y+6	; 0x06
    2f86:	00 97       	sbiw	r24, 0x00	; 0
    2f88:	69 f7       	brne	.-38     	; 0x2f64 <EEPROM_voidReceiveStr+0xe8>
    2f8a:	14 c0       	rjmp	.+40     	; 0x2fb4 <EEPROM_voidReceiveStr+0x138>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f8c:	6f 81       	ldd	r22, Y+7	; 0x07
    2f8e:	78 85       	ldd	r23, Y+8	; 0x08
    2f90:	89 85       	ldd	r24, Y+9	; 0x09
    2f92:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f94:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f98:	dc 01       	movw	r26, r24
    2f9a:	cb 01       	movw	r24, r22
    2f9c:	9e 83       	std	Y+6, r25	; 0x06
    2f9e:	8d 83       	std	Y+5, r24	; 0x05
    2fa0:	8d 81       	ldd	r24, Y+5	; 0x05
    2fa2:	9e 81       	ldd	r25, Y+6	; 0x06
    2fa4:	9a 83       	std	Y+2, r25	; 0x02
    2fa6:	89 83       	std	Y+1, r24	; 0x01
    2fa8:	89 81       	ldd	r24, Y+1	; 0x01
    2faa:	9a 81       	ldd	r25, Y+2	; 0x02
    2fac:	01 97       	sbiw	r24, 0x01	; 1
    2fae:	f1 f7       	brne	.-4      	; 0x2fac <EEPROM_voidReceiveStr+0x130>
    2fb0:	9a 83       	std	Y+2, r25	; 0x02
    2fb2:	89 83       	std	Y+1, r24	; 0x01

	/*Delay until the write cycle is finished*/
	_delay_ms(20);
}
    2fb4:	64 96       	adiw	r28, 0x14	; 20
    2fb6:	0f b6       	in	r0, 0x3f	; 63
    2fb8:	f8 94       	cli
    2fba:	de bf       	out	0x3e, r29	; 62
    2fbc:	0f be       	out	0x3f, r0	; 63
    2fbe:	cd bf       	out	0x3d, r28	; 61
    2fc0:	cf 91       	pop	r28
    2fc2:	df 91       	pop	r29
    2fc4:	08 95       	ret

00002fc6 <EEPROM_voidSendString>:

/*This Function Shall Send String to EEPROM*/
void EEPROM_voidSendString(u16 Copy_u16Address,u8* Copy_u8Str)
{
    2fc6:	df 93       	push	r29
    2fc8:	cf 93       	push	r28
    2fca:	00 d0       	rcall	.+0      	; 0x2fcc <EEPROM_voidSendString+0x6>
    2fcc:	00 d0       	rcall	.+0      	; 0x2fce <EEPROM_voidSendString+0x8>
    2fce:	0f 92       	push	r0
    2fd0:	cd b7       	in	r28, 0x3d	; 61
    2fd2:	de b7       	in	r29, 0x3e	; 62
    2fd4:	9b 83       	std	Y+3, r25	; 0x03
    2fd6:	8a 83       	std	Y+2, r24	; 0x02
    2fd8:	7d 83       	std	Y+5, r23	; 0x05
    2fda:	6c 83       	std	Y+4, r22	; 0x04
	u8 Iterator;
	for(Iterator = 0 ; Copy_u8Str[Iterator]!='\0' ; Iterator++ , Copy_u16Address++)
    2fdc:	19 82       	std	Y+1, r1	; 0x01
    2fde:	16 c0       	rjmp	.+44     	; 0x300c <EEPROM_voidSendString+0x46>
	{
		/*Send Received Char to EEPROM Addess*/
		EEPROM_voidSendByte(Copy_u16Address,Copy_u8Str[Iterator]);
    2fe0:	89 81       	ldd	r24, Y+1	; 0x01
    2fe2:	28 2f       	mov	r18, r24
    2fe4:	30 e0       	ldi	r19, 0x00	; 0
    2fe6:	8c 81       	ldd	r24, Y+4	; 0x04
    2fe8:	9d 81       	ldd	r25, Y+5	; 0x05
    2fea:	fc 01       	movw	r30, r24
    2fec:	e2 0f       	add	r30, r18
    2fee:	f3 1f       	adc	r31, r19
    2ff0:	20 81       	ld	r18, Z
    2ff2:	8a 81       	ldd	r24, Y+2	; 0x02
    2ff4:	9b 81       	ldd	r25, Y+3	; 0x03
    2ff6:	62 2f       	mov	r22, r18
    2ff8:	0e 94 a2 16 	call	0x2d44	; 0x2d44 <EEPROM_voidSendByte>

/*This Function Shall Send String to EEPROM*/
void EEPROM_voidSendString(u16 Copy_u16Address,u8* Copy_u8Str)
{
	u8 Iterator;
	for(Iterator = 0 ; Copy_u8Str[Iterator]!='\0' ; Iterator++ , Copy_u16Address++)
    2ffc:	89 81       	ldd	r24, Y+1	; 0x01
    2ffe:	8f 5f       	subi	r24, 0xFF	; 255
    3000:	89 83       	std	Y+1, r24	; 0x01
    3002:	8a 81       	ldd	r24, Y+2	; 0x02
    3004:	9b 81       	ldd	r25, Y+3	; 0x03
    3006:	01 96       	adiw	r24, 0x01	; 1
    3008:	9b 83       	std	Y+3, r25	; 0x03
    300a:	8a 83       	std	Y+2, r24	; 0x02
    300c:	89 81       	ldd	r24, Y+1	; 0x01
    300e:	28 2f       	mov	r18, r24
    3010:	30 e0       	ldi	r19, 0x00	; 0
    3012:	8c 81       	ldd	r24, Y+4	; 0x04
    3014:	9d 81       	ldd	r25, Y+5	; 0x05
    3016:	fc 01       	movw	r30, r24
    3018:	e2 0f       	add	r30, r18
    301a:	f3 1f       	adc	r31, r19
    301c:	80 81       	ld	r24, Z
    301e:	88 23       	and	r24, r24
    3020:	f9 f6       	brne	.-66     	; 0x2fe0 <EEPROM_voidSendString+0x1a>
		EEPROM_voidSendByte(Copy_u16Address,Copy_u8Str[Iterator]);
	}
	/*Send Null Char to NEXT EEPROM Addess*/
//	EEPROM_voidSendByte(Copy_u16Address,'\0');

}
    3022:	0f 90       	pop	r0
    3024:	0f 90       	pop	r0
    3026:	0f 90       	pop	r0
    3028:	0f 90       	pop	r0
    302a:	0f 90       	pop	r0
    302c:	cf 91       	pop	r28
    302e:	df 91       	pop	r29
    3030:	08 95       	ret

00003032 <GIE_voidEnable>:

#include "GIE_interface.h"
#include "GIE_private.h"

void GIE_voidEnable(void)
{
    3032:	df 93       	push	r29
    3034:	cf 93       	push	r28
    3036:	cd b7       	in	r28, 0x3d	; 61
    3038:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG,SREG_I);
    303a:	2f e5       	ldi	r18, 0x5F	; 95
    303c:	30 e0       	ldi	r19, 0x00	; 0
    303e:	af e5       	ldi	r26, 0x5F	; 95
    3040:	b0 e0       	ldi	r27, 0x00	; 0
    3042:	ef e5       	ldi	r30, 0x5F	; 95
    3044:	f0 e0       	ldi	r31, 0x00	; 0
    3046:	80 81       	ld	r24, Z
    3048:	80 68       	ori	r24, 0x80	; 128
    304a:	8c 93       	st	X, r24
    304c:	8c 91       	ld	r24, X
    304e:	f9 01       	movw	r30, r18
    3050:	80 83       	st	Z, r24
}
    3052:	cf 91       	pop	r28
    3054:	df 91       	pop	r29
    3056:	08 95       	ret

00003058 <GIE_viodDisable>:

void GIE_viodDisable(void)
{
    3058:	df 93       	push	r29
    305a:	cf 93       	push	r28
    305c:	cd b7       	in	r28, 0x3d	; 61
    305e:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG,SREG_I);
    3060:	2f e5       	ldi	r18, 0x5F	; 95
    3062:	30 e0       	ldi	r19, 0x00	; 0
    3064:	af e5       	ldi	r26, 0x5F	; 95
    3066:	b0 e0       	ldi	r27, 0x00	; 0
    3068:	ef e5       	ldi	r30, 0x5F	; 95
    306a:	f0 e0       	ldi	r31, 0x00	; 0
    306c:	80 81       	ld	r24, Z
    306e:	8f 77       	andi	r24, 0x7F	; 127
    3070:	8c 93       	st	X, r24
    3072:	8c 91       	ld	r24, X
    3074:	f9 01       	movw	r30, r18
    3076:	80 83       	st	Z, r24
}
    3078:	cf 91       	pop	r28
    307a:	df 91       	pop	r29
    307c:	08 95       	ret

0000307e <LED_Init>:
#include "LED_config.h"

/**********************************************************/

void LED_Init(u8 Copy_u8Port, u8 Copy_u8Pin)
{
    307e:	df 93       	push	r29
    3080:	cf 93       	push	r28
    3082:	00 d0       	rcall	.+0      	; 0x3084 <LED_Init+0x6>
    3084:	cd b7       	in	r28, 0x3d	; 61
    3086:	de b7       	in	r29, 0x3e	; 62
    3088:	89 83       	std	Y+1, r24	; 0x01
    308a:	6a 83       	std	Y+2, r22	; 0x02
	DIO_u8SetPinDirection(Copy_u8Port, Copy_u8Pin, DIO_u8PIN_OUTPUT);
    308c:	89 81       	ldd	r24, Y+1	; 0x01
    308e:	6a 81       	ldd	r22, Y+2	; 0x02
    3090:	41 e0       	ldi	r20, 0x01	; 1
    3092:	0e 94 a1 10 	call	0x2142	; 0x2142 <DIO_u8SetPinDirection>
}
    3096:	0f 90       	pop	r0
    3098:	0f 90       	pop	r0
    309a:	cf 91       	pop	r28
    309c:	df 91       	pop	r29
    309e:	08 95       	ret

000030a0 <LED_ON>:

void LED_ON(u8 Copy_u8Port, u8 Copy_u8Pin)
{
    30a0:	df 93       	push	r29
    30a2:	cf 93       	push	r28
    30a4:	00 d0       	rcall	.+0      	; 0x30a6 <LED_ON+0x6>
    30a6:	cd b7       	in	r28, 0x3d	; 61
    30a8:	de b7       	in	r29, 0x3e	; 62
    30aa:	89 83       	std	Y+1, r24	; 0x01
    30ac:	6a 83       	std	Y+2, r22	; 0x02
	DIO_u8SetPinValue(Copy_u8Port, Copy_u8Pin, DIO_u8PIN_HIGH);
    30ae:	89 81       	ldd	r24, Y+1	; 0x01
    30b0:	6a 81       	ldd	r22, Y+2	; 0x02
    30b2:	41 e0       	ldi	r20, 0x01	; 1
    30b4:	0e 94 26 12 	call	0x244c	; 0x244c <DIO_u8SetPinValue>
}
    30b8:	0f 90       	pop	r0
    30ba:	0f 90       	pop	r0
    30bc:	cf 91       	pop	r28
    30be:	df 91       	pop	r29
    30c0:	08 95       	ret

000030c2 <LED_OFF>:

void LED_OFF(u8 Copy_u8Port, u8 Copy_u8Pin)
{
    30c2:	df 93       	push	r29
    30c4:	cf 93       	push	r28
    30c6:	00 d0       	rcall	.+0      	; 0x30c8 <LED_OFF+0x6>
    30c8:	cd b7       	in	r28, 0x3d	; 61
    30ca:	de b7       	in	r29, 0x3e	; 62
    30cc:	89 83       	std	Y+1, r24	; 0x01
    30ce:	6a 83       	std	Y+2, r22	; 0x02
	DIO_u8SetPinValue(Copy_u8Port, Copy_u8Pin, DIO_u8PIN_LOW);
    30d0:	89 81       	ldd	r24, Y+1	; 0x01
    30d2:	6a 81       	ldd	r22, Y+2	; 0x02
    30d4:	40 e0       	ldi	r20, 0x00	; 0
    30d6:	0e 94 26 12 	call	0x244c	; 0x244c <DIO_u8SetPinValue>
}
    30da:	0f 90       	pop	r0
    30dc:	0f 90       	pop	r0
    30de:	cf 91       	pop	r28
    30e0:	df 91       	pop	r29
    30e2:	08 95       	ret

000030e4 <LED_Toggle>:

void LED_Toggle(u8 Copy_u8Port, u8 Copy_u8Pin)
{
    30e4:	df 93       	push	r29
    30e6:	cf 93       	push	r28
    30e8:	00 d0       	rcall	.+0      	; 0x30ea <LED_Toggle+0x6>
    30ea:	cd b7       	in	r28, 0x3d	; 61
    30ec:	de b7       	in	r29, 0x3e	; 62
    30ee:	89 83       	std	Y+1, r24	; 0x01
    30f0:	6a 83       	std	Y+2, r22	; 0x02
	DIO_u8ToggleBit(Copy_u8Port, Copy_u8Pin);
    30f2:	89 81       	ldd	r24, Y+1	; 0x01
    30f4:	6a 81       	ldd	r22, Y+2	; 0x02
    30f6:	0e 94 29 14 	call	0x2852	; 0x2852 <DIO_u8ToggleBit>
}
    30fa:	0f 90       	pop	r0
    30fc:	0f 90       	pop	r0
    30fe:	cf 91       	pop	r28
    3100:	df 91       	pop	r29
    3102:	08 95       	ret

00003104 <PWM_voidProducePWM>:
#include "PWM_private.h"
#include "PWM_config.h"


void PWM_voidProducePWM(u8 Copy_u8Channel, u16 Copy_u16Frequency)
{
    3104:	df 93       	push	r29
    3106:	cf 93       	push	r28
    3108:	00 d0       	rcall	.+0      	; 0x310a <PWM_voidProducePWM+0x6>
    310a:	0f 92       	push	r0
    310c:	cd b7       	in	r28, 0x3d	; 61
    310e:	de b7       	in	r29, 0x3e	; 62
    3110:	89 83       	std	Y+1, r24	; 0x01
    3112:	7b 83       	std	Y+3, r23	; 0x03
    3114:	6a 83       	std	Y+2, r22	; 0x02
	/*Set Channel*/
	if(Copy_u8Channel == CHANNEL_A)
    3116:	89 81       	ldd	r24, Y+1	; 0x01
    3118:	81 30       	cpi	r24, 0x01	; 1
    311a:	c9 f4       	brne	.+50     	; 0x314e <PWM_voidProducePWM+0x4a>
	{
		CLR_BIT(TCCR1A, TCCR1A_COM1A0);
    311c:	2f e4       	ldi	r18, 0x4F	; 79
    311e:	30 e0       	ldi	r19, 0x00	; 0
    3120:	af e4       	ldi	r26, 0x4F	; 79
    3122:	b0 e0       	ldi	r27, 0x00	; 0
    3124:	ef e4       	ldi	r30, 0x4F	; 79
    3126:	f0 e0       	ldi	r31, 0x00	; 0
    3128:	80 81       	ld	r24, Z
    312a:	8f 7b       	andi	r24, 0xBF	; 191
    312c:	8c 93       	st	X, r24
    312e:	8c 91       	ld	r24, X
    3130:	f9 01       	movw	r30, r18
    3132:	80 83       	st	Z, r24
		SET_BIT(TCCR1A, TCCR1A_COM1A1);
    3134:	2f e4       	ldi	r18, 0x4F	; 79
    3136:	30 e0       	ldi	r19, 0x00	; 0
    3138:	af e4       	ldi	r26, 0x4F	; 79
    313a:	b0 e0       	ldi	r27, 0x00	; 0
    313c:	ef e4       	ldi	r30, 0x4F	; 79
    313e:	f0 e0       	ldi	r31, 0x00	; 0
    3140:	80 81       	ld	r24, Z
    3142:	80 68       	ori	r24, 0x80	; 128
    3144:	8c 93       	st	X, r24
    3146:	8c 91       	ld	r24, X
    3148:	f9 01       	movw	r30, r18
    314a:	80 83       	st	Z, r24
    314c:	1b c0       	rjmp	.+54     	; 0x3184 <PWM_voidProducePWM+0x80>
	}
	else if(Copy_u8Channel == CHANNEL_B)
    314e:	89 81       	ldd	r24, Y+1	; 0x01
    3150:	82 30       	cpi	r24, 0x02	; 2
    3152:	c1 f4       	brne	.+48     	; 0x3184 <PWM_voidProducePWM+0x80>
	{
		CLR_BIT(TCCR1A, TCCR1A_COM1B0);
    3154:	2f e4       	ldi	r18, 0x4F	; 79
    3156:	30 e0       	ldi	r19, 0x00	; 0
    3158:	af e4       	ldi	r26, 0x4F	; 79
    315a:	b0 e0       	ldi	r27, 0x00	; 0
    315c:	ef e4       	ldi	r30, 0x4F	; 79
    315e:	f0 e0       	ldi	r31, 0x00	; 0
    3160:	80 81       	ld	r24, Z
    3162:	8f 7e       	andi	r24, 0xEF	; 239
    3164:	8c 93       	st	X, r24
    3166:	8c 91       	ld	r24, X
    3168:	f9 01       	movw	r30, r18
    316a:	80 83       	st	Z, r24
		SET_BIT(TCCR1A, TCCR1A_COM1B1);
    316c:	2f e4       	ldi	r18, 0x4F	; 79
    316e:	30 e0       	ldi	r19, 0x00	; 0
    3170:	af e4       	ldi	r26, 0x4F	; 79
    3172:	b0 e0       	ldi	r27, 0x00	; 0
    3174:	ef e4       	ldi	r30, 0x4F	; 79
    3176:	f0 e0       	ldi	r31, 0x00	; 0
    3178:	80 81       	ld	r24, Z
    317a:	80 62       	ori	r24, 0x20	; 32
    317c:	8c 93       	st	X, r24
    317e:	8c 91       	ld	r24, X
    3180:	f9 01       	movw	r30, r18
    3182:	80 83       	st	Z, r24
	}

	/*Set timer1 to FAST_PWM mode*/
	CLR_BIT(TCCR1A, TCCR1A_WGM10);
    3184:	2f e4       	ldi	r18, 0x4F	; 79
    3186:	30 e0       	ldi	r19, 0x00	; 0
    3188:	af e4       	ldi	r26, 0x4F	; 79
    318a:	b0 e0       	ldi	r27, 0x00	; 0
    318c:	ef e4       	ldi	r30, 0x4F	; 79
    318e:	f0 e0       	ldi	r31, 0x00	; 0
    3190:	80 81       	ld	r24, Z
    3192:	8e 7f       	andi	r24, 0xFE	; 254
    3194:	8c 93       	st	X, r24
    3196:	8c 91       	ld	r24, X
    3198:	f9 01       	movw	r30, r18
    319a:	80 83       	st	Z, r24
	SET_BIT(TCCR1A, TCCR1A_WGM11);
    319c:	2f e4       	ldi	r18, 0x4F	; 79
    319e:	30 e0       	ldi	r19, 0x00	; 0
    31a0:	af e4       	ldi	r26, 0x4F	; 79
    31a2:	b0 e0       	ldi	r27, 0x00	; 0
    31a4:	ef e4       	ldi	r30, 0x4F	; 79
    31a6:	f0 e0       	ldi	r31, 0x00	; 0
    31a8:	80 81       	ld	r24, Z
    31aa:	82 60       	ori	r24, 0x02	; 2
    31ac:	8c 93       	st	X, r24
    31ae:	8c 91       	ld	r24, X
    31b0:	f9 01       	movw	r30, r18
    31b2:	80 83       	st	Z, r24
	SET_BIT(TCCR1B, TCCR1B_WGM12);
    31b4:	2e e4       	ldi	r18, 0x4E	; 78
    31b6:	30 e0       	ldi	r19, 0x00	; 0
    31b8:	ae e4       	ldi	r26, 0x4E	; 78
    31ba:	b0 e0       	ldi	r27, 0x00	; 0
    31bc:	ee e4       	ldi	r30, 0x4E	; 78
    31be:	f0 e0       	ldi	r31, 0x00	; 0
    31c0:	80 81       	ld	r24, Z
    31c2:	88 60       	ori	r24, 0x08	; 8
    31c4:	8c 93       	st	X, r24
    31c6:	8c 91       	ld	r24, X
    31c8:	f9 01       	movw	r30, r18
    31ca:	80 83       	st	Z, r24
	SET_BIT(TCCR1B, TCCR1B_WGM13);
    31cc:	2e e4       	ldi	r18, 0x4E	; 78
    31ce:	30 e0       	ldi	r19, 0x00	; 0
    31d0:	ae e4       	ldi	r26, 0x4E	; 78
    31d2:	b0 e0       	ldi	r27, 0x00	; 0
    31d4:	ee e4       	ldi	r30, 0x4E	; 78
    31d6:	f0 e0       	ldi	r31, 0x00	; 0
    31d8:	80 81       	ld	r24, Z
    31da:	80 61       	ori	r24, 0x10	; 16
    31dc:	8c 93       	st	X, r24
    31de:	8c 91       	ld	r24, X
    31e0:	f9 01       	movw	r30, r18
    31e2:	80 83       	st	Z, r24

	/*set the TOP value*/
	ICR1 = Copy_u16Frequency;
    31e4:	e6 e4       	ldi	r30, 0x46	; 70
    31e6:	f0 e0       	ldi	r31, 0x00	; 0
    31e8:	8a 81       	ldd	r24, Y+2	; 0x02
    31ea:	9b 81       	ldd	r25, Y+3	; 0x03
    31ec:	91 83       	std	Z+1, r25	; 0x01
    31ee:	80 83       	st	Z, r24

	/*set prescaler*/
	TCCR1B &= PRESCALER_MASK;
    31f0:	ae e4       	ldi	r26, 0x4E	; 78
    31f2:	b0 e0       	ldi	r27, 0x00	; 0
    31f4:	ee e4       	ldi	r30, 0x4E	; 78
    31f6:	f0 e0       	ldi	r31, 0x00	; 0
    31f8:	80 81       	ld	r24, Z
    31fa:	88 7f       	andi	r24, 0xF8	; 248
    31fc:	8c 93       	st	X, r24
	TCCR1B |= DIVIDE_BY_8;
    31fe:	ae e4       	ldi	r26, 0x4E	; 78
    3200:	b0 e0       	ldi	r27, 0x00	; 0
    3202:	ee e4       	ldi	r30, 0x4E	; 78
    3204:	f0 e0       	ldi	r31, 0x00	; 0
    3206:	80 81       	ld	r24, Z
    3208:	82 60       	ori	r24, 0x02	; 2
    320a:	8c 93       	st	X, r24
}
    320c:	0f 90       	pop	r0
    320e:	0f 90       	pop	r0
    3210:	0f 90       	pop	r0
    3212:	cf 91       	pop	r28
    3214:	df 91       	pop	r29
    3216:	08 95       	ret

00003218 <PWM_voidSetDutyCycle>:

void PWM_voidSetDutyCycle(u8 Copy_u8DutyCycle, u16 Copy_u16Frequency)
{
    3218:	cf 92       	push	r12
    321a:	df 92       	push	r13
    321c:	ef 92       	push	r14
    321e:	ff 92       	push	r15
    3220:	0f 93       	push	r16
    3222:	1f 93       	push	r17
    3224:	df 93       	push	r29
    3226:	cf 93       	push	r28
    3228:	00 d0       	rcall	.+0      	; 0x322a <PWM_voidSetDutyCycle+0x12>
    322a:	0f 92       	push	r0
    322c:	cd b7       	in	r28, 0x3d	; 61
    322e:	de b7       	in	r29, 0x3e	; 62
    3230:	89 83       	std	Y+1, r24	; 0x01
    3232:	7b 83       	std	Y+3, r23	; 0x03
    3234:	6a 83       	std	Y+2, r22	; 0x02
	OCR1A = (((u32)Copy_u8DutyCycle * Copy_u16Frequency) / 100);
    3236:	0f 2e       	mov	r0, r31
    3238:	fa e4       	ldi	r31, 0x4A	; 74
    323a:	cf 2e       	mov	r12, r31
    323c:	dd 24       	eor	r13, r13
    323e:	f0 2d       	mov	r31, r0
    3240:	89 81       	ldd	r24, Y+1	; 0x01
    3242:	e8 2e       	mov	r14, r24
    3244:	ff 24       	eor	r15, r15
    3246:	00 e0       	ldi	r16, 0x00	; 0
    3248:	10 e0       	ldi	r17, 0x00	; 0
    324a:	8a 81       	ldd	r24, Y+2	; 0x02
    324c:	9b 81       	ldd	r25, Y+3	; 0x03
    324e:	9c 01       	movw	r18, r24
    3250:	40 e0       	ldi	r20, 0x00	; 0
    3252:	50 e0       	ldi	r21, 0x00	; 0
    3254:	c8 01       	movw	r24, r16
    3256:	b7 01       	movw	r22, r14
    3258:	0e 94 8c 27 	call	0x4f18	; 0x4f18 <__mulsi3>
    325c:	dc 01       	movw	r26, r24
    325e:	cb 01       	movw	r24, r22
    3260:	24 e6       	ldi	r18, 0x64	; 100
    3262:	30 e0       	ldi	r19, 0x00	; 0
    3264:	40 e0       	ldi	r20, 0x00	; 0
    3266:	50 e0       	ldi	r21, 0x00	; 0
    3268:	bc 01       	movw	r22, r24
    326a:	cd 01       	movw	r24, r26
    326c:	0e 94 cb 27 	call	0x4f96	; 0x4f96 <__udivmodsi4>
    3270:	da 01       	movw	r26, r20
    3272:	c9 01       	movw	r24, r18
    3274:	f6 01       	movw	r30, r12
    3276:	91 83       	std	Z+1, r25	; 0x01
    3278:	80 83       	st	Z, r24
}
    327a:	0f 90       	pop	r0
    327c:	0f 90       	pop	r0
    327e:	0f 90       	pop	r0
    3280:	cf 91       	pop	r28
    3282:	df 91       	pop	r29
    3284:	1f 91       	pop	r17
    3286:	0f 91       	pop	r16
    3288:	ff 90       	pop	r15
    328a:	ef 90       	pop	r14
    328c:	df 90       	pop	r13
    328e:	cf 90       	pop	r12
    3290:	08 95       	ret

00003292 <PWM_voidSetDutyCycleRange0_180>:

void PWM_voidSetDutyCycleRange0_180(u16 Copy_u8Angle, u16 Copy_u16Frequency)
{
    3292:	ef 92       	push	r14
    3294:	ff 92       	push	r15
    3296:	0f 93       	push	r16
    3298:	1f 93       	push	r17
    329a:	df 93       	push	r29
    329c:	cf 93       	push	r28
    329e:	00 d0       	rcall	.+0      	; 0x32a0 <PWM_voidSetDutyCycleRange0_180+0xe>
    32a0:	00 d0       	rcall	.+0      	; 0x32a2 <PWM_voidSetDutyCycleRange0_180+0x10>
    32a2:	0f 92       	push	r0
    32a4:	cd b7       	in	r28, 0x3d	; 61
    32a6:	de b7       	in	r29, 0x3e	; 62
    32a8:	9b 83       	std	Y+3, r25	; 0x03
    32aa:	8a 83       	std	Y+2, r24	; 0x02
    32ac:	7d 83       	std	Y+5, r23	; 0x05
    32ae:	6c 83       	std	Y+4, r22	; 0x04
	/*mapping OCR1A value from (0-100) to (0-180)*/
	u8 OCR1A_deg = ((((u32)Copy_u8Angle * 200) / 180) * Copy_u16Frequency);
    32b0:	8a 81       	ldd	r24, Y+2	; 0x02
    32b2:	9b 81       	ldd	r25, Y+3	; 0x03
    32b4:	cc 01       	movw	r24, r24
    32b6:	a0 e0       	ldi	r26, 0x00	; 0
    32b8:	b0 e0       	ldi	r27, 0x00	; 0
    32ba:	28 ec       	ldi	r18, 0xC8	; 200
    32bc:	30 e0       	ldi	r19, 0x00	; 0
    32be:	40 e0       	ldi	r20, 0x00	; 0
    32c0:	50 e0       	ldi	r21, 0x00	; 0
    32c2:	bc 01       	movw	r22, r24
    32c4:	cd 01       	movw	r24, r26
    32c6:	0e 94 8c 27 	call	0x4f18	; 0x4f18 <__mulsi3>
    32ca:	dc 01       	movw	r26, r24
    32cc:	cb 01       	movw	r24, r22
    32ce:	24 eb       	ldi	r18, 0xB4	; 180
    32d0:	30 e0       	ldi	r19, 0x00	; 0
    32d2:	40 e0       	ldi	r20, 0x00	; 0
    32d4:	50 e0       	ldi	r21, 0x00	; 0
    32d6:	bc 01       	movw	r22, r24
    32d8:	cd 01       	movw	r24, r26
    32da:	0e 94 cb 27 	call	0x4f96	; 0x4f96 <__udivmodsi4>
    32de:	da 01       	movw	r26, r20
    32e0:	c9 01       	movw	r24, r18
    32e2:	7c 01       	movw	r14, r24
    32e4:	8d 01       	movw	r16, r26
    32e6:	8c 81       	ldd	r24, Y+4	; 0x04
    32e8:	9d 81       	ldd	r25, Y+5	; 0x05
    32ea:	9c 01       	movw	r18, r24
    32ec:	40 e0       	ldi	r20, 0x00	; 0
    32ee:	50 e0       	ldi	r21, 0x00	; 0
    32f0:	c8 01       	movw	r24, r16
    32f2:	b7 01       	movw	r22, r14
    32f4:	0e 94 8c 27 	call	0x4f18	; 0x4f18 <__mulsi3>
    32f8:	dc 01       	movw	r26, r24
    32fa:	cb 01       	movw	r24, r22
    32fc:	89 83       	std	Y+1, r24	; 0x01

	/*mapping from (0-180) to (750-2500)*/
	OCR1A = (((u32)OCR1A_deg * 10) + 750);
    32fe:	0a e4       	ldi	r16, 0x4A	; 74
    3300:	10 e0       	ldi	r17, 0x00	; 0
    3302:	89 81       	ldd	r24, Y+1	; 0x01
    3304:	88 2f       	mov	r24, r24
    3306:	90 e0       	ldi	r25, 0x00	; 0
    3308:	a0 e0       	ldi	r26, 0x00	; 0
    330a:	b0 e0       	ldi	r27, 0x00	; 0
    330c:	2a e0       	ldi	r18, 0x0A	; 10
    330e:	30 e0       	ldi	r19, 0x00	; 0
    3310:	40 e0       	ldi	r20, 0x00	; 0
    3312:	50 e0       	ldi	r21, 0x00	; 0
    3314:	bc 01       	movw	r22, r24
    3316:	cd 01       	movw	r24, r26
    3318:	0e 94 8c 27 	call	0x4f18	; 0x4f18 <__mulsi3>
    331c:	dc 01       	movw	r26, r24
    331e:	cb 01       	movw	r24, r22
    3320:	82 51       	subi	r24, 0x12	; 18
    3322:	9d 4f       	sbci	r25, 0xFD	; 253
    3324:	f8 01       	movw	r30, r16
    3326:	91 83       	std	Z+1, r25	; 0x01
    3328:	80 83       	st	Z, r24
}
    332a:	0f 90       	pop	r0
    332c:	0f 90       	pop	r0
    332e:	0f 90       	pop	r0
    3330:	0f 90       	pop	r0
    3332:	0f 90       	pop	r0
    3334:	cf 91       	pop	r28
    3336:	df 91       	pop	r29
    3338:	1f 91       	pop	r17
    333a:	0f 91       	pop	r16
    333c:	ff 90       	pop	r15
    333e:	ef 90       	pop	r14
    3340:	08 95       	ret

00003342 <TWI_voidMasterInitialize>:
//	/*Enable TWI*/
//	SET_BIT(TWCR,TWCR_TWEN);
//}

void TWI_voidMasterInitialize(u8 Copy_u8SlaveAddress)
{
    3342:	df 93       	push	r29
    3344:	cf 93       	push	r28
    3346:	0f 92       	push	r0
    3348:	cd b7       	in	r28, 0x3d	; 61
    334a:	de b7       	in	r29, 0x3e	; 62
    334c:	89 83       	std	Y+1, r24	; 0x01
	/*Check if user want to set an Address
	 *for the master or not*/
	if(Copy_u8SlaveAddress != 0)
    334e:	89 81       	ldd	r24, Y+1	; 0x01
    3350:	88 23       	and	r24, r24
    3352:	29 f0       	breq	.+10     	; 0x335e <TWI_voidMasterInitialize+0x1c>
	{
		/*Assign the Node Address in the 7 MSB of TWAR*/
		TWAR = (Copy_u8SlaveAddress<<1);
    3354:	e2 e2       	ldi	r30, 0x22	; 34
    3356:	f0 e0       	ldi	r31, 0x00	; 0
    3358:	89 81       	ldd	r24, Y+1	; 0x01
    335a:	88 0f       	add	r24, r24
    335c:	80 83       	st	Z, r24
	}

	/*Enable Acknowledge bit*/
	CLR_BIT(TWCR,TWCR_TWEA);
    335e:	26 e5       	ldi	r18, 0x56	; 86
    3360:	30 e0       	ldi	r19, 0x00	; 0
    3362:	a6 e5       	ldi	r26, 0x56	; 86
    3364:	b0 e0       	ldi	r27, 0x00	; 0
    3366:	e6 e5       	ldi	r30, 0x56	; 86
    3368:	f0 e0       	ldi	r31, 0x00	; 0
    336a:	80 81       	ld	r24, Z
    336c:	8f 7b       	andi	r24, 0xBF	; 191
    336e:	8c 93       	st	X, r24
    3370:	8c 91       	ld	r24, X
    3372:	f9 01       	movw	r30, r18
    3374:	80 83       	st	Z, r24

	/*Assume the TWBR to be 0*/
	CLR_BIT(TWSR,TWSR_TWPS0);
    3376:	21 e2       	ldi	r18, 0x21	; 33
    3378:	30 e0       	ldi	r19, 0x00	; 0
    337a:	a1 e2       	ldi	r26, 0x21	; 33
    337c:	b0 e0       	ldi	r27, 0x00	; 0
    337e:	e1 e2       	ldi	r30, 0x21	; 33
    3380:	f0 e0       	ldi	r31, 0x00	; 0
    3382:	80 81       	ld	r24, Z
    3384:	8e 7f       	andi	r24, 0xFE	; 254
    3386:	8c 93       	st	X, r24
    3388:	8c 91       	ld	r24, X
    338a:	f9 01       	movw	r30, r18
    338c:	80 83       	st	Z, r24
	CLR_BIT(TWSR,TWSR_TWPS1);
    338e:	21 e2       	ldi	r18, 0x21	; 33
    3390:	30 e0       	ldi	r19, 0x00	; 0
    3392:	a1 e2       	ldi	r26, 0x21	; 33
    3394:	b0 e0       	ldi	r27, 0x00	; 0
    3396:	e1 e2       	ldi	r30, 0x21	; 33
    3398:	f0 e0       	ldi	r31, 0x00	; 0
    339a:	80 81       	ld	r24, Z
    339c:	8d 7f       	andi	r24, 0xFD	; 253
    339e:	8c 93       	st	X, r24
    33a0:	8c 91       	ld	r24, X
    33a2:	f9 01       	movw	r30, r18
    33a4:	80 83       	st	Z, r24

	/*Set Clock Frequency to 400Kbps*/
	/*Set TWBR to be 2 According to Provided Equation*/
	TWBR = 2;
    33a6:	e0 e2       	ldi	r30, 0x20	; 32
    33a8:	f0 e0       	ldi	r31, 0x00	; 0
    33aa:	82 e0       	ldi	r24, 0x02	; 2
    33ac:	80 83       	st	Z, r24

	/*Enable TWI*/
	SET_BIT(TWCR,TWCR_TWEN);
    33ae:	26 e5       	ldi	r18, 0x56	; 86
    33b0:	30 e0       	ldi	r19, 0x00	; 0
    33b2:	a6 e5       	ldi	r26, 0x56	; 86
    33b4:	b0 e0       	ldi	r27, 0x00	; 0
    33b6:	e6 e5       	ldi	r30, 0x56	; 86
    33b8:	f0 e0       	ldi	r31, 0x00	; 0
    33ba:	80 81       	ld	r24, Z
    33bc:	84 60       	ori	r24, 0x04	; 4
    33be:	8c 93       	st	X, r24
    33c0:	8c 91       	ld	r24, X
    33c2:	f9 01       	movw	r30, r18
    33c4:	80 83       	st	Z, r24
}
    33c6:	0f 90       	pop	r0
    33c8:	cf 91       	pop	r28
    33ca:	df 91       	pop	r29
    33cc:	08 95       	ret

000033ce <TWI_voidSlaveInit>:

void TWI_voidSlaveInit(u8 Copy_u8SlaveAddress)
{
    33ce:	df 93       	push	r29
    33d0:	cf 93       	push	r28
    33d2:	0f 92       	push	r0
    33d4:	cd b7       	in	r28, 0x3d	; 61
    33d6:	de b7       	in	r29, 0x3e	; 62
    33d8:	89 83       	std	Y+1, r24	; 0x01
	/*Assign the Node Address in the 7 MSB of TWAR*/
	TWAR = (Copy_u8SlaveAddress<<1);
    33da:	e2 e2       	ldi	r30, 0x22	; 34
    33dc:	f0 e0       	ldi	r31, 0x00	; 0
    33de:	89 81       	ldd	r24, Y+1	; 0x01
    33e0:	88 0f       	add	r24, r24
    33e2:	80 83       	st	Z, r24

	/*Enable Acknowledge bit*/
	SET_BIT(TWCR,TWCR_TWEA);
    33e4:	26 e5       	ldi	r18, 0x56	; 86
    33e6:	30 e0       	ldi	r19, 0x00	; 0
    33e8:	a6 e5       	ldi	r26, 0x56	; 86
    33ea:	b0 e0       	ldi	r27, 0x00	; 0
    33ec:	e6 e5       	ldi	r30, 0x56	; 86
    33ee:	f0 e0       	ldi	r31, 0x00	; 0
    33f0:	80 81       	ld	r24, Z
    33f2:	80 64       	ori	r24, 0x40	; 64
    33f4:	8c 93       	st	X, r24
    33f6:	8c 91       	ld	r24, X
    33f8:	f9 01       	movw	r30, r18
    33fa:	80 83       	st	Z, r24

	/*Enable TWI*/
	SET_BIT(TWCR,TWCR_TWEN);
    33fc:	26 e5       	ldi	r18, 0x56	; 86
    33fe:	30 e0       	ldi	r19, 0x00	; 0
    3400:	a6 e5       	ldi	r26, 0x56	; 86
    3402:	b0 e0       	ldi	r27, 0x00	; 0
    3404:	e6 e5       	ldi	r30, 0x56	; 86
    3406:	f0 e0       	ldi	r31, 0x00	; 0
    3408:	80 81       	ld	r24, Z
    340a:	84 60       	ori	r24, 0x04	; 4
    340c:	8c 93       	st	X, r24
    340e:	8c 91       	ld	r24, X
    3410:	f9 01       	movw	r30, r18
    3412:	80 83       	st	Z, r24
}
    3414:	0f 90       	pop	r0
    3416:	cf 91       	pop	r28
    3418:	df 91       	pop	r29
    341a:	08 95       	ret

0000341c <TWI_SendStartCondition>:

TWI_ErrorState TWI_SendStartCondition(void)
{
    341c:	df 93       	push	r29
    341e:	cf 93       	push	r28
    3420:	0f 92       	push	r0
    3422:	cd b7       	in	r28, 0x3d	; 61
    3424:	de b7       	in	r29, 0x3e	; 62
	TWI_ErrorState Local_ErrorState = NoError;
    3426:	19 82       	std	Y+1, r1	; 0x01

	/*Send Start Condition*/
	SET_BIT(TWCR,TWCR_TWSTA);
    3428:	26 e5       	ldi	r18, 0x56	; 86
    342a:	30 e0       	ldi	r19, 0x00	; 0
    342c:	a6 e5       	ldi	r26, 0x56	; 86
    342e:	b0 e0       	ldi	r27, 0x00	; 0
    3430:	e6 e5       	ldi	r30, 0x56	; 86
    3432:	f0 e0       	ldi	r31, 0x00	; 0
    3434:	80 81       	ld	r24, Z
    3436:	80 62       	ori	r24, 0x20	; 32
    3438:	8c 93       	st	X, r24
    343a:	8c 91       	ld	r24, X
    343c:	f9 01       	movw	r30, r18
    343e:	80 83       	st	Z, r24

	/*Clear The Interrupt Flag to operate the Command*/
	SET_BIT(TWCR,TWCR_TWINT);
    3440:	26 e5       	ldi	r18, 0x56	; 86
    3442:	30 e0       	ldi	r19, 0x00	; 0
    3444:	a6 e5       	ldi	r26, 0x56	; 86
    3446:	b0 e0       	ldi	r27, 0x00	; 0
    3448:	e6 e5       	ldi	r30, 0x56	; 86
    344a:	f0 e0       	ldi	r31, 0x00	; 0
    344c:	80 81       	ld	r24, Z
    344e:	80 68       	ori	r24, 0x80	; 128
    3450:	8c 93       	st	X, r24
    3452:	8c 91       	ld	r24, X
    3454:	f9 01       	movw	r30, r18
    3456:	80 83       	st	Z, r24

	/*Polling till the Interrupt flag is raised
	 *Command is Executed*/
	while(!GET_BIT(TWCR,TWCR_TWINT));
    3458:	e6 e5       	ldi	r30, 0x56	; 86
    345a:	f0 e0       	ldi	r31, 0x00	; 0
    345c:	80 81       	ld	r24, Z
    345e:	88 23       	and	r24, r24
    3460:	dc f7       	brge	.-10     	; 0x3458 <TWI_SendStartCondition+0x3c>

	/*Check 5 MSB in TWSR for Error*/
	if((TWSR & 0xF8) != START_ACK)
    3462:	e1 e2       	ldi	r30, 0x21	; 33
    3464:	f0 e0       	ldi	r31, 0x00	; 0
    3466:	80 81       	ld	r24, Z
    3468:	88 2f       	mov	r24, r24
    346a:	90 e0       	ldi	r25, 0x00	; 0
    346c:	88 7f       	andi	r24, 0xF8	; 248
    346e:	90 70       	andi	r25, 0x00	; 0
    3470:	88 30       	cpi	r24, 0x08	; 8
    3472:	91 05       	cpc	r25, r1
    3474:	11 f0       	breq	.+4      	; 0x347a <TWI_SendStartCondition+0x5e>
	{
		Local_ErrorState = StartConditionError;
    3476:	81 e0       	ldi	r24, 0x01	; 1
    3478:	89 83       	std	Y+1, r24	; 0x01
	}
	else{/*Do Nothing*/}

	return Local_ErrorState;
    347a:	89 81       	ldd	r24, Y+1	; 0x01
}
    347c:	0f 90       	pop	r0
    347e:	cf 91       	pop	r28
    3480:	df 91       	pop	r29
    3482:	08 95       	ret

00003484 <TWI_SendRepeatedStart>:

TWI_ErrorState TWI_SendRepeatedStart(void)
{
    3484:	df 93       	push	r29
    3486:	cf 93       	push	r28
    3488:	0f 92       	push	r0
    348a:	cd b7       	in	r28, 0x3d	; 61
    348c:	de b7       	in	r29, 0x3e	; 62
	TWI_ErrorState Local_ErrorState = NoError;
    348e:	19 82       	std	Y+1, r1	; 0x01

	/*Send Start Condition*/
	SET_BIT(TWCR,TWCR_TWSTA);
    3490:	26 e5       	ldi	r18, 0x56	; 86
    3492:	30 e0       	ldi	r19, 0x00	; 0
    3494:	a6 e5       	ldi	r26, 0x56	; 86
    3496:	b0 e0       	ldi	r27, 0x00	; 0
    3498:	e6 e5       	ldi	r30, 0x56	; 86
    349a:	f0 e0       	ldi	r31, 0x00	; 0
    349c:	80 81       	ld	r24, Z
    349e:	80 62       	ori	r24, 0x20	; 32
    34a0:	8c 93       	st	X, r24
    34a2:	8c 91       	ld	r24, X
    34a4:	f9 01       	movw	r30, r18
    34a6:	80 83       	st	Z, r24

	/*Clear The Interrupt Flag to operate the Command*/
	SET_BIT(TWCR,TWCR_TWINT);
    34a8:	26 e5       	ldi	r18, 0x56	; 86
    34aa:	30 e0       	ldi	r19, 0x00	; 0
    34ac:	a6 e5       	ldi	r26, 0x56	; 86
    34ae:	b0 e0       	ldi	r27, 0x00	; 0
    34b0:	e6 e5       	ldi	r30, 0x56	; 86
    34b2:	f0 e0       	ldi	r31, 0x00	; 0
    34b4:	80 81       	ld	r24, Z
    34b6:	80 68       	ori	r24, 0x80	; 128
    34b8:	8c 93       	st	X, r24
    34ba:	8c 91       	ld	r24, X
    34bc:	f9 01       	movw	r30, r18
    34be:	80 83       	st	Z, r24

	/*Polling till the Interrupt flag is raised
	 *Command is Executed*/
	while(!GET_BIT(TWCR,TWCR_TWINT));
    34c0:	e6 e5       	ldi	r30, 0x56	; 86
    34c2:	f0 e0       	ldi	r31, 0x00	; 0
    34c4:	80 81       	ld	r24, Z
    34c6:	88 23       	and	r24, r24
    34c8:	dc f7       	brge	.-10     	; 0x34c0 <TWI_SendRepeatedStart+0x3c>

	/*Check 5 MSB in TWSR for Error*/
	if((TWSR & STATUS_MASK) != REP_START_ACK)
    34ca:	e1 e2       	ldi	r30, 0x21	; 33
    34cc:	f0 e0       	ldi	r31, 0x00	; 0
    34ce:	80 81       	ld	r24, Z
    34d0:	88 2f       	mov	r24, r24
    34d2:	90 e0       	ldi	r25, 0x00	; 0
    34d4:	88 7f       	andi	r24, 0xF8	; 248
    34d6:	90 70       	andi	r25, 0x00	; 0
    34d8:	80 31       	cpi	r24, 0x10	; 16
    34da:	91 05       	cpc	r25, r1
    34dc:	11 f0       	breq	.+4      	; 0x34e2 <TWI_SendRepeatedStart+0x5e>
	{
		Local_ErrorState = RepeatedStartError;
    34de:	82 e0       	ldi	r24, 0x02	; 2
    34e0:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_ErrorState;
    34e2:	89 81       	ldd	r24, Y+1	; 0x01
}
    34e4:	0f 90       	pop	r0
    34e6:	cf 91       	pop	r28
    34e8:	df 91       	pop	r29
    34ea:	08 95       	ret

000034ec <TWI_SendSlaveAddressWithWrite>:

TWI_ErrorState TWI_SendSlaveAddressWithWrite(u8 Copy_u8SlaveAddress)
{
    34ec:	df 93       	push	r29
    34ee:	cf 93       	push	r28
    34f0:	00 d0       	rcall	.+0      	; 0x34f2 <TWI_SendSlaveAddressWithWrite+0x6>
    34f2:	cd b7       	in	r28, 0x3d	; 61
    34f4:	de b7       	in	r29, 0x3e	; 62
    34f6:	8a 83       	std	Y+2, r24	; 0x02
	TWI_ErrorState Local_ErrorState = NoError;
    34f8:	19 82       	std	Y+1, r1	; 0x01

	/*Send the 7bit slave address to the bus*/
	TWDR = (Copy_u8SlaveAddress <<1);
    34fa:	e3 e2       	ldi	r30, 0x23	; 35
    34fc:	f0 e0       	ldi	r31, 0x00	; 0
    34fe:	8a 81       	ldd	r24, Y+2	; 0x02
    3500:	88 0f       	add	r24, r24
    3502:	80 83       	st	Z, r24

	/*Clear the LSB in the data register for the write request*/
	CLR_BIT(TWDR,0);
    3504:	23 e2       	ldi	r18, 0x23	; 35
    3506:	30 e0       	ldi	r19, 0x00	; 0
    3508:	a3 e2       	ldi	r26, 0x23	; 35
    350a:	b0 e0       	ldi	r27, 0x00	; 0
    350c:	e3 e2       	ldi	r30, 0x23	; 35
    350e:	f0 e0       	ldi	r31, 0x00	; 0
    3510:	80 81       	ld	r24, Z
    3512:	8e 7f       	andi	r24, 0xFE	; 254
    3514:	8c 93       	st	X, r24
    3516:	8c 91       	ld	r24, X
    3518:	f9 01       	movw	r30, r18
    351a:	80 83       	st	Z, r24

	/*Clear The Start Condition Bit*/
	CLR_BIT(TWCR,TWCR_TWSTA);
    351c:	26 e5       	ldi	r18, 0x56	; 86
    351e:	30 e0       	ldi	r19, 0x00	; 0
    3520:	a6 e5       	ldi	r26, 0x56	; 86
    3522:	b0 e0       	ldi	r27, 0x00	; 0
    3524:	e6 e5       	ldi	r30, 0x56	; 86
    3526:	f0 e0       	ldi	r31, 0x00	; 0
    3528:	80 81       	ld	r24, Z
    352a:	8f 7d       	andi	r24, 0xDF	; 223
    352c:	8c 93       	st	X, r24
    352e:	8c 91       	ld	r24, X
    3530:	f9 01       	movw	r30, r18
    3532:	80 83       	st	Z, r24

	/*Clear The Interrupt Flag to operate the Command*/
	SET_BIT(TWCR,TWCR_TWINT);
    3534:	26 e5       	ldi	r18, 0x56	; 86
    3536:	30 e0       	ldi	r19, 0x00	; 0
    3538:	a6 e5       	ldi	r26, 0x56	; 86
    353a:	b0 e0       	ldi	r27, 0x00	; 0
    353c:	e6 e5       	ldi	r30, 0x56	; 86
    353e:	f0 e0       	ldi	r31, 0x00	; 0
    3540:	80 81       	ld	r24, Z
    3542:	80 68       	ori	r24, 0x80	; 128
    3544:	8c 93       	st	X, r24
    3546:	8c 91       	ld	r24, X
    3548:	f9 01       	movw	r30, r18
    354a:	80 83       	st	Z, r24

	/*Polling till the Interrupt flag is raised
	 *Command is Executed*/
	while(!GET_BIT(TWCR,TWCR_TWINT));
    354c:	e6 e5       	ldi	r30, 0x56	; 86
    354e:	f0 e0       	ldi	r31, 0x00	; 0
    3550:	80 81       	ld	r24, Z
    3552:	88 23       	and	r24, r24
    3554:	dc f7       	brge	.-10     	; 0x354c <TWI_SendSlaveAddressWithWrite+0x60>

	/*Check 5 MSB in TWSR for Error*/
	if(((TWSR & STATUS_MASK) != SLAVE_ADD_AND_WR_ACK) && ((TWSR & STATUS_MASK) != SLAVE_ADD_AND_WR_NOACK))
    3556:	e1 e2       	ldi	r30, 0x21	; 33
    3558:	f0 e0       	ldi	r31, 0x00	; 0
    355a:	80 81       	ld	r24, Z
    355c:	88 2f       	mov	r24, r24
    355e:	90 e0       	ldi	r25, 0x00	; 0
    3560:	88 7f       	andi	r24, 0xF8	; 248
    3562:	90 70       	andi	r25, 0x00	; 0
    3564:	88 31       	cpi	r24, 0x18	; 24
    3566:	91 05       	cpc	r25, r1
    3568:	61 f0       	breq	.+24     	; 0x3582 <TWI_SendSlaveAddressWithWrite+0x96>
    356a:	e1 e2       	ldi	r30, 0x21	; 33
    356c:	f0 e0       	ldi	r31, 0x00	; 0
    356e:	80 81       	ld	r24, Z
    3570:	88 2f       	mov	r24, r24
    3572:	90 e0       	ldi	r25, 0x00	; 0
    3574:	88 7f       	andi	r24, 0xF8	; 248
    3576:	90 70       	andi	r25, 0x00	; 0
    3578:	80 32       	cpi	r24, 0x20	; 32
    357a:	91 05       	cpc	r25, r1
    357c:	11 f0       	breq	.+4      	; 0x3582 <TWI_SendSlaveAddressWithWrite+0x96>
	{
		Local_ErrorState = SlaveAddressWithWriteError;
    357e:	83 e0       	ldi	r24, 0x03	; 3
    3580:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_ErrorState;
    3582:	89 81       	ldd	r24, Y+1	; 0x01
}
    3584:	0f 90       	pop	r0
    3586:	0f 90       	pop	r0
    3588:	cf 91       	pop	r28
    358a:	df 91       	pop	r29
    358c:	08 95       	ret

0000358e <TWI_SendSlaveAddressWithRead>:

TWI_ErrorState TWI_SendSlaveAddressWithRead(u8 Copy_u8SlaveAddress)
{
    358e:	df 93       	push	r29
    3590:	cf 93       	push	r28
    3592:	00 d0       	rcall	.+0      	; 0x3594 <TWI_SendSlaveAddressWithRead+0x6>
    3594:	cd b7       	in	r28, 0x3d	; 61
    3596:	de b7       	in	r29, 0x3e	; 62
    3598:	8a 83       	std	Y+2, r24	; 0x02
	TWI_ErrorState Local_ErrorState = NoError;
    359a:	19 82       	std	Y+1, r1	; 0x01

	/*Send the 7bit slave address to the bus*/
	TWDR = (Copy_u8SlaveAddress <<1);
    359c:	e3 e2       	ldi	r30, 0x23	; 35
    359e:	f0 e0       	ldi	r31, 0x00	; 0
    35a0:	8a 81       	ldd	r24, Y+2	; 0x02
    35a2:	88 0f       	add	r24, r24
    35a4:	80 83       	st	Z, r24

	/*Set the LSB in the data register for the write request*/
	SET_BIT(TWDR,0);
    35a6:	23 e2       	ldi	r18, 0x23	; 35
    35a8:	30 e0       	ldi	r19, 0x00	; 0
    35aa:	a3 e2       	ldi	r26, 0x23	; 35
    35ac:	b0 e0       	ldi	r27, 0x00	; 0
    35ae:	e3 e2       	ldi	r30, 0x23	; 35
    35b0:	f0 e0       	ldi	r31, 0x00	; 0
    35b2:	80 81       	ld	r24, Z
    35b4:	81 60       	ori	r24, 0x01	; 1
    35b6:	8c 93       	st	X, r24
    35b8:	8c 91       	ld	r24, X
    35ba:	f9 01       	movw	r30, r18
    35bc:	80 83       	st	Z, r24

	/*Clear The Start Condition Bit*/
	CLR_BIT(TWCR,TWCR_TWSTA);
    35be:	26 e5       	ldi	r18, 0x56	; 86
    35c0:	30 e0       	ldi	r19, 0x00	; 0
    35c2:	a6 e5       	ldi	r26, 0x56	; 86
    35c4:	b0 e0       	ldi	r27, 0x00	; 0
    35c6:	e6 e5       	ldi	r30, 0x56	; 86
    35c8:	f0 e0       	ldi	r31, 0x00	; 0
    35ca:	80 81       	ld	r24, Z
    35cc:	8f 7d       	andi	r24, 0xDF	; 223
    35ce:	8c 93       	st	X, r24
    35d0:	8c 91       	ld	r24, X
    35d2:	f9 01       	movw	r30, r18
    35d4:	80 83       	st	Z, r24

	/*Clear The Interrupt Flag to operate the Command*/
	SET_BIT(TWCR,TWCR_TWINT);
    35d6:	26 e5       	ldi	r18, 0x56	; 86
    35d8:	30 e0       	ldi	r19, 0x00	; 0
    35da:	a6 e5       	ldi	r26, 0x56	; 86
    35dc:	b0 e0       	ldi	r27, 0x00	; 0
    35de:	e6 e5       	ldi	r30, 0x56	; 86
    35e0:	f0 e0       	ldi	r31, 0x00	; 0
    35e2:	80 81       	ld	r24, Z
    35e4:	80 68       	ori	r24, 0x80	; 128
    35e6:	8c 93       	st	X, r24
    35e8:	8c 91       	ld	r24, X
    35ea:	f9 01       	movw	r30, r18
    35ec:	80 83       	st	Z, r24

	/*Polling till the Interrupt flag is raised
	 *Command is Executed*/
	while(!GET_BIT(TWCR,TWCR_TWINT));
    35ee:	e6 e5       	ldi	r30, 0x56	; 86
    35f0:	f0 e0       	ldi	r31, 0x00	; 0
    35f2:	80 81       	ld	r24, Z
    35f4:	88 23       	and	r24, r24
    35f6:	dc f7       	brge	.-10     	; 0x35ee <TWI_SendSlaveAddressWithRead+0x60>

	/*Check 5 MSB in TWSR for Error*/
	if(((TWSR & STATUS_MASK) != SLAVE_ADD_AND_RD_ACK) && ((TWSR & STATUS_MASK) != SLAVE_ADD_AND_RD_NOACK))
    35f8:	e1 e2       	ldi	r30, 0x21	; 33
    35fa:	f0 e0       	ldi	r31, 0x00	; 0
    35fc:	80 81       	ld	r24, Z
    35fe:	88 2f       	mov	r24, r24
    3600:	90 e0       	ldi	r25, 0x00	; 0
    3602:	88 7f       	andi	r24, 0xF8	; 248
    3604:	90 70       	andi	r25, 0x00	; 0
    3606:	80 34       	cpi	r24, 0x40	; 64
    3608:	91 05       	cpc	r25, r1
    360a:	61 f0       	breq	.+24     	; 0x3624 <TWI_SendSlaveAddressWithRead+0x96>
    360c:	e1 e2       	ldi	r30, 0x21	; 33
    360e:	f0 e0       	ldi	r31, 0x00	; 0
    3610:	80 81       	ld	r24, Z
    3612:	88 2f       	mov	r24, r24
    3614:	90 e0       	ldi	r25, 0x00	; 0
    3616:	88 7f       	andi	r24, 0xF8	; 248
    3618:	90 70       	andi	r25, 0x00	; 0
    361a:	88 34       	cpi	r24, 0x48	; 72
    361c:	91 05       	cpc	r25, r1
    361e:	11 f0       	breq	.+4      	; 0x3624 <TWI_SendSlaveAddressWithRead+0x96>
	{
		Local_ErrorState = SlaveAddressWithReadError;
    3620:	84 e0       	ldi	r24, 0x04	; 4
    3622:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_ErrorState;
    3624:	89 81       	ldd	r24, Y+1	; 0x01
}
    3626:	0f 90       	pop	r0
    3628:	0f 90       	pop	r0
    362a:	cf 91       	pop	r28
    362c:	df 91       	pop	r29
    362e:	08 95       	ret

00003630 <TWI_MasterSendData>:

TWI_ErrorState TWI_MasterSendData(u8 Copy_u8Data)
{
    3630:	df 93       	push	r29
    3632:	cf 93       	push	r28
    3634:	00 d0       	rcall	.+0      	; 0x3636 <TWI_MasterSendData+0x6>
    3636:	cd b7       	in	r28, 0x3d	; 61
    3638:	de b7       	in	r29, 0x3e	; 62
    363a:	8a 83       	std	Y+2, r24	; 0x02
	TWI_ErrorState Local_ErrorState = NoError;
    363c:	19 82       	std	Y+1, r1	; 0x01

	/*Write Data on Data Register*/
	TWDR = Copy_u8Data ;
    363e:	e3 e2       	ldi	r30, 0x23	; 35
    3640:	f0 e0       	ldi	r31, 0x00	; 0
    3642:	8a 81       	ldd	r24, Y+2	; 0x02
    3644:	80 83       	st	Z, r24

	/*Writing one to START Condition Bit */
	CLR_BIT(TWCR,TWCR_TWSTA);
    3646:	26 e5       	ldi	r18, 0x56	; 86
    3648:	30 e0       	ldi	r19, 0x00	; 0
    364a:	a6 e5       	ldi	r26, 0x56	; 86
    364c:	b0 e0       	ldi	r27, 0x00	; 0
    364e:	e6 e5       	ldi	r30, 0x56	; 86
    3650:	f0 e0       	ldi	r31, 0x00	; 0
    3652:	80 81       	ld	r24, Z
    3654:	8f 7d       	andi	r24, 0xDF	; 223
    3656:	8c 93       	st	X, r24
    3658:	8c 91       	ld	r24, X
    365a:	f9 01       	movw	r30, r18
    365c:	80 83       	st	Z, r24

	/*Clear The Interrupt Flag to operate the Command*/
	SET_BIT(TWCR,TWCR_TWINT);
    365e:	26 e5       	ldi	r18, 0x56	; 86
    3660:	30 e0       	ldi	r19, 0x00	; 0
    3662:	a6 e5       	ldi	r26, 0x56	; 86
    3664:	b0 e0       	ldi	r27, 0x00	; 0
    3666:	e6 e5       	ldi	r30, 0x56	; 86
    3668:	f0 e0       	ldi	r31, 0x00	; 0
    366a:	80 81       	ld	r24, Z
    366c:	80 68       	ori	r24, 0x80	; 128
    366e:	8c 93       	st	X, r24
    3670:	8c 91       	ld	r24, X
    3672:	f9 01       	movw	r30, r18
    3674:	80 83       	st	Z, r24

	/*Polling till the Interrupt flag is raised
	 *Command is Executed*/
	while(!GET_BIT(TWCR,TWCR_TWINT));
    3676:	e6 e5       	ldi	r30, 0x56	; 86
    3678:	f0 e0       	ldi	r31, 0x00	; 0
    367a:	80 81       	ld	r24, Z
    367c:	88 23       	and	r24, r24
    367e:	dc f7       	brge	.-10     	; 0x3676 <TWI_MasterSendData+0x46>

	/*Check 5 MSB in TWSR for Error*/
	if(((TWSR & STATUS_MASK) != MSTR_WR_BYTE_ACK) && ((TWSR & STATUS_MASK) != MSTR_WR_BYTE_NOACK))
    3680:	e1 e2       	ldi	r30, 0x21	; 33
    3682:	f0 e0       	ldi	r31, 0x00	; 0
    3684:	80 81       	ld	r24, Z
    3686:	88 2f       	mov	r24, r24
    3688:	90 e0       	ldi	r25, 0x00	; 0
    368a:	88 7f       	andi	r24, 0xF8	; 248
    368c:	90 70       	andi	r25, 0x00	; 0
    368e:	88 32       	cpi	r24, 0x28	; 40
    3690:	91 05       	cpc	r25, r1
    3692:	61 f0       	breq	.+24     	; 0x36ac <TWI_MasterSendData+0x7c>
    3694:	e1 e2       	ldi	r30, 0x21	; 33
    3696:	f0 e0       	ldi	r31, 0x00	; 0
    3698:	80 81       	ld	r24, Z
    369a:	88 2f       	mov	r24, r24
    369c:	90 e0       	ldi	r25, 0x00	; 0
    369e:	88 7f       	andi	r24, 0xF8	; 248
    36a0:	90 70       	andi	r25, 0x00	; 0
    36a2:	80 33       	cpi	r24, 0x30	; 48
    36a4:	91 05       	cpc	r25, r1
    36a6:	11 f0       	breq	.+4      	; 0x36ac <TWI_MasterSendData+0x7c>
	{
		Local_ErrorState = MasterSendDataError;
    36a8:	85 e0       	ldi	r24, 0x05	; 5
    36aa:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_ErrorState;
    36ac:	89 81       	ldd	r24, Y+1	; 0x01
}
    36ae:	0f 90       	pop	r0
    36b0:	0f 90       	pop	r0
    36b2:	cf 91       	pop	r28
    36b4:	df 91       	pop	r29
    36b6:	08 95       	ret

000036b8 <TWI_MasterReceiveData>:

TWI_ErrorState TWI_MasterReceiveData(u8* Copy_pu8Data)
{
    36b8:	df 93       	push	r29
    36ba:	cf 93       	push	r28
    36bc:	00 d0       	rcall	.+0      	; 0x36be <TWI_MasterReceiveData+0x6>
    36be:	0f 92       	push	r0
    36c0:	cd b7       	in	r28, 0x3d	; 61
    36c2:	de b7       	in	r29, 0x3e	; 62
    36c4:	9b 83       	std	Y+3, r25	; 0x03
    36c6:	8a 83       	std	Y+2, r24	; 0x02
	TWI_ErrorState Local_ErrorState = NoError;
    36c8:	19 82       	std	Y+1, r1	; 0x01

	/*Enable Acknowledge bit*/
	SET_BIT(TWCR,TWCR_TWEA);
    36ca:	26 e5       	ldi	r18, 0x56	; 86
    36cc:	30 e0       	ldi	r19, 0x00	; 0
    36ce:	a6 e5       	ldi	r26, 0x56	; 86
    36d0:	b0 e0       	ldi	r27, 0x00	; 0
    36d2:	e6 e5       	ldi	r30, 0x56	; 86
    36d4:	f0 e0       	ldi	r31, 0x00	; 0
    36d6:	80 81       	ld	r24, Z
    36d8:	80 64       	ori	r24, 0x40	; 64
    36da:	8c 93       	st	X, r24
    36dc:	8c 91       	ld	r24, X
    36de:	f9 01       	movw	r30, r18
    36e0:	80 83       	st	Z, r24

	/*Clear The Interrupt Flag to Allow Slave to Send Data*/
	SET_BIT(TWCR,TWCR_TWINT);
    36e2:	26 e5       	ldi	r18, 0x56	; 86
    36e4:	30 e0       	ldi	r19, 0x00	; 0
    36e6:	a6 e5       	ldi	r26, 0x56	; 86
    36e8:	b0 e0       	ldi	r27, 0x00	; 0
    36ea:	e6 e5       	ldi	r30, 0x56	; 86
    36ec:	f0 e0       	ldi	r31, 0x00	; 0
    36ee:	80 81       	ld	r24, Z
    36f0:	80 68       	ori	r24, 0x80	; 128
    36f2:	8c 93       	st	X, r24
    36f4:	8c 91       	ld	r24, X
    36f6:	f9 01       	movw	r30, r18
    36f8:	80 83       	st	Z, r24

	/*Polling till the Interrupt flag is raised
	 *Command is Executed*/
	while(!GET_BIT(TWCR,TWCR_TWINT));
    36fa:	e6 e5       	ldi	r30, 0x56	; 86
    36fc:	f0 e0       	ldi	r31, 0x00	; 0
    36fe:	80 81       	ld	r24, Z
    3700:	88 23       	and	r24, r24
    3702:	dc f7       	brge	.-10     	; 0x36fa <TWI_MasterReceiveData+0x42>

	/*Check 5 MSB in TWSR for Error*/
	if((TWSR & STATUS_MASK) != MSTR_RD_BYTE_WITH_ACK)
    3704:	e1 e2       	ldi	r30, 0x21	; 33
    3706:	f0 e0       	ldi	r31, 0x00	; 0
    3708:	80 81       	ld	r24, Z
    370a:	88 2f       	mov	r24, r24
    370c:	90 e0       	ldi	r25, 0x00	; 0
    370e:	88 7f       	andi	r24, 0xF8	; 248
    3710:	90 70       	andi	r25, 0x00	; 0
    3712:	80 35       	cpi	r24, 0x50	; 80
    3714:	91 05       	cpc	r25, r1
    3716:	19 f0       	breq	.+6      	; 0x371e <TWI_MasterReceiveData+0x66>
	{
		Local_ErrorState = MasterReceiveDataError;
    3718:	86 e0       	ldi	r24, 0x06	; 6
    371a:	89 83       	std	Y+1, r24	; 0x01
    371c:	06 c0       	rjmp	.+12     	; 0x372a <TWI_MasterReceiveData+0x72>
	}
	else
	{
		/*Read Received Data From Data Register*/
		* Copy_pu8Data = TWDR ;
    371e:	e3 e2       	ldi	r30, 0x23	; 35
    3720:	f0 e0       	ldi	r31, 0x00	; 0
    3722:	80 81       	ld	r24, Z
    3724:	ea 81       	ldd	r30, Y+2	; 0x02
    3726:	fb 81       	ldd	r31, Y+3	; 0x03
    3728:	80 83       	st	Z, r24
	}

	return Local_ErrorState;
    372a:	89 81       	ldd	r24, Y+1	; 0x01
}
    372c:	0f 90       	pop	r0
    372e:	0f 90       	pop	r0
    3730:	0f 90       	pop	r0
    3732:	cf 91       	pop	r28
    3734:	df 91       	pop	r29
    3736:	08 95       	ret

00003738 <TWI_MasterReceiveStr>:

TWI_ErrorState TWI_MasterReceiveStr(u8* Copy_u8Str, u8 Copy_u8STRLength)
{
    3738:	df 93       	push	r29
    373a:	cf 93       	push	r28
    373c:	00 d0       	rcall	.+0      	; 0x373e <TWI_MasterReceiveStr+0x6>
    373e:	00 d0       	rcall	.+0      	; 0x3740 <TWI_MasterReceiveStr+0x8>
    3740:	0f 92       	push	r0
    3742:	cd b7       	in	r28, 0x3d	; 61
    3744:	de b7       	in	r29, 0x3e	; 62
    3746:	9c 83       	std	Y+4, r25	; 0x04
    3748:	8b 83       	std	Y+3, r24	; 0x03
    374a:	6d 83       	std	Y+5, r22	; 0x05
	TWI_ErrorState Local_ErrorState = NoError;
    374c:	1a 82       	std	Y+2, r1	; 0x02
	u8 i;

	/*Enable Acknowledge bit*/
	SET_BIT(TWCR,TWCR_TWEA);
    374e:	26 e5       	ldi	r18, 0x56	; 86
    3750:	30 e0       	ldi	r19, 0x00	; 0
    3752:	a6 e5       	ldi	r26, 0x56	; 86
    3754:	b0 e0       	ldi	r27, 0x00	; 0
    3756:	e6 e5       	ldi	r30, 0x56	; 86
    3758:	f0 e0       	ldi	r31, 0x00	; 0
    375a:	80 81       	ld	r24, Z
    375c:	80 64       	ori	r24, 0x40	; 64
    375e:	8c 93       	st	X, r24
    3760:	8c 91       	ld	r24, X
    3762:	f9 01       	movw	r30, r18
    3764:	80 83       	st	Z, r24

	for(i=0 ; i <= Copy_u8STRLength ; i++)
    3766:	19 82       	std	Y+1, r1	; 0x01
    3768:	43 c0       	rjmp	.+134    	; 0x37f0 <TWI_MasterReceiveStr+0xb8>
	{
		/*Clear The Interrupt Flag to Allow Slave to Send Data*/
		SET_BIT(TWCR,TWCR_TWINT);
    376a:	26 e5       	ldi	r18, 0x56	; 86
    376c:	30 e0       	ldi	r19, 0x00	; 0
    376e:	a6 e5       	ldi	r26, 0x56	; 86
    3770:	b0 e0       	ldi	r27, 0x00	; 0
    3772:	e6 e5       	ldi	r30, 0x56	; 86
    3774:	f0 e0       	ldi	r31, 0x00	; 0
    3776:	80 81       	ld	r24, Z
    3778:	80 68       	ori	r24, 0x80	; 128
    377a:	8c 93       	st	X, r24
    377c:	8c 91       	ld	r24, X
    377e:	f9 01       	movw	r30, r18
    3780:	80 83       	st	Z, r24

		/*Polling till the Interrupt flag is raised
		 *Command is Executed*/
		while(!GET_BIT(TWCR,TWCR_TWINT));
    3782:	e6 e5       	ldi	r30, 0x56	; 86
    3784:	f0 e0       	ldi	r31, 0x00	; 0
    3786:	80 81       	ld	r24, Z
    3788:	88 23       	and	r24, r24
    378a:	dc f7       	brge	.-10     	; 0x3782 <TWI_MasterReceiveStr+0x4a>

		/*Check 5 MSB in TWSR for Error*/
		if((TWSR & STATUS_MASK) != MSTR_RD_BYTE_WITH_ACK)
    378c:	e1 e2       	ldi	r30, 0x21	; 33
    378e:	f0 e0       	ldi	r31, 0x00	; 0
    3790:	80 81       	ld	r24, Z
    3792:	88 2f       	mov	r24, r24
    3794:	90 e0       	ldi	r25, 0x00	; 0
    3796:	88 7f       	andi	r24, 0xF8	; 248
    3798:	90 70       	andi	r25, 0x00	; 0
    379a:	80 35       	cpi	r24, 0x50	; 80
    379c:	91 05       	cpc	r25, r1
    379e:	19 f0       	breq	.+6      	; 0x37a6 <TWI_MasterReceiveStr+0x6e>
		{
			Local_ErrorState = MasterReceiveDataError;
    37a0:	86 e0       	ldi	r24, 0x06	; 6
    37a2:	8a 83       	std	Y+2, r24	; 0x02
    37a4:	0c c0       	rjmp	.+24     	; 0x37be <TWI_MasterReceiveStr+0x86>
		}
		else
		{
			/*Read Received Data From Data Register*/
			Copy_u8Str[i] = TWDR ;
    37a6:	89 81       	ldd	r24, Y+1	; 0x01
    37a8:	28 2f       	mov	r18, r24
    37aa:	30 e0       	ldi	r19, 0x00	; 0
    37ac:	8b 81       	ldd	r24, Y+3	; 0x03
    37ae:	9c 81       	ldd	r25, Y+4	; 0x04
    37b0:	dc 01       	movw	r26, r24
    37b2:	a2 0f       	add	r26, r18
    37b4:	b3 1f       	adc	r27, r19
    37b6:	e3 e2       	ldi	r30, 0x23	; 35
    37b8:	f0 e0       	ldi	r31, 0x00	; 0
    37ba:	80 81       	ld	r24, Z
    37bc:	8c 93       	st	X, r24
		}
		if (i == (Copy_u8STRLength-1))
    37be:	89 81       	ldd	r24, Y+1	; 0x01
    37c0:	28 2f       	mov	r18, r24
    37c2:	30 e0       	ldi	r19, 0x00	; 0
    37c4:	8d 81       	ldd	r24, Y+5	; 0x05
    37c6:	88 2f       	mov	r24, r24
    37c8:	90 e0       	ldi	r25, 0x00	; 0
    37ca:	01 97       	sbiw	r24, 0x01	; 1
    37cc:	28 17       	cp	r18, r24
    37ce:	39 07       	cpc	r19, r25
    37d0:	61 f4       	brne	.+24     	; 0x37ea <TWI_MasterReceiveStr+0xb2>
		{
			/*Disable Acknowledge bit*/
			CLR_BIT(TWCR,TWCR_TWEA);
    37d2:	26 e5       	ldi	r18, 0x56	; 86
    37d4:	30 e0       	ldi	r19, 0x00	; 0
    37d6:	a6 e5       	ldi	r26, 0x56	; 86
    37d8:	b0 e0       	ldi	r27, 0x00	; 0
    37da:	e6 e5       	ldi	r30, 0x56	; 86
    37dc:	f0 e0       	ldi	r31, 0x00	; 0
    37de:	80 81       	ld	r24, Z
    37e0:	8f 7b       	andi	r24, 0xBF	; 191
    37e2:	8c 93       	st	X, r24
    37e4:	8c 91       	ld	r24, X
    37e6:	f9 01       	movw	r30, r18
    37e8:	80 83       	st	Z, r24
	u8 i;

	/*Enable Acknowledge bit*/
	SET_BIT(TWCR,TWCR_TWEA);

	for(i=0 ; i <= Copy_u8STRLength ; i++)
    37ea:	89 81       	ldd	r24, Y+1	; 0x01
    37ec:	8f 5f       	subi	r24, 0xFF	; 255
    37ee:	89 83       	std	Y+1, r24	; 0x01
    37f0:	99 81       	ldd	r25, Y+1	; 0x01
    37f2:	8d 81       	ldd	r24, Y+5	; 0x05
    37f4:	89 17       	cp	r24, r25
    37f6:	08 f0       	brcs	.+2      	; 0x37fa <TWI_MasterReceiveStr+0xc2>
    37f8:	b8 cf       	rjmp	.-144    	; 0x376a <TWI_MasterReceiveStr+0x32>
		{
			/*Disable Acknowledge bit*/
			CLR_BIT(TWCR,TWCR_TWEA);
		}
	}
	Copy_u8Str[i-2]='\0';
    37fa:	89 81       	ldd	r24, Y+1	; 0x01
    37fc:	88 2f       	mov	r24, r24
    37fe:	90 e0       	ldi	r25, 0x00	; 0
    3800:	9c 01       	movw	r18, r24
    3802:	22 50       	subi	r18, 0x02	; 2
    3804:	30 40       	sbci	r19, 0x00	; 0
    3806:	8b 81       	ldd	r24, Y+3	; 0x03
    3808:	9c 81       	ldd	r25, Y+4	; 0x04
    380a:	fc 01       	movw	r30, r24
    380c:	e2 0f       	add	r30, r18
    380e:	f3 1f       	adc	r31, r19
    3810:	10 82       	st	Z, r1
	return Local_ErrorState;
    3812:	8a 81       	ldd	r24, Y+2	; 0x02
}
    3814:	0f 90       	pop	r0
    3816:	0f 90       	pop	r0
    3818:	0f 90       	pop	r0
    381a:	0f 90       	pop	r0
    381c:	0f 90       	pop	r0
    381e:	cf 91       	pop	r28
    3820:	df 91       	pop	r29
    3822:	08 95       	ret

00003824 <TWI_SendStopCondition>:

void TWI_SendStopCondition(void)
{
    3824:	df 93       	push	r29
    3826:	cf 93       	push	r28
    3828:	cd b7       	in	r28, 0x3d	; 61
    382a:	de b7       	in	r29, 0x3e	; 62
	/*Generate Stop Condition on the bus*/
	SET_BIT(TWCR,TWCR_TWSTO);
    382c:	26 e5       	ldi	r18, 0x56	; 86
    382e:	30 e0       	ldi	r19, 0x00	; 0
    3830:	a6 e5       	ldi	r26, 0x56	; 86
    3832:	b0 e0       	ldi	r27, 0x00	; 0
    3834:	e6 e5       	ldi	r30, 0x56	; 86
    3836:	f0 e0       	ldi	r31, 0x00	; 0
    3838:	80 81       	ld	r24, Z
    383a:	80 61       	ori	r24, 0x10	; 16
    383c:	8c 93       	st	X, r24
    383e:	8c 91       	ld	r24, X
    3840:	f9 01       	movw	r30, r18
    3842:	80 83       	st	Z, r24

	/*Clear The Interrupt Flag to operate the Command*/
	SET_BIT(TWCR,TWCR_TWINT);
    3844:	26 e5       	ldi	r18, 0x56	; 86
    3846:	30 e0       	ldi	r19, 0x00	; 0
    3848:	a6 e5       	ldi	r26, 0x56	; 86
    384a:	b0 e0       	ldi	r27, 0x00	; 0
    384c:	e6 e5       	ldi	r30, 0x56	; 86
    384e:	f0 e0       	ldi	r31, 0x00	; 0
    3850:	80 81       	ld	r24, Z
    3852:	80 68       	ori	r24, 0x80	; 128
    3854:	8c 93       	st	X, r24
    3856:	8c 91       	ld	r24, X
    3858:	f9 01       	movw	r30, r18
    385a:	80 83       	st	Z, r24
}
    385c:	cf 91       	pop	r28
    385e:	df 91       	pop	r29
    3860:	08 95       	ret

00003862 <Timer0_voidRunTimer0CTCAsync>:
void(*Global_pfCTCcallback)(void) = NULL;

void(*ICU_pvCallBackFunc)(void) = NULL;

void Timer0_voidRunTimer0CTCAsync(void(*Copy_pfCompareMatchInterrupt)(void))
{
    3862:	df 93       	push	r29
    3864:	cf 93       	push	r28
    3866:	00 d0       	rcall	.+0      	; 0x3868 <Timer0_voidRunTimer0CTCAsync+0x6>
    3868:	cd b7       	in	r28, 0x3d	; 61
    386a:	de b7       	in	r29, 0x3e	; 62
    386c:	9a 83       	std	Y+2, r25	; 0x02
    386e:	89 83       	std	Y+1, r24	; 0x01
	/*set timer 0 mode to be CTC*/
	SET_BIT(TCCR0, TCCR0_WGM01);
    3870:	23 e5       	ldi	r18, 0x53	; 83
    3872:	30 e0       	ldi	r19, 0x00	; 0
    3874:	a3 e5       	ldi	r26, 0x53	; 83
    3876:	b0 e0       	ldi	r27, 0x00	; 0
    3878:	e3 e5       	ldi	r30, 0x53	; 83
    387a:	f0 e0       	ldi	r31, 0x00	; 0
    387c:	80 81       	ld	r24, Z
    387e:	88 60       	ori	r24, 0x08	; 8
    3880:	8c 93       	st	X, r24
    3882:	8c 91       	ld	r24, X
    3884:	f9 01       	movw	r30, r18
    3886:	80 83       	st	Z, r24
	CLR_BIT(TCCR0, TCCR0_WGM00);
    3888:	23 e5       	ldi	r18, 0x53	; 83
    388a:	30 e0       	ldi	r19, 0x00	; 0
    388c:	a3 e5       	ldi	r26, 0x53	; 83
    388e:	b0 e0       	ldi	r27, 0x00	; 0
    3890:	e3 e5       	ldi	r30, 0x53	; 83
    3892:	f0 e0       	ldi	r31, 0x00	; 0
    3894:	80 81       	ld	r24, Z
    3896:	8f 7b       	andi	r24, 0xBF	; 191
    3898:	8c 93       	st	X, r24
    389a:	8c 91       	ld	r24, X
    389c:	f9 01       	movw	r30, r18
    389e:	80 83       	st	Z, r24

	/*Disconnect OC0 pin*/
	CLR_BIT(TCCR0, TCCR0_COM0);
    38a0:	23 e5       	ldi	r18, 0x53	; 83
    38a2:	30 e0       	ldi	r19, 0x00	; 0
    38a4:	a3 e5       	ldi	r26, 0x53	; 83
    38a6:	b0 e0       	ldi	r27, 0x00	; 0
    38a8:	e3 e5       	ldi	r30, 0x53	; 83
    38aa:	f0 e0       	ldi	r31, 0x00	; 0
    38ac:	80 81       	ld	r24, Z
    38ae:	8f 7e       	andi	r24, 0xEF	; 239
    38b0:	8c 93       	st	X, r24
    38b2:	8c 91       	ld	r24, X
    38b4:	f9 01       	movw	r30, r18
    38b6:	80 83       	st	Z, r24
	CLR_BIT(TCCR0, TCCR0_COM1);
    38b8:	23 e5       	ldi	r18, 0x53	; 83
    38ba:	30 e0       	ldi	r19, 0x00	; 0
    38bc:	a3 e5       	ldi	r26, 0x53	; 83
    38be:	b0 e0       	ldi	r27, 0x00	; 0
    38c0:	e3 e5       	ldi	r30, 0x53	; 83
    38c2:	f0 e0       	ldi	r31, 0x00	; 0
    38c4:	80 81       	ld	r24, Z
    38c6:	8f 7d       	andi	r24, 0xDF	; 223
    38c8:	8c 93       	st	X, r24
    38ca:	8c 91       	ld	r24, X
    38cc:	f9 01       	movw	r30, r18
    38ce:	80 83       	st	Z, r24

	/*setting Compare match value*/
	OCR0 = 78;
    38d0:	ec e5       	ldi	r30, 0x5C	; 92
    38d2:	f0 e0       	ldi	r31, 0x00	; 0
    38d4:	8e e4       	ldi	r24, 0x4E	; 78
    38d6:	80 83       	st	Z, r24

	/*enable compare match interrupt*/
	SET_BIT(TIMSK, TIMSK_OCIE0);
    38d8:	29 e5       	ldi	r18, 0x59	; 89
    38da:	30 e0       	ldi	r19, 0x00	; 0
    38dc:	a9 e5       	ldi	r26, 0x59	; 89
    38de:	b0 e0       	ldi	r27, 0x00	; 0
    38e0:	e9 e5       	ldi	r30, 0x59	; 89
    38e2:	f0 e0       	ldi	r31, 0x00	; 0
    38e4:	80 81       	ld	r24, Z
    38e6:	82 60       	ori	r24, 0x02	; 2
    38e8:	8c 93       	st	X, r24
    38ea:	8c 91       	ld	r24, X
    38ec:	f9 01       	movw	r30, r18
    38ee:	80 83       	st	Z, r24

	/*enable global interrupt*/
	SET_BIT(SREG ,SREG_I);
    38f0:	2f e5       	ldi	r18, 0x5F	; 95
    38f2:	30 e0       	ldi	r19, 0x00	; 0
    38f4:	af e5       	ldi	r26, 0x5F	; 95
    38f6:	b0 e0       	ldi	r27, 0x00	; 0
    38f8:	ef e5       	ldi	r30, 0x5F	; 95
    38fa:	f0 e0       	ldi	r31, 0x00	; 0
    38fc:	80 81       	ld	r24, Z
    38fe:	80 68       	ori	r24, 0x80	; 128
    3900:	8c 93       	st	X, r24
    3902:	8c 91       	ld	r24, X
    3904:	f9 01       	movw	r30, r18
    3906:	80 83       	st	Z, r24

	/*passing ISR address to global ptr to function*/
	if(Copy_pfCompareMatchInterrupt != NULL)
    3908:	89 81       	ldd	r24, Y+1	; 0x01
    390a:	9a 81       	ldd	r25, Y+2	; 0x02
    390c:	00 97       	sbiw	r24, 0x00	; 0
    390e:	31 f0       	breq	.+12     	; 0x391c <Timer0_voidRunTimer0CTCAsync+0xba>
	{
		Global_pfCTCcallback = Copy_pfCompareMatchInterrupt;
    3910:	89 81       	ldd	r24, Y+1	; 0x01
    3912:	9a 81       	ldd	r25, Y+2	; 0x02
    3914:	90 93 42 05 	sts	0x0542, r25
    3918:	80 93 41 05 	sts	0x0541, r24
	}

	/*Set Prescaler*/
	TCCR0 &= PRESCALER_MASK;
    391c:	a3 e5       	ldi	r26, 0x53	; 83
    391e:	b0 e0       	ldi	r27, 0x00	; 0
    3920:	e3 e5       	ldi	r30, 0x53	; 83
    3922:	f0 e0       	ldi	r31, 0x00	; 0
    3924:	80 81       	ld	r24, Z
    3926:	88 7f       	andi	r24, 0xF8	; 248
    3928:	8c 93       	st	X, r24
	TCCR0 |= DIVIDE_BY_256;
    392a:	a3 e5       	ldi	r26, 0x53	; 83
    392c:	b0 e0       	ldi	r27, 0x00	; 0
    392e:	e3 e5       	ldi	r30, 0x53	; 83
    3930:	f0 e0       	ldi	r31, 0x00	; 0
    3932:	80 81       	ld	r24, Z
    3934:	84 60       	ori	r24, 0x04	; 4
    3936:	8c 93       	st	X, r24
}
    3938:	0f 90       	pop	r0
    393a:	0f 90       	pop	r0
    393c:	cf 91       	pop	r28
    393e:	df 91       	pop	r29
    3940:	08 95       	ret

00003942 <Timer0_voidRunPWMFastNonInverted>:

/*non inverted PWM signal from timer0*/
void Timer0_voidRunPWMFastNonInverted(void)
{
    3942:	df 93       	push	r29
    3944:	cf 93       	push	r28
    3946:	cd b7       	in	r28, 0x3d	; 61
    3948:	de b7       	in	r29, 0x3e	; 62
	/*set timer 0 mode to be PWM*/
	SET_BIT(TCCR0, TCCR0_WGM01);
    394a:	23 e5       	ldi	r18, 0x53	; 83
    394c:	30 e0       	ldi	r19, 0x00	; 0
    394e:	a3 e5       	ldi	r26, 0x53	; 83
    3950:	b0 e0       	ldi	r27, 0x00	; 0
    3952:	e3 e5       	ldi	r30, 0x53	; 83
    3954:	f0 e0       	ldi	r31, 0x00	; 0
    3956:	80 81       	ld	r24, Z
    3958:	88 60       	ori	r24, 0x08	; 8
    395a:	8c 93       	st	X, r24
    395c:	8c 91       	ld	r24, X
    395e:	f9 01       	movw	r30, r18
    3960:	80 83       	st	Z, r24
	SET_BIT(TCCR0, TCCR0_WGM00);
    3962:	23 e5       	ldi	r18, 0x53	; 83
    3964:	30 e0       	ldi	r19, 0x00	; 0
    3966:	a3 e5       	ldi	r26, 0x53	; 83
    3968:	b0 e0       	ldi	r27, 0x00	; 0
    396a:	e3 e5       	ldi	r30, 0x53	; 83
    396c:	f0 e0       	ldi	r31, 0x00	; 0
    396e:	80 81       	ld	r24, Z
    3970:	80 64       	ori	r24, 0x40	; 64
    3972:	8c 93       	st	X, r24
    3974:	8c 91       	ld	r24, X
    3976:	f9 01       	movw	r30, r18
    3978:	80 83       	st	Z, r24

	/*OC0 pin mode : Noninverted*/
	CLR_BIT(TCCR0, TCCR0_COM0);
    397a:	23 e5       	ldi	r18, 0x53	; 83
    397c:	30 e0       	ldi	r19, 0x00	; 0
    397e:	a3 e5       	ldi	r26, 0x53	; 83
    3980:	b0 e0       	ldi	r27, 0x00	; 0
    3982:	e3 e5       	ldi	r30, 0x53	; 83
    3984:	f0 e0       	ldi	r31, 0x00	; 0
    3986:	80 81       	ld	r24, Z
    3988:	8f 7e       	andi	r24, 0xEF	; 239
    398a:	8c 93       	st	X, r24
    398c:	8c 91       	ld	r24, X
    398e:	f9 01       	movw	r30, r18
    3990:	80 83       	st	Z, r24
	SET_BIT(TCCR0, TCCR0_COM1);
    3992:	23 e5       	ldi	r18, 0x53	; 83
    3994:	30 e0       	ldi	r19, 0x00	; 0
    3996:	a3 e5       	ldi	r26, 0x53	; 83
    3998:	b0 e0       	ldi	r27, 0x00	; 0
    399a:	e3 e5       	ldi	r30, 0x53	; 83
    399c:	f0 e0       	ldi	r31, 0x00	; 0
    399e:	80 81       	ld	r24, Z
    39a0:	80 62       	ori	r24, 0x20	; 32
    39a2:	8c 93       	st	X, r24
    39a4:	8c 91       	ld	r24, X
    39a6:	f9 01       	movw	r30, r18
    39a8:	80 83       	st	Z, r24

	/*Set Prescaler*/
	TCCR0 &= PRESCALER_MASK;
    39aa:	a3 e5       	ldi	r26, 0x53	; 83
    39ac:	b0 e0       	ldi	r27, 0x00	; 0
    39ae:	e3 e5       	ldi	r30, 0x53	; 83
    39b0:	f0 e0       	ldi	r31, 0x00	; 0
    39b2:	80 81       	ld	r24, Z
    39b4:	88 7f       	andi	r24, 0xF8	; 248
    39b6:	8c 93       	st	X, r24
	TCCR0 |= DIVIDE_BY_8;
    39b8:	a3 e5       	ldi	r26, 0x53	; 83
    39ba:	b0 e0       	ldi	r27, 0x00	; 0
    39bc:	e3 e5       	ldi	r30, 0x53	; 83
    39be:	f0 e0       	ldi	r31, 0x00	; 0
    39c0:	80 81       	ld	r24, Z
    39c2:	82 60       	ori	r24, 0x02	; 2
    39c4:	8c 93       	st	X, r24

}
    39c6:	cf 91       	pop	r28
    39c8:	df 91       	pop	r29
    39ca:	08 95       	ret

000039cc <Timer0_voidSetCR0Value>:

/*set OCR0 value to adjust Duty Cycle (compare match value)*/
void Timer0_voidSetCR0Value(u8 Copy_u8CR0Value)
{
    39cc:	df 93       	push	r29
    39ce:	cf 93       	push	r28
    39d0:	0f 92       	push	r0
    39d2:	cd b7       	in	r28, 0x3d	; 61
    39d4:	de b7       	in	r29, 0x3e	; 62
    39d6:	89 83       	std	Y+1, r24	; 0x01
	OCR0 = Copy_u8CR0Value;
    39d8:	ec e5       	ldi	r30, 0x5C	; 92
    39da:	f0 e0       	ldi	r31, 0x00	; 0
    39dc:	89 81       	ldd	r24, Y+1	; 0x01
    39de:	80 83       	st	Z, r24
}
    39e0:	0f 90       	pop	r0
    39e2:	cf 91       	pop	r28
    39e4:	df 91       	pop	r29
    39e6:	08 95       	ret

000039e8 <TIMER0_voidRunTimer0OFAsync>:

void TIMER0_voidRunTimer0OFAsync(void(*ptr_pfCompareMatchInterrupt)(void),u8 Copy_u8PreLoad)
{
    39e8:	df 93       	push	r29
    39ea:	cf 93       	push	r28
    39ec:	00 d0       	rcall	.+0      	; 0x39ee <TIMER0_voidRunTimer0OFAsync+0x6>
    39ee:	0f 92       	push	r0
    39f0:	cd b7       	in	r28, 0x3d	; 61
    39f2:	de b7       	in	r29, 0x3e	; 62
    39f4:	9a 83       	std	Y+2, r25	; 0x02
    39f6:	89 83       	std	Y+1, r24	; 0x01
    39f8:	6b 83       	std	Y+3, r22	; 0x03
	/*Set Timer0 Mode to be OF*/
	CLR_BIT(TCCR0 , TCCR0_WGM01);
    39fa:	23 e5       	ldi	r18, 0x53	; 83
    39fc:	30 e0       	ldi	r19, 0x00	; 0
    39fe:	a3 e5       	ldi	r26, 0x53	; 83
    3a00:	b0 e0       	ldi	r27, 0x00	; 0
    3a02:	e3 e5       	ldi	r30, 0x53	; 83
    3a04:	f0 e0       	ldi	r31, 0x00	; 0
    3a06:	80 81       	ld	r24, Z
    3a08:	87 7f       	andi	r24, 0xF7	; 247
    3a0a:	8c 93       	st	X, r24
    3a0c:	8c 91       	ld	r24, X
    3a0e:	f9 01       	movw	r30, r18
    3a10:	80 83       	st	Z, r24
	CLR_BIT(TCCR0 , TCCR0_WGM00);
    3a12:	23 e5       	ldi	r18, 0x53	; 83
    3a14:	30 e0       	ldi	r19, 0x00	; 0
    3a16:	a3 e5       	ldi	r26, 0x53	; 83
    3a18:	b0 e0       	ldi	r27, 0x00	; 0
    3a1a:	e3 e5       	ldi	r30, 0x53	; 83
    3a1c:	f0 e0       	ldi	r31, 0x00	; 0
    3a1e:	80 81       	ld	r24, Z
    3a20:	8f 7b       	andi	r24, 0xBF	; 191
    3a22:	8c 93       	st	X, r24
    3a24:	8c 91       	ld	r24, X
    3a26:	f9 01       	movw	r30, r18
    3a28:	80 83       	st	Z, r24

	/*Setting PreLoad Vlaue*/
	TCNT0 = Copy_u8PreLoad;
    3a2a:	e2 e5       	ldi	r30, 0x52	; 82
    3a2c:	f0 e0       	ldi	r31, 0x00	; 0
    3a2e:	8b 81       	ldd	r24, Y+3	; 0x03
    3a30:	80 83       	st	Z, r24

	/*Enable Compare match Interrupt*/
	SET_BIT(TIMSK,TIMSK_OCIE0);
    3a32:	29 e5       	ldi	r18, 0x59	; 89
    3a34:	30 e0       	ldi	r19, 0x00	; 0
    3a36:	a9 e5       	ldi	r26, 0x59	; 89
    3a38:	b0 e0       	ldi	r27, 0x00	; 0
    3a3a:	e9 e5       	ldi	r30, 0x59	; 89
    3a3c:	f0 e0       	ldi	r31, 0x00	; 0
    3a3e:	80 81       	ld	r24, Z
    3a40:	82 60       	ori	r24, 0x02	; 2
    3a42:	8c 93       	st	X, r24
    3a44:	8c 91       	ld	r24, X
    3a46:	f9 01       	movw	r30, r18
    3a48:	80 83       	st	Z, r24

	/*Enable Global Interrupt*/
	GIE_voidEnable();
    3a4a:	0e 94 19 18 	call	0x3032	; 0x3032 <GIE_voidEnable>

	if(ptr_pfCompareMatchInterrupt != NULL)
    3a4e:	89 81       	ldd	r24, Y+1	; 0x01
    3a50:	9a 81       	ldd	r25, Y+2	; 0x02
    3a52:	00 97       	sbiw	r24, 0x00	; 0
    3a54:	31 f0       	breq	.+12     	; 0x3a62 <TIMER0_voidRunTimer0OFAsync+0x7a>
		Global_pfCTCcallback = ptr_pfCompareMatchInterrupt;
    3a56:	89 81       	ldd	r24, Y+1	; 0x01
    3a58:	9a 81       	ldd	r25, Y+2	; 0x02
    3a5a:	90 93 42 05 	sts	0x0542, r25
    3a5e:	80 93 41 05 	sts	0x0541, r24

	/*Setting Prescaler ==> 8*/
	TCCR0 &= PRESCALER_MASK;
    3a62:	a3 e5       	ldi	r26, 0x53	; 83
    3a64:	b0 e0       	ldi	r27, 0x00	; 0
    3a66:	e3 e5       	ldi	r30, 0x53	; 83
    3a68:	f0 e0       	ldi	r31, 0x00	; 0
    3a6a:	80 81       	ld	r24, Z
    3a6c:	88 7f       	andi	r24, 0xF8	; 248
    3a6e:	8c 93       	st	X, r24
	TCCR0 |= DIVIDE_BY_256;
    3a70:	a3 e5       	ldi	r26, 0x53	; 83
    3a72:	b0 e0       	ldi	r27, 0x00	; 0
    3a74:	e3 e5       	ldi	r30, 0x53	; 83
    3a76:	f0 e0       	ldi	r31, 0x00	; 0
    3a78:	80 81       	ld	r24, Z
    3a7a:	84 60       	ori	r24, 0x04	; 4
    3a7c:	8c 93       	st	X, r24
}
    3a7e:	0f 90       	pop	r0
    3a80:	0f 90       	pop	r0
    3a82:	0f 90       	pop	r0
    3a84:	cf 91       	pop	r28
    3a86:	df 91       	pop	r29
    3a88:	08 95       	ret

00003a8a <__vector_10>:

void __vector_10(void) __attribute__((signal));
void __vector_10(void)
{
    3a8a:	1f 92       	push	r1
    3a8c:	0f 92       	push	r0
    3a8e:	0f b6       	in	r0, 0x3f	; 63
    3a90:	0f 92       	push	r0
    3a92:	11 24       	eor	r1, r1
    3a94:	2f 93       	push	r18
    3a96:	3f 93       	push	r19
    3a98:	4f 93       	push	r20
    3a9a:	5f 93       	push	r21
    3a9c:	6f 93       	push	r22
    3a9e:	7f 93       	push	r23
    3aa0:	8f 93       	push	r24
    3aa2:	9f 93       	push	r25
    3aa4:	af 93       	push	r26
    3aa6:	bf 93       	push	r27
    3aa8:	ef 93       	push	r30
    3aaa:	ff 93       	push	r31
    3aac:	df 93       	push	r29
    3aae:	cf 93       	push	r28
    3ab0:	cd b7       	in	r28, 0x3d	; 61
    3ab2:	de b7       	in	r29, 0x3e	; 62
	if(Global_pfCTCcallback != NULL)
    3ab4:	80 91 41 05 	lds	r24, 0x0541
    3ab8:	90 91 42 05 	lds	r25, 0x0542
    3abc:	00 97       	sbiw	r24, 0x00	; 0
    3abe:	29 f0       	breq	.+10     	; 0x3aca <__vector_10+0x40>
	{
		Global_pfCTCcallback();
    3ac0:	e0 91 41 05 	lds	r30, 0x0541
    3ac4:	f0 91 42 05 	lds	r31, 0x0542
    3ac8:	09 95       	icall
	}
	else
	{
		/*do nothing*/
	}
}
    3aca:	cf 91       	pop	r28
    3acc:	df 91       	pop	r29
    3ace:	ff 91       	pop	r31
    3ad0:	ef 91       	pop	r30
    3ad2:	bf 91       	pop	r27
    3ad4:	af 91       	pop	r26
    3ad6:	9f 91       	pop	r25
    3ad8:	8f 91       	pop	r24
    3ada:	7f 91       	pop	r23
    3adc:	6f 91       	pop	r22
    3ade:	5f 91       	pop	r21
    3ae0:	4f 91       	pop	r20
    3ae2:	3f 91       	pop	r19
    3ae4:	2f 91       	pop	r18
    3ae6:	0f 90       	pop	r0
    3ae8:	0f be       	out	0x3f, r0	; 63
    3aea:	0f 90       	pop	r0
    3aec:	1f 90       	pop	r1
    3aee:	18 95       	reti

00003af0 <Timer1_voidInitPWM>:

void Timer1_voidInitPWM(void)
{
    3af0:	df 93       	push	r29
    3af2:	cf 93       	push	r28
    3af4:	cd b7       	in	r28, 0x3d	; 61
    3af6:	de b7       	in	r29, 0x3e	; 62
	/*Fast PWM channel A*/
	CLR_BIT(TCCR1A, TCCR1A_COM1A0);
    3af8:	2f e4       	ldi	r18, 0x4F	; 79
    3afa:	30 e0       	ldi	r19, 0x00	; 0
    3afc:	af e4       	ldi	r26, 0x4F	; 79
    3afe:	b0 e0       	ldi	r27, 0x00	; 0
    3b00:	ef e4       	ldi	r30, 0x4F	; 79
    3b02:	f0 e0       	ldi	r31, 0x00	; 0
    3b04:	80 81       	ld	r24, Z
    3b06:	8f 7b       	andi	r24, 0xBF	; 191
    3b08:	8c 93       	st	X, r24
    3b0a:	8c 91       	ld	r24, X
    3b0c:	f9 01       	movw	r30, r18
    3b0e:	80 83       	st	Z, r24
	SET_BIT(TCCR1A, TCCR1A_COM1A1);
    3b10:	2f e4       	ldi	r18, 0x4F	; 79
    3b12:	30 e0       	ldi	r19, 0x00	; 0
    3b14:	af e4       	ldi	r26, 0x4F	; 79
    3b16:	b0 e0       	ldi	r27, 0x00	; 0
    3b18:	ef e4       	ldi	r30, 0x4F	; 79
    3b1a:	f0 e0       	ldi	r31, 0x00	; 0
    3b1c:	80 81       	ld	r24, Z
    3b1e:	80 68       	ori	r24, 0x80	; 128
    3b20:	8c 93       	st	X, r24
    3b22:	8c 91       	ld	r24, X
    3b24:	f9 01       	movw	r30, r18
    3b26:	80 83       	st	Z, r24

	/*set wave generation mode*/
	CLR_BIT(TCCR1A, TCCR1A_WGM10);
    3b28:	2f e4       	ldi	r18, 0x4F	; 79
    3b2a:	30 e0       	ldi	r19, 0x00	; 0
    3b2c:	af e4       	ldi	r26, 0x4F	; 79
    3b2e:	b0 e0       	ldi	r27, 0x00	; 0
    3b30:	ef e4       	ldi	r30, 0x4F	; 79
    3b32:	f0 e0       	ldi	r31, 0x00	; 0
    3b34:	80 81       	ld	r24, Z
    3b36:	8e 7f       	andi	r24, 0xFE	; 254
    3b38:	8c 93       	st	X, r24
    3b3a:	8c 91       	ld	r24, X
    3b3c:	f9 01       	movw	r30, r18
    3b3e:	80 83       	st	Z, r24
	SET_BIT(TCCR1A, TCCR1A_WGM11);
    3b40:	2f e4       	ldi	r18, 0x4F	; 79
    3b42:	30 e0       	ldi	r19, 0x00	; 0
    3b44:	af e4       	ldi	r26, 0x4F	; 79
    3b46:	b0 e0       	ldi	r27, 0x00	; 0
    3b48:	ef e4       	ldi	r30, 0x4F	; 79
    3b4a:	f0 e0       	ldi	r31, 0x00	; 0
    3b4c:	80 81       	ld	r24, Z
    3b4e:	82 60       	ori	r24, 0x02	; 2
    3b50:	8c 93       	st	X, r24
    3b52:	8c 91       	ld	r24, X
    3b54:	f9 01       	movw	r30, r18
    3b56:	80 83       	st	Z, r24
	SET_BIT(TCCR1B, TCCR1B_WGM12);
    3b58:	2e e4       	ldi	r18, 0x4E	; 78
    3b5a:	30 e0       	ldi	r19, 0x00	; 0
    3b5c:	ae e4       	ldi	r26, 0x4E	; 78
    3b5e:	b0 e0       	ldi	r27, 0x00	; 0
    3b60:	ee e4       	ldi	r30, 0x4E	; 78
    3b62:	f0 e0       	ldi	r31, 0x00	; 0
    3b64:	80 81       	ld	r24, Z
    3b66:	88 60       	ori	r24, 0x08	; 8
    3b68:	8c 93       	st	X, r24
    3b6a:	8c 91       	ld	r24, X
    3b6c:	f9 01       	movw	r30, r18
    3b6e:	80 83       	st	Z, r24
	SET_BIT(TCCR1B, TCCR1B_WGM13);
    3b70:	2e e4       	ldi	r18, 0x4E	; 78
    3b72:	30 e0       	ldi	r19, 0x00	; 0
    3b74:	ae e4       	ldi	r26, 0x4E	; 78
    3b76:	b0 e0       	ldi	r27, 0x00	; 0
    3b78:	ee e4       	ldi	r30, 0x4E	; 78
    3b7a:	f0 e0       	ldi	r31, 0x00	; 0
    3b7c:	80 81       	ld	r24, Z
    3b7e:	80 61       	ori	r24, 0x10	; 16
    3b80:	8c 93       	st	X, r24
    3b82:	8c 91       	ld	r24, X
    3b84:	f9 01       	movw	r30, r18
    3b86:	80 83       	st	Z, r24

	/*Set the TOP value (for set on top)*/
	ICR1 = 20000;
    3b88:	e6 e4       	ldi	r30, 0x46	; 70
    3b8a:	f0 e0       	ldi	r31, 0x00	; 0
    3b8c:	80 e2       	ldi	r24, 0x20	; 32
    3b8e:	9e e4       	ldi	r25, 0x4E	; 78
    3b90:	91 83       	std	Z+1, r25	; 0x01
    3b92:	80 83       	st	Z, r24

	/*set prescaler*/
#if(TMR1_PRESCALER == DIV_BY_8)
	{
		CLR_BIT(TCCR1B, TCCR1_CS10);
    3b94:	2e e4       	ldi	r18, 0x4E	; 78
    3b96:	30 e0       	ldi	r19, 0x00	; 0
    3b98:	ae e4       	ldi	r26, 0x4E	; 78
    3b9a:	b0 e0       	ldi	r27, 0x00	; 0
    3b9c:	ee e4       	ldi	r30, 0x4E	; 78
    3b9e:	f0 e0       	ldi	r31, 0x00	; 0
    3ba0:	80 81       	ld	r24, Z
    3ba2:	8e 7f       	andi	r24, 0xFE	; 254
    3ba4:	8c 93       	st	X, r24
    3ba6:	8c 91       	ld	r24, X
    3ba8:	f9 01       	movw	r30, r18
    3baa:	80 83       	st	Z, r24
		SET_BIT(TCCR1B, TCCR1_CS11);
    3bac:	2e e4       	ldi	r18, 0x4E	; 78
    3bae:	30 e0       	ldi	r19, 0x00	; 0
    3bb0:	ae e4       	ldi	r26, 0x4E	; 78
    3bb2:	b0 e0       	ldi	r27, 0x00	; 0
    3bb4:	ee e4       	ldi	r30, 0x4E	; 78
    3bb6:	f0 e0       	ldi	r31, 0x00	; 0
    3bb8:	80 81       	ld	r24, Z
    3bba:	82 60       	ori	r24, 0x02	; 2
    3bbc:	8c 93       	st	X, r24
    3bbe:	8c 91       	ld	r24, X
    3bc0:	f9 01       	movw	r30, r18
    3bc2:	80 83       	st	Z, r24
		CLR_BIT(TCCR1B, TCCR1_CS12);
    3bc4:	2e e4       	ldi	r18, 0x4E	; 78
    3bc6:	30 e0       	ldi	r19, 0x00	; 0
    3bc8:	ae e4       	ldi	r26, 0x4E	; 78
    3bca:	b0 e0       	ldi	r27, 0x00	; 0
    3bcc:	ee e4       	ldi	r30, 0x4E	; 78
    3bce:	f0 e0       	ldi	r31, 0x00	; 0
    3bd0:	80 81       	ld	r24, Z
    3bd2:	8b 7f       	andi	r24, 0xFB	; 251
    3bd4:	8c 93       	st	X, r24
    3bd6:	8c 91       	ld	r24, X
    3bd8:	f9 01       	movw	r30, r18
    3bda:	80 83       	st	Z, r24
	}
#endif
}
    3bdc:	cf 91       	pop	r28
    3bde:	df 91       	pop	r29
    3be0:	08 95       	ret

00003be2 <Timer1_voidSetAngle>:

void Timer1_voidSetAngle(u16 Copy_u16Angle)
{
    3be2:	df 93       	push	r29
    3be4:	cf 93       	push	r28
    3be6:	00 d0       	rcall	.+0      	; 0x3be8 <Timer1_voidSetAngle+0x6>
    3be8:	cd b7       	in	r28, 0x3d	; 61
    3bea:	de b7       	in	r29, 0x3e	; 62
    3bec:	9a 83       	std	Y+2, r25	; 0x02
    3bee:	89 83       	std	Y+1, r24	; 0x01
	if((Copy_u16Angle >= 1000) || (Copy_u16Angle <= 2000))
    3bf0:	89 81       	ldd	r24, Y+1	; 0x01
    3bf2:	9a 81       	ldd	r25, Y+2	; 0x02
    3bf4:	23 e0       	ldi	r18, 0x03	; 3
    3bf6:	88 3e       	cpi	r24, 0xE8	; 232
    3bf8:	92 07       	cpc	r25, r18
    3bfa:	30 f4       	brcc	.+12     	; 0x3c08 <Timer1_voidSetAngle+0x26>
    3bfc:	89 81       	ldd	r24, Y+1	; 0x01
    3bfe:	9a 81       	ldd	r25, Y+2	; 0x02
    3c00:	27 e0       	ldi	r18, 0x07	; 7
    3c02:	81 3d       	cpi	r24, 0xD1	; 209
    3c04:	92 07       	cpc	r25, r18
    3c06:	30 f4       	brcc	.+12     	; 0x3c14 <Timer1_voidSetAngle+0x32>
	{
		OCR1A = Copy_u16Angle;
    3c08:	ea e4       	ldi	r30, 0x4A	; 74
    3c0a:	f0 e0       	ldi	r31, 0x00	; 0
    3c0c:	89 81       	ldd	r24, Y+1	; 0x01
    3c0e:	9a 81       	ldd	r25, Y+2	; 0x02
    3c10:	91 83       	std	Z+1, r25	; 0x01
    3c12:	80 83       	st	Z, r24
	}
}
    3c14:	0f 90       	pop	r0
    3c16:	0f 90       	pop	r0
    3c18:	cf 91       	pop	r28
    3c1a:	df 91       	pop	r29
    3c1c:	08 95       	ret

00003c1e <Timer1_voidICUInit>:

void Timer1_voidICUInit(void)  /*pin D6*/
{
    3c1e:	df 93       	push	r29
    3c20:	cf 93       	push	r28
    3c22:	cd b7       	in	r28, 0x3d	; 61
    3c24:	de b7       	in	r29, 0x3e	; 62
	/*Run timer in normal mode*/
	CLR_BIT(TCCR1A, TCCR1A_WGM10);
    3c26:	2f e4       	ldi	r18, 0x4F	; 79
    3c28:	30 e0       	ldi	r19, 0x00	; 0
    3c2a:	af e4       	ldi	r26, 0x4F	; 79
    3c2c:	b0 e0       	ldi	r27, 0x00	; 0
    3c2e:	ef e4       	ldi	r30, 0x4F	; 79
    3c30:	f0 e0       	ldi	r31, 0x00	; 0
    3c32:	80 81       	ld	r24, Z
    3c34:	8e 7f       	andi	r24, 0xFE	; 254
    3c36:	8c 93       	st	X, r24
    3c38:	8c 91       	ld	r24, X
    3c3a:	f9 01       	movw	r30, r18
    3c3c:	80 83       	st	Z, r24
	CLR_BIT(TCCR1A, TCCR1A_WGM11);
    3c3e:	2f e4       	ldi	r18, 0x4F	; 79
    3c40:	30 e0       	ldi	r19, 0x00	; 0
    3c42:	af e4       	ldi	r26, 0x4F	; 79
    3c44:	b0 e0       	ldi	r27, 0x00	; 0
    3c46:	ef e4       	ldi	r30, 0x4F	; 79
    3c48:	f0 e0       	ldi	r31, 0x00	; 0
    3c4a:	80 81       	ld	r24, Z
    3c4c:	8d 7f       	andi	r24, 0xFD	; 253
    3c4e:	8c 93       	st	X, r24
    3c50:	8c 91       	ld	r24, X
    3c52:	f9 01       	movw	r30, r18
    3c54:	80 83       	st	Z, r24
	CLR_BIT(TCCR1B, TCCR1B_WGM12);
    3c56:	2e e4       	ldi	r18, 0x4E	; 78
    3c58:	30 e0       	ldi	r19, 0x00	; 0
    3c5a:	ae e4       	ldi	r26, 0x4E	; 78
    3c5c:	b0 e0       	ldi	r27, 0x00	; 0
    3c5e:	ee e4       	ldi	r30, 0x4E	; 78
    3c60:	f0 e0       	ldi	r31, 0x00	; 0
    3c62:	80 81       	ld	r24, Z
    3c64:	87 7f       	andi	r24, 0xF7	; 247
    3c66:	8c 93       	st	X, r24
    3c68:	8c 91       	ld	r24, X
    3c6a:	f9 01       	movw	r30, r18
    3c6c:	80 83       	st	Z, r24
	CLR_BIT(TCCR1B, TCCR1B_WGM13);
    3c6e:	2e e4       	ldi	r18, 0x4E	; 78
    3c70:	30 e0       	ldi	r19, 0x00	; 0
    3c72:	ae e4       	ldi	r26, 0x4E	; 78
    3c74:	b0 e0       	ldi	r27, 0x00	; 0
    3c76:	ee e4       	ldi	r30, 0x4E	; 78
    3c78:	f0 e0       	ldi	r31, 0x00	; 0
    3c7a:	80 81       	ld	r24, Z
    3c7c:	8f 7e       	andi	r24, 0xEF	; 239
    3c7e:	8c 93       	st	X, r24
    3c80:	8c 91       	ld	r24, X
    3c82:	f9 01       	movw	r30, r18
    3c84:	80 83       	st	Z, r24

	/*Compare output mode : normal*/
	CLR_BIT(TCCR1A, TCCR1A_COM1A0);
    3c86:	2f e4       	ldi	r18, 0x4F	; 79
    3c88:	30 e0       	ldi	r19, 0x00	; 0
    3c8a:	af e4       	ldi	r26, 0x4F	; 79
    3c8c:	b0 e0       	ldi	r27, 0x00	; 0
    3c8e:	ef e4       	ldi	r30, 0x4F	; 79
    3c90:	f0 e0       	ldi	r31, 0x00	; 0
    3c92:	80 81       	ld	r24, Z
    3c94:	8f 7b       	andi	r24, 0xBF	; 191
    3c96:	8c 93       	st	X, r24
    3c98:	8c 91       	ld	r24, X
    3c9a:	f9 01       	movw	r30, r18
    3c9c:	80 83       	st	Z, r24
	CLR_BIT(TCCR1A, TCCR1A_COM1A1);
    3c9e:	2f e4       	ldi	r18, 0x4F	; 79
    3ca0:	30 e0       	ldi	r19, 0x00	; 0
    3ca2:	af e4       	ldi	r26, 0x4F	; 79
    3ca4:	b0 e0       	ldi	r27, 0x00	; 0
    3ca6:	ef e4       	ldi	r30, 0x4F	; 79
    3ca8:	f0 e0       	ldi	r31, 0x00	; 0
    3caa:	80 81       	ld	r24, Z
    3cac:	8f 77       	andi	r24, 0x7F	; 127
    3cae:	8c 93       	st	X, r24
    3cb0:	8c 91       	ld	r24, X
    3cb2:	f9 01       	movw	r30, r18
    3cb4:	80 83       	st	Z, r24

	/*set prescaler to DIV_8*/
	TCCR0 &= PRESCALER_MASK;
    3cb6:	a3 e5       	ldi	r26, 0x53	; 83
    3cb8:	b0 e0       	ldi	r27, 0x00	; 0
    3cba:	e3 e5       	ldi	r30, 0x53	; 83
    3cbc:	f0 e0       	ldi	r31, 0x00	; 0
    3cbe:	80 81       	ld	r24, Z
    3cc0:	88 7f       	andi	r24, 0xF8	; 248
    3cc2:	8c 93       	st	X, r24
	TCCR0 |= DIVIDE_BY_8;
    3cc4:	a3 e5       	ldi	r26, 0x53	; 83
    3cc6:	b0 e0       	ldi	r27, 0x00	; 0
    3cc8:	e3 e5       	ldi	r30, 0x53	; 83
    3cca:	f0 e0       	ldi	r31, 0x00	; 0
    3ccc:	80 81       	ld	r24, Z
    3cce:	82 60       	ori	r24, 0x02	; 2
    3cd0:	8c 93       	st	X, r24

	/*set trigger source to rising edge initially*/
	SET_BIT(TCCR1B,TCCR1B_ICES1);
    3cd2:	2e e4       	ldi	r18, 0x4E	; 78
    3cd4:	30 e0       	ldi	r19, 0x00	; 0
    3cd6:	ae e4       	ldi	r26, 0x4E	; 78
    3cd8:	b0 e0       	ldi	r27, 0x00	; 0
    3cda:	ee e4       	ldi	r30, 0x4E	; 78
    3cdc:	f0 e0       	ldi	r31, 0x00	; 0
    3cde:	80 81       	ld	r24, Z
    3ce0:	80 64       	ori	r24, 0x40	; 64
    3ce2:	8c 93       	st	X, r24
    3ce4:	8c 91       	ld	r24, X
    3ce6:	f9 01       	movw	r30, r18
    3ce8:	80 83       	st	Z, r24

	/*enable input capture interrupt*/
	SET_BIT(TIMSK,TIMSK_TICIE1);
    3cea:	29 e5       	ldi	r18, 0x59	; 89
    3cec:	30 e0       	ldi	r19, 0x00	; 0
    3cee:	a9 e5       	ldi	r26, 0x59	; 89
    3cf0:	b0 e0       	ldi	r27, 0x00	; 0
    3cf2:	e9 e5       	ldi	r30, 0x59	; 89
    3cf4:	f0 e0       	ldi	r31, 0x00	; 0
    3cf6:	80 81       	ld	r24, Z
    3cf8:	80 62       	ori	r24, 0x20	; 32
    3cfa:	8c 93       	st	X, r24
    3cfc:	8c 91       	ld	r24, X
    3cfe:	f9 01       	movw	r30, r18
    3d00:	80 83       	st	Z, r24
}
    3d02:	cf 91       	pop	r28
    3d04:	df 91       	pop	r29
    3d06:	08 95       	ret

00003d08 <Timer1_u8GetICUReading>:

u8 Timer1_u8GetICUReading(void)
{
    3d08:	df 93       	push	r29
    3d0a:	cf 93       	push	r28
    3d0c:	cd b7       	in	r28, 0x3d	; 61
    3d0e:	de b7       	in	r29, 0x3e	; 62
	return ICR1;
    3d10:	e6 e4       	ldi	r30, 0x46	; 70
    3d12:	f0 e0       	ldi	r31, 0x00	; 0
    3d14:	80 81       	ld	r24, Z
    3d16:	91 81       	ldd	r25, Z+1	; 0x01
}
    3d18:	cf 91       	pop	r28
    3d1a:	df 91       	pop	r29
    3d1c:	08 95       	ret

00003d1e <ICU_voidSetTriggerEdge>:

void ICU_voidSetTriggerEdge(u8 Copy_u8Edge)
{
    3d1e:	df 93       	push	r29
    3d20:	cf 93       	push	r28
    3d22:	0f 92       	push	r0
    3d24:	cd b7       	in	r28, 0x3d	; 61
    3d26:	de b7       	in	r29, 0x3e	; 62
    3d28:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_u8Edge == ICU_RISING_EDGE)
    3d2a:	89 81       	ldd	r24, Y+1	; 0x01
    3d2c:	81 30       	cpi	r24, 0x01	; 1
    3d2e:	69 f4       	brne	.+26     	; 0x3d4a <ICU_voidSetTriggerEdge+0x2c>
	{
		SET_BIT(TCCR1B,TCCR1B_ICES1);
    3d30:	2e e4       	ldi	r18, 0x4E	; 78
    3d32:	30 e0       	ldi	r19, 0x00	; 0
    3d34:	ae e4       	ldi	r26, 0x4E	; 78
    3d36:	b0 e0       	ldi	r27, 0x00	; 0
    3d38:	ee e4       	ldi	r30, 0x4E	; 78
    3d3a:	f0 e0       	ldi	r31, 0x00	; 0
    3d3c:	80 81       	ld	r24, Z
    3d3e:	80 64       	ori	r24, 0x40	; 64
    3d40:	8c 93       	st	X, r24
    3d42:	8c 91       	ld	r24, X
    3d44:	f9 01       	movw	r30, r18
    3d46:	80 83       	st	Z, r24
    3d48:	0f c0       	rjmp	.+30     	; 0x3d68 <ICU_voidSetTriggerEdge+0x4a>
	}
	else if(Copy_u8Edge == ICU_FALLING_EDGE)
    3d4a:	89 81       	ldd	r24, Y+1	; 0x01
    3d4c:	82 30       	cpi	r24, 0x02	; 2
    3d4e:	61 f4       	brne	.+24     	; 0x3d68 <ICU_voidSetTriggerEdge+0x4a>
	{
		CLR_BIT(TCCR1B,TCCR1B_ICES1);
    3d50:	2e e4       	ldi	r18, 0x4E	; 78
    3d52:	30 e0       	ldi	r19, 0x00	; 0
    3d54:	ae e4       	ldi	r26, 0x4E	; 78
    3d56:	b0 e0       	ldi	r27, 0x00	; 0
    3d58:	ee e4       	ldi	r30, 0x4E	; 78
    3d5a:	f0 e0       	ldi	r31, 0x00	; 0
    3d5c:	80 81       	ld	r24, Z
    3d5e:	8f 7b       	andi	r24, 0xBF	; 191
    3d60:	8c 93       	st	X, r24
    3d62:	8c 91       	ld	r24, X
    3d64:	f9 01       	movw	r30, r18
    3d66:	80 83       	st	Z, r24
	}
}
    3d68:	0f 90       	pop	r0
    3d6a:	cf 91       	pop	r28
    3d6c:	df 91       	pop	r29
    3d6e:	08 95       	ret

00003d70 <ICU_u8SetCallBack>:

void ICU_u8SetCallBack(void (*Copy_pvCallBackFunc)(void))
{
    3d70:	df 93       	push	r29
    3d72:	cf 93       	push	r28
    3d74:	00 d0       	rcall	.+0      	; 0x3d76 <ICU_u8SetCallBack+0x6>
    3d76:	cd b7       	in	r28, 0x3d	; 61
    3d78:	de b7       	in	r29, 0x3e	; 62
    3d7a:	9a 83       	std	Y+2, r25	; 0x02
    3d7c:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_pvCallBackFunc != NULL)
    3d7e:	89 81       	ldd	r24, Y+1	; 0x01
    3d80:	9a 81       	ldd	r25, Y+2	; 0x02
    3d82:	00 97       	sbiw	r24, 0x00	; 0
    3d84:	31 f0       	breq	.+12     	; 0x3d92 <ICU_u8SetCallBack+0x22>
	{
		ICU_pvCallBackFunc = Copy_pvCallBackFunc;
    3d86:	89 81       	ldd	r24, Y+1	; 0x01
    3d88:	9a 81       	ldd	r25, Y+2	; 0x02
    3d8a:	90 93 44 05 	sts	0x0544, r25
    3d8e:	80 93 43 05 	sts	0x0543, r24
	}
	else
	{
		/*do nothing*/
	}
}
    3d92:	0f 90       	pop	r0
    3d94:	0f 90       	pop	r0
    3d96:	cf 91       	pop	r28
    3d98:	df 91       	pop	r29
    3d9a:	08 95       	ret

00003d9c <__vector__6>:

void __vector__6 (void) __attribute__((signal));
void __vector__6 (void)
{
    3d9c:	1f 92       	push	r1
    3d9e:	0f 92       	push	r0
    3da0:	0f b6       	in	r0, 0x3f	; 63
    3da2:	0f 92       	push	r0
    3da4:	11 24       	eor	r1, r1
    3da6:	2f 93       	push	r18
    3da8:	3f 93       	push	r19
    3daa:	4f 93       	push	r20
    3dac:	5f 93       	push	r21
    3dae:	6f 93       	push	r22
    3db0:	7f 93       	push	r23
    3db2:	8f 93       	push	r24
    3db4:	9f 93       	push	r25
    3db6:	af 93       	push	r26
    3db8:	bf 93       	push	r27
    3dba:	ef 93       	push	r30
    3dbc:	ff 93       	push	r31
    3dbe:	df 93       	push	r29
    3dc0:	cf 93       	push	r28
    3dc2:	cd b7       	in	r28, 0x3d	; 61
    3dc4:	de b7       	in	r29, 0x3e	; 62
	if(ICU_pvCallBackFunc != NULL)
    3dc6:	80 91 43 05 	lds	r24, 0x0543
    3dca:	90 91 44 05 	lds	r25, 0x0544
    3dce:	00 97       	sbiw	r24, 0x00	; 0
    3dd0:	29 f0       	breq	.+10     	; 0x3ddc <__vector__6+0x40>
	{
		ICU_pvCallBackFunc();
    3dd2:	e0 91 43 05 	lds	r30, 0x0543
    3dd6:	f0 91 44 05 	lds	r31, 0x0544
    3dda:	09 95       	icall
	}
}
    3ddc:	cf 91       	pop	r28
    3dde:	df 91       	pop	r29
    3de0:	ff 91       	pop	r31
    3de2:	ef 91       	pop	r30
    3de4:	bf 91       	pop	r27
    3de6:	af 91       	pop	r26
    3de8:	9f 91       	pop	r25
    3dea:	8f 91       	pop	r24
    3dec:	7f 91       	pop	r23
    3dee:	6f 91       	pop	r22
    3df0:	5f 91       	pop	r21
    3df2:	4f 91       	pop	r20
    3df4:	3f 91       	pop	r19
    3df6:	2f 91       	pop	r18
    3df8:	0f 90       	pop	r0
    3dfa:	0f be       	out	0x3f, r0	; 63
    3dfc:	0f 90       	pop	r0
    3dfe:	1f 90       	pop	r1
    3e00:	18 95       	reti

00003e02 <USART_voidInit>:
u8 * Global_u8ptrReading = NULL;

void (*GlobalPtrTOFunc)(void)=NULL;

void USART_voidInit(void)
{
    3e02:	df 93       	push	r29
    3e04:	cf 93       	push	r28
    3e06:	cd b7       	in	r28, 0x3d	; 61
    3e08:	de b7       	in	r29, 0x3e	; 62
	/*Set Baud Rate to 9600 bPS*/
	UBRRL = 51;
    3e0a:	e9 e2       	ldi	r30, 0x29	; 41
    3e0c:	f0 e0       	ldi	r31, 0x00	; 0
    3e0e:	83 e3       	ldi	r24, 0x33	; 51
    3e10:	80 83       	st	Z, r24

	/*Enable Receiver & Transmitter*/
	UCSRB = (1<<UCSRB_RXEN) | (1<<UCSRB_TXEN);
    3e12:	ea e2       	ldi	r30, 0x2A	; 42
    3e14:	f0 e0       	ldi	r31, 0x00	; 0
    3e16:	88 e1       	ldi	r24, 0x18	; 24
    3e18:	80 83       	st	Z, r24

	/*Set frame format: 8-bits data, 1 stop bit*/
	UCSRC = (1<<UCSRC_URSEL) | (1<<UCSRC_UCSZ1) | (1<<UCSRC_UCSZ0);
    3e1a:	e0 e4       	ldi	r30, 0x40	; 64
    3e1c:	f0 e0       	ldi	r31, 0x00	; 0
    3e1e:	86 e8       	ldi	r24, 0x86	; 134
    3e20:	80 83       	st	Z, r24
}
    3e22:	cf 91       	pop	r28
    3e24:	df 91       	pop	r29
    3e26:	08 95       	ret

00003e28 <USART_voidTransmitDataSync>:

void USART_voidTransmitDataSync(u8 Copy_u8Data)
{
    3e28:	df 93       	push	r29
    3e2a:	cf 93       	push	r28
    3e2c:	0f 92       	push	r0
    3e2e:	cd b7       	in	r28, 0x3d	; 61
    3e30:	de b7       	in	r29, 0x3e	; 62
    3e32:	89 83       	std	Y+1, r24	; 0x01
	/* Wait for empty transmit buffer */
	/* wait : while GETBIT(UCSRA,UCSRA_UDRE) == 0*/
	while ( !( UCSRA & (1<<UCSRA_UDRE)) );
    3e34:	eb e2       	ldi	r30, 0x2B	; 43
    3e36:	f0 e0       	ldi	r31, 0x00	; 0
    3e38:	80 81       	ld	r24, Z
    3e3a:	88 2f       	mov	r24, r24
    3e3c:	90 e0       	ldi	r25, 0x00	; 0
    3e3e:	80 72       	andi	r24, 0x20	; 32
    3e40:	90 70       	andi	r25, 0x00	; 0
    3e42:	00 97       	sbiw	r24, 0x00	; 0
    3e44:	b9 f3       	breq	.-18     	; 0x3e34 <USART_voidTransmitDataSync+0xc>

	/* Put data into buffer, sends the data */
	UDR = Copy_u8Data;
    3e46:	ec e2       	ldi	r30, 0x2C	; 44
    3e48:	f0 e0       	ldi	r31, 0x00	; 0
    3e4a:	89 81       	ldd	r24, Y+1	; 0x01
    3e4c:	80 83       	st	Z, r24

	/*wait till transmit is complete*/
	while( !(UCSRA & (1<<UCSRA_TXC)) );
    3e4e:	eb e2       	ldi	r30, 0x2B	; 43
    3e50:	f0 e0       	ldi	r31, 0x00	; 0
    3e52:	80 81       	ld	r24, Z
    3e54:	88 2f       	mov	r24, r24
    3e56:	90 e0       	ldi	r25, 0x00	; 0
    3e58:	80 74       	andi	r24, 0x40	; 64
    3e5a:	90 70       	andi	r25, 0x00	; 0
    3e5c:	00 97       	sbiw	r24, 0x00	; 0
    3e5e:	b9 f3       	breq	.-18     	; 0x3e4e <USART_voidTransmitDataSync+0x26>

	/*setting the flag back*/
	SET_BIT(UCSRA, UCSRA_TXC);
    3e60:	2b e2       	ldi	r18, 0x2B	; 43
    3e62:	30 e0       	ldi	r19, 0x00	; 0
    3e64:	ab e2       	ldi	r26, 0x2B	; 43
    3e66:	b0 e0       	ldi	r27, 0x00	; 0
    3e68:	eb e2       	ldi	r30, 0x2B	; 43
    3e6a:	f0 e0       	ldi	r31, 0x00	; 0
    3e6c:	80 81       	ld	r24, Z
    3e6e:	80 64       	ori	r24, 0x40	; 64
    3e70:	8c 93       	st	X, r24
    3e72:	8c 91       	ld	r24, X
    3e74:	f9 01       	movw	r30, r18
    3e76:	80 83       	st	Z, r24
}
    3e78:	0f 90       	pop	r0
    3e7a:	cf 91       	pop	r28
    3e7c:	df 91       	pop	r29
    3e7e:	08 95       	ret

00003e80 <USART_u8ReceiveDataSync>:

u8 USART_u8ReceiveDataSync(void)
{
    3e80:	df 93       	push	r29
    3e82:	cf 93       	push	r28
    3e84:	cd b7       	in	r28, 0x3d	; 61
    3e86:	de b7       	in	r29, 0x3e	; 62
	/* Wait for data to be received */
	/* wait : while there is no data to read */
	while ( GET_BIT(UCSRA, UCSRA_RXC)==0 );
    3e88:	eb e2       	ldi	r30, 0x2B	; 43
    3e8a:	f0 e0       	ldi	r31, 0x00	; 0
    3e8c:	80 81       	ld	r24, Z
    3e8e:	88 23       	and	r24, r24
    3e90:	dc f7       	brge	.-10     	; 0x3e88 <USART_u8ReceiveDataSync+0x8>

	/* Get and return received data from buffer */
	return UDR;
    3e92:	ec e2       	ldi	r30, 0x2C	; 44
    3e94:	f0 e0       	ldi	r31, 0x00	; 0
    3e96:	80 81       	ld	r24, Z
}
    3e98:	cf 91       	pop	r28
    3e9a:	df 91       	pop	r29
    3e9c:	08 95       	ret

00003e9e <USART_voidRecieveDataAsync>:

void USART_voidRecieveDataAsync(u8 * Copy_u8Reading, void(*PTF_Application)(void))
{
    3e9e:	df 93       	push	r29
    3ea0:	cf 93       	push	r28
    3ea2:	00 d0       	rcall	.+0      	; 0x3ea4 <USART_voidRecieveDataAsync+0x6>
    3ea4:	00 d0       	rcall	.+0      	; 0x3ea6 <USART_voidRecieveDataAsync+0x8>
    3ea6:	cd b7       	in	r28, 0x3d	; 61
    3ea8:	de b7       	in	r29, 0x3e	; 62
    3eaa:	9a 83       	std	Y+2, r25	; 0x02
    3eac:	89 83       	std	Y+1, r24	; 0x01
    3eae:	7c 83       	std	Y+4, r23	; 0x04
    3eb0:	6b 83       	std	Y+3, r22	; 0x03
	/*enable global interrupt*/
	GIE_voidEnable();
    3eb2:	0e 94 19 18 	call	0x3032	; 0x3032 <GIE_voidEnable>

	/*pass reading address to global variable*/
	Global_u8ptrReading = Copy_u8Reading;
    3eb6:	89 81       	ldd	r24, Y+1	; 0x01
    3eb8:	9a 81       	ldd	r25, Y+2	; 0x02
    3eba:	90 93 46 05 	sts	0x0546, r25
    3ebe:	80 93 45 05 	sts	0x0545, r24

	/*pass application function to be executed in ISR*/
	GlobalPtrTOFunc = PTF_Application;
    3ec2:	8b 81       	ldd	r24, Y+3	; 0x03
    3ec4:	9c 81       	ldd	r25, Y+4	; 0x04
    3ec6:	90 93 48 05 	sts	0x0548, r25
    3eca:	80 93 47 05 	sts	0x0547, r24

	/*enable recieve complete interrupt*/
	SET_BIT(UCSRB, UCSRB_RXCIE);
    3ece:	2a e2       	ldi	r18, 0x2A	; 42
    3ed0:	30 e0       	ldi	r19, 0x00	; 0
    3ed2:	aa e2       	ldi	r26, 0x2A	; 42
    3ed4:	b0 e0       	ldi	r27, 0x00	; 0
    3ed6:	ea e2       	ldi	r30, 0x2A	; 42
    3ed8:	f0 e0       	ldi	r31, 0x00	; 0
    3eda:	80 81       	ld	r24, Z
    3edc:	80 68       	ori	r24, 0x80	; 128
    3ede:	8c 93       	st	X, r24
    3ee0:	8c 91       	ld	r24, X
    3ee2:	f9 01       	movw	r30, r18
    3ee4:	80 83       	st	Z, r24
}
    3ee6:	0f 90       	pop	r0
    3ee8:	0f 90       	pop	r0
    3eea:	0f 90       	pop	r0
    3eec:	0f 90       	pop	r0
    3eee:	cf 91       	pop	r28
    3ef0:	df 91       	pop	r29
    3ef2:	08 95       	ret

00003ef4 <USART_voidSendString>:

void USART_voidSendString(u8 Copy_Arr[])
{
    3ef4:	df 93       	push	r29
    3ef6:	cf 93       	push	r28
    3ef8:	00 d0       	rcall	.+0      	; 0x3efa <USART_voidSendString+0x6>
    3efa:	0f 92       	push	r0
    3efc:	cd b7       	in	r28, 0x3d	; 61
    3efe:	de b7       	in	r29, 0x3e	; 62
    3f00:	9b 83       	std	Y+3, r25	; 0x03
    3f02:	8a 83       	std	Y+2, r24	; 0x02
    3f04:	0e c0       	rjmp	.+28     	; 0x3f22 <USART_voidSendString+0x2e>
	u8 Local_u8Iterator;

	while(Copy_Arr[Local_u8Iterator] != '\0')
	{
		USART_voidTransmitDataSync(Copy_Arr[Local_u8Iterator]);
    3f06:	89 81       	ldd	r24, Y+1	; 0x01
    3f08:	28 2f       	mov	r18, r24
    3f0a:	30 e0       	ldi	r19, 0x00	; 0
    3f0c:	8a 81       	ldd	r24, Y+2	; 0x02
    3f0e:	9b 81       	ldd	r25, Y+3	; 0x03
    3f10:	fc 01       	movw	r30, r24
    3f12:	e2 0f       	add	r30, r18
    3f14:	f3 1f       	adc	r31, r19
    3f16:	80 81       	ld	r24, Z
    3f18:	0e 94 14 1f 	call	0x3e28	; 0x3e28 <USART_voidTransmitDataSync>
		Local_u8Iterator ++;
    3f1c:	89 81       	ldd	r24, Y+1	; 0x01
    3f1e:	8f 5f       	subi	r24, 0xFF	; 255
    3f20:	89 83       	std	Y+1, r24	; 0x01

void USART_voidSendString(u8 Copy_Arr[])
{
	u8 Local_u8Iterator;

	while(Copy_Arr[Local_u8Iterator] != '\0')
    3f22:	89 81       	ldd	r24, Y+1	; 0x01
    3f24:	28 2f       	mov	r18, r24
    3f26:	30 e0       	ldi	r19, 0x00	; 0
    3f28:	8a 81       	ldd	r24, Y+2	; 0x02
    3f2a:	9b 81       	ldd	r25, Y+3	; 0x03
    3f2c:	fc 01       	movw	r30, r24
    3f2e:	e2 0f       	add	r30, r18
    3f30:	f3 1f       	adc	r31, r19
    3f32:	80 81       	ld	r24, Z
    3f34:	88 23       	and	r24, r24
    3f36:	39 f7       	brne	.-50     	; 0x3f06 <USART_voidSendString+0x12>
	{
		USART_voidTransmitDataSync(Copy_Arr[Local_u8Iterator]);
		Local_u8Iterator ++;
	}
}
    3f38:	0f 90       	pop	r0
    3f3a:	0f 90       	pop	r0
    3f3c:	0f 90       	pop	r0
    3f3e:	cf 91       	pop	r28
    3f40:	df 91       	pop	r29
    3f42:	08 95       	ret

00003f44 <USART_voidReceiveString>:

void USART_voidReceiveString(u8 * Copy_u8Arr)
{
    3f44:	0f 93       	push	r16
    3f46:	1f 93       	push	r17
    3f48:	df 93       	push	r29
    3f4a:	cf 93       	push	r28
    3f4c:	00 d0       	rcall	.+0      	; 0x3f4e <USART_voidReceiveString+0xa>
    3f4e:	0f 92       	push	r0
    3f50:	cd b7       	in	r28, 0x3d	; 61
    3f52:	de b7       	in	r29, 0x3e	; 62
    3f54:	9b 83       	std	Y+3, r25	; 0x03
    3f56:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8Iterator=0;
    3f58:	19 82       	std	Y+1, r1	; 0x01

	Copy_u8Arr[Local_u8Iterator]=USART_u8ReceiveDataSync();
    3f5a:	89 81       	ldd	r24, Y+1	; 0x01
    3f5c:	28 2f       	mov	r18, r24
    3f5e:	30 e0       	ldi	r19, 0x00	; 0
    3f60:	8a 81       	ldd	r24, Y+2	; 0x02
    3f62:	9b 81       	ldd	r25, Y+3	; 0x03
    3f64:	8c 01       	movw	r16, r24
    3f66:	02 0f       	add	r16, r18
    3f68:	13 1f       	adc	r17, r19
    3f6a:	0e 94 40 1f 	call	0x3e80	; 0x3e80 <USART_u8ReceiveDataSync>
    3f6e:	f8 01       	movw	r30, r16
    3f70:	80 83       	st	Z, r24
    3f72:	0f c0       	rjmp	.+30     	; 0x3f92 <USART_voidReceiveString+0x4e>

	while(Copy_u8Arr[Local_u8Iterator] != '#')
	{
		Local_u8Iterator++;
    3f74:	89 81       	ldd	r24, Y+1	; 0x01
    3f76:	8f 5f       	subi	r24, 0xFF	; 255
    3f78:	89 83       	std	Y+1, r24	; 0x01
		Copy_u8Arr[Local_u8Iterator]=USART_u8ReceiveDataSync();
    3f7a:	89 81       	ldd	r24, Y+1	; 0x01
    3f7c:	28 2f       	mov	r18, r24
    3f7e:	30 e0       	ldi	r19, 0x00	; 0
    3f80:	8a 81       	ldd	r24, Y+2	; 0x02
    3f82:	9b 81       	ldd	r25, Y+3	; 0x03
    3f84:	8c 01       	movw	r16, r24
    3f86:	02 0f       	add	r16, r18
    3f88:	13 1f       	adc	r17, r19
    3f8a:	0e 94 40 1f 	call	0x3e80	; 0x3e80 <USART_u8ReceiveDataSync>
    3f8e:	f8 01       	movw	r30, r16
    3f90:	80 83       	st	Z, r24
{
	u8 Local_u8Iterator=0;

	Copy_u8Arr[Local_u8Iterator]=USART_u8ReceiveDataSync();

	while(Copy_u8Arr[Local_u8Iterator] != '#')
    3f92:	89 81       	ldd	r24, Y+1	; 0x01
    3f94:	28 2f       	mov	r18, r24
    3f96:	30 e0       	ldi	r19, 0x00	; 0
    3f98:	8a 81       	ldd	r24, Y+2	; 0x02
    3f9a:	9b 81       	ldd	r25, Y+3	; 0x03
    3f9c:	fc 01       	movw	r30, r24
    3f9e:	e2 0f       	add	r30, r18
    3fa0:	f3 1f       	adc	r31, r19
    3fa2:	80 81       	ld	r24, Z
    3fa4:	83 32       	cpi	r24, 0x23	; 35
    3fa6:	31 f7       	brne	.-52     	; 0x3f74 <USART_voidReceiveString+0x30>
	{
		Local_u8Iterator++;
		Copy_u8Arr[Local_u8Iterator]=USART_u8ReceiveDataSync();
	}
	Copy_u8Arr[Local_u8Iterator] = '\0';
    3fa8:	89 81       	ldd	r24, Y+1	; 0x01
    3faa:	28 2f       	mov	r18, r24
    3fac:	30 e0       	ldi	r19, 0x00	; 0
    3fae:	8a 81       	ldd	r24, Y+2	; 0x02
    3fb0:	9b 81       	ldd	r25, Y+3	; 0x03
    3fb2:	fc 01       	movw	r30, r24
    3fb4:	e2 0f       	add	r30, r18
    3fb6:	f3 1f       	adc	r31, r19
    3fb8:	10 82       	st	Z, r1
}
    3fba:	0f 90       	pop	r0
    3fbc:	0f 90       	pop	r0
    3fbe:	0f 90       	pop	r0
    3fc0:	cf 91       	pop	r28
    3fc2:	df 91       	pop	r29
    3fc4:	1f 91       	pop	r17
    3fc6:	0f 91       	pop	r16
    3fc8:	08 95       	ret

00003fca <__vector_13>:

void __vector_13(void) __attribute__((signal));
void __vector_13(void)
{
    3fca:	1f 92       	push	r1
    3fcc:	0f 92       	push	r0
    3fce:	0f b6       	in	r0, 0x3f	; 63
    3fd0:	0f 92       	push	r0
    3fd2:	11 24       	eor	r1, r1
    3fd4:	2f 93       	push	r18
    3fd6:	3f 93       	push	r19
    3fd8:	4f 93       	push	r20
    3fda:	5f 93       	push	r21
    3fdc:	6f 93       	push	r22
    3fde:	7f 93       	push	r23
    3fe0:	8f 93       	push	r24
    3fe2:	9f 93       	push	r25
    3fe4:	af 93       	push	r26
    3fe6:	bf 93       	push	r27
    3fe8:	ef 93       	push	r30
    3fea:	ff 93       	push	r31
    3fec:	df 93       	push	r29
    3fee:	cf 93       	push	r28
    3ff0:	cd b7       	in	r28, 0x3d	; 61
    3ff2:	de b7       	in	r29, 0x3e	; 62
	*Global_u8ptrReading = UDR;
    3ff4:	a0 91 45 05 	lds	r26, 0x0545
    3ff8:	b0 91 46 05 	lds	r27, 0x0546
    3ffc:	ec e2       	ldi	r30, 0x2C	; 44
    3ffe:	f0 e0       	ldi	r31, 0x00	; 0
    4000:	80 81       	ld	r24, Z
    4002:	8c 93       	st	X, r24

	if(GlobalPtrTOFunc != NULL)
    4004:	80 91 47 05 	lds	r24, 0x0547
    4008:	90 91 48 05 	lds	r25, 0x0548
    400c:	00 97       	sbiw	r24, 0x00	; 0
    400e:	29 f0       	breq	.+10     	; 0x401a <__vector_13+0x50>
	{
		GlobalPtrTOFunc();
    4010:	e0 91 47 05 	lds	r30, 0x0547
    4014:	f0 91 48 05 	lds	r31, 0x0548
    4018:	09 95       	icall
	}
}
    401a:	cf 91       	pop	r28
    401c:	df 91       	pop	r29
    401e:	ff 91       	pop	r31
    4020:	ef 91       	pop	r30
    4022:	bf 91       	pop	r27
    4024:	af 91       	pop	r26
    4026:	9f 91       	pop	r25
    4028:	8f 91       	pop	r24
    402a:	7f 91       	pop	r23
    402c:	6f 91       	pop	r22
    402e:	5f 91       	pop	r21
    4030:	4f 91       	pop	r20
    4032:	3f 91       	pop	r19
    4034:	2f 91       	pop	r18
    4036:	0f 90       	pop	r0
    4038:	0f be       	out	0x3f, r0	; 63
    403a:	0f 90       	pop	r0
    403c:	1f 90       	pop	r1
    403e:	18 95       	reti

00004040 <main>:
/******************************************************************/
/****************************** main ******************************/
/******************************************************************/

int main(void)
{
    4040:	df 93       	push	r29
    4042:	cf 93       	push	r28
    4044:	cd b7       	in	r28, 0x3d	; 61
    4046:	de b7       	in	r29, 0x3e	; 62
    4048:	e3 97       	sbiw	r28, 0x33	; 51
    404a:	0f b6       	in	r0, 0x3f	; 63
    404c:	f8 94       	cli
    404e:	de bf       	out	0x3e, r29	; 62
    4050:	0f be       	out	0x3f, r0	; 63
    4052:	cd bf       	out	0x3d, r28	; 61

#define Try_times      3

	/************** Variables **************/

	u8 Local_u8OperatingMode = 0;          //admin or user *
    4054:	1f 8a       	std	Y+23, r1	; 0x17
	u8 Local_u8AdminMode = 0;              // add, modify, delete
    4056:	18 8e       	std	Y+24, r1	; 0x18
	u8 Local_u8EnteredAdminPW[4];          //entered admin PW
	u8 Local_u8Iterator = 0;
    4058:	1e 8a       	std	Y+22, r1	; 0x16
	u8 Local_u8PWValidation = 0;           //approve the password
    405a:	1d 8a       	std	Y+21, r1	; 0x15
	u8 Local_u8EnteredUserName[4];         //user name entered
	u8 Local_u8UserNameValidation = 0;     //check for entered user name
    405c:	1c 8a       	std	Y+20, r1	; 0x14
	u8 Local_u8EnteredUserPW[4];
	u8 Local_u8NewIDNum;
	u8 Local_u8NewIDNumStr;
	u8 Local_u8NewIDStr[5];
	u8 Local_u8NewIDPW[5];
	u8 Local_u8UserIn = 0;
    405e:	1a 8a       	std	Y+18, r1	; 0x12
	u16 Reading = 0;
    4060:	19 8a       	std	Y+17, r1	; 0x11
    4062:	18 8a       	std	Y+16, r1	; 0x10

	/********* PINS configurations **********/
	/*LEDs*/
	LED_Init(DIO_u8PORTA, DIO_u8PIN1);
    4064:	80 e0       	ldi	r24, 0x00	; 0
    4066:	61 e0       	ldi	r22, 0x01	; 1
    4068:	0e 94 3f 18 	call	0x307e	; 0x307e <LED_Init>
	LED_Init(DIO_u8PORTA, DIO_u8PIN2);
    406c:	80 e0       	ldi	r24, 0x00	; 0
    406e:	62 e0       	ldi	r22, 0x02	; 2
    4070:	0e 94 3f 18 	call	0x307e	; 0x307e <LED_Init>

	/*LCD*/
	LCD_voidLCDInit();
    4074:	0e 94 3c 08 	call	0x1078	; 0x1078 <LCD_voidLCDInit>
	LCD_voidGoTORowCol(0,3);
    4078:	80 e0       	ldi	r24, 0x00	; 0
    407a:	63 e0       	ldi	r22, 0x03	; 3
    407c:	0e 94 6f 0e 	call	0x1cde	; 0x1cde <LCD_voidGoTORowCol>
	LCD_voidSendString("Welcome to");
    4080:	80 e6       	ldi	r24, 0x60	; 96
    4082:	90 e0       	ldi	r25, 0x00	; 0
    4084:	0e 94 46 0e 	call	0x1c8c	; 0x1c8c <LCD_voidSendString>
	LCD_voidGoTORowCol(1,3);
    4088:	81 e0       	ldi	r24, 0x01	; 1
    408a:	63 e0       	ldi	r22, 0x03	; 3
    408c:	0e 94 6f 0e 	call	0x1cde	; 0x1cde <LCD_voidGoTORowCol>
	LCD_voidSendString("Smart Home");
    4090:	8b e6       	ldi	r24, 0x6B	; 107
    4092:	90 e0       	ldi	r25, 0x00	; 0
    4094:	0e 94 46 0e 	call	0x1c8c	; 0x1c8c <LCD_voidSendString>

	/*TWI*/
	TWI_voidMasterInitialize(NULL);
    4098:	80 e0       	ldi	r24, 0x00	; 0
    409a:	0e 94 a1 19 	call	0x3342	; 0x3342 <TWI_voidMasterInitialize>

	/*OC1A (Servo motor)*/
	DIO_u8SetPinDirection(DIO_u8PORTD, DIO_u8PIN5, DIO_u8PIN_OUTPUT);
    409e:	83 e0       	ldi	r24, 0x03	; 3
    40a0:	65 e0       	ldi	r22, 0x05	; 5
    40a2:	41 e0       	ldi	r20, 0x01	; 1
    40a4:	0e 94 a1 10 	call	0x2142	; 0x2142 <DIO_u8SetPinDirection>

	DIO_u8SetPinDirection(DIO_u8PORTA,DIO_u8PIN0, DIO_u8PIN_INPUT);
    40a8:	80 e0       	ldi	r24, 0x00	; 0
    40aa:	60 e0       	ldi	r22, 0x00	; 0
    40ac:	40 e0       	ldi	r20, 0x00	; 0
    40ae:	0e 94 a1 10 	call	0x2142	; 0x2142 <DIO_u8SetPinDirection>

	/*RX*/
	DIO_u8SetPinDirection(DIO_u8PORTD, DIO_u8PIN0, DIO_u8PIN_INPUT);
    40b2:	83 e0       	ldi	r24, 0x03	; 3
    40b4:	60 e0       	ldi	r22, 0x00	; 0
    40b6:	40 e0       	ldi	r20, 0x00	; 0
    40b8:	0e 94 a1 10 	call	0x2142	; 0x2142 <DIO_u8SetPinDirection>

	/*TX*/
	DIO_u8SetPinDirection(DIO_u8PORTD, DIO_u8PIN1, DIO_u8PIN_OUTPUT);
    40bc:	83 e0       	ldi	r24, 0x03	; 3
    40be:	61 e0       	ldi	r22, 0x01	; 1
    40c0:	41 e0       	ldi	r20, 0x01	; 1
    40c2:	0e 94 a1 10 	call	0x2142	; 0x2142 <DIO_u8SetPinDirection>

	/********** UART Initialization *********/
	USART_voidInit();
    40c6:	0e 94 01 1f 	call	0x3e02	; 0x3e02 <USART_voidInit>
	//Local_u8IDComp = Check_u8UserID(&Local_u8IDstr);
	/****************************************/
	/*************** Program ****************/
	/*set admin password in EEPROM*/
	App_voidAdminAddUserPW(15, "999");
    40ca:	26 e7       	ldi	r18, 0x76	; 118
    40cc:	30 e0       	ldi	r19, 0x00	; 0
    40ce:	8f e0       	ldi	r24, 0x0F	; 15
    40d0:	90 e0       	ldi	r25, 0x00	; 0
    40d2:	b9 01       	movw	r22, r18
    40d4:	0e 94 58 25 	call	0x4ab0	; 0x4ab0 <App_voidAdminAddUserPW>

	/*Set user 1 name and PW in EEPROM*/
	App_voidAdminAddUser(0, &ID_1);
    40d8:	20 e3       	ldi	r18, 0x30	; 48
    40da:	35 e0       	ldi	r19, 0x05	; 5
    40dc:	80 e0       	ldi	r24, 0x00	; 0
    40de:	90 e0       	ldi	r25, 0x00	; 0
    40e0:	b9 01       	movw	r22, r18
    40e2:	0e 94 31 25 	call	0x4a62	; 0x4a62 <App_voidAdminAddUser>
	App_voidAdminAddUserPW(0, &PW_1);
    40e6:	25 e3       	ldi	r18, 0x35	; 53
    40e8:	35 e0       	ldi	r19, 0x05	; 5
    40ea:	80 e0       	ldi	r24, 0x00	; 0
    40ec:	90 e0       	ldi	r25, 0x00	; 0
    40ee:	b9 01       	movw	r22, r18
    40f0:	0e 94 58 25 	call	0x4ab0	; 0x4ab0 <App_voidAdminAddUserPW>

	/*get user names and passwords from EEPROM*/
	/*get saved PW from EEPROM*/
	EEPROM_voidReceiveStr(145, PW_A, 4);
    40f4:	2b e2       	ldi	r18, 0x2B	; 43
    40f6:	35 e0       	ldi	r19, 0x05	; 5
    40f8:	81 e9       	ldi	r24, 0x91	; 145
    40fa:	90 e0       	ldi	r25, 0x00	; 0
    40fc:	b9 01       	movw	r22, r18
    40fe:	44 e0       	ldi	r20, 0x04	; 4
    4100:	0e 94 3e 17 	call	0x2e7c	; 0x2e7c <EEPROM_voidReceiveStr>

	EEPROM_voidReceiveStr(0, ID_1, 4);
    4104:	20 e3       	ldi	r18, 0x30	; 48
    4106:	35 e0       	ldi	r19, 0x05	; 5
    4108:	80 e0       	ldi	r24, 0x00	; 0
    410a:	90 e0       	ldi	r25, 0x00	; 0
    410c:	b9 01       	movw	r22, r18
    410e:	44 e0       	ldi	r20, 0x04	; 4
    4110:	0e 94 3e 17 	call	0x2e7c	; 0x2e7c <EEPROM_voidReceiveStr>
	EEPROM_voidReceiveStr(5, PW_1, 4);
    4114:	25 e3       	ldi	r18, 0x35	; 53
    4116:	35 e0       	ldi	r19, 0x05	; 5
    4118:	85 e0       	ldi	r24, 0x05	; 5
    411a:	90 e0       	ldi	r25, 0x00	; 0
    411c:	b9 01       	movw	r22, r18
    411e:	44 e0       	ldi	r20, 0x04	; 4
    4120:	0e 94 3e 17 	call	0x2e7c	; 0x2e7c <EEPROM_voidReceiveStr>

	EEPROM_voidReceiveStr(10, ID_2, 4);
    4124:	27 e6       	ldi	r18, 0x67	; 103
    4126:	35 e0       	ldi	r19, 0x05	; 5
    4128:	8a e0       	ldi	r24, 0x0A	; 10
    412a:	90 e0       	ldi	r25, 0x00	; 0
    412c:	b9 01       	movw	r22, r18
    412e:	44 e0       	ldi	r20, 0x04	; 4
    4130:	0e 94 3e 17 	call	0x2e7c	; 0x2e7c <EEPROM_voidReceiveStr>
	EEPROM_voidReceiveStr(15, PW_2, 4);
    4134:	28 e5       	ldi	r18, 0x58	; 88
    4136:	35 e0       	ldi	r19, 0x05	; 5
    4138:	8f e0       	ldi	r24, 0x0F	; 15
    413a:	90 e0       	ldi	r25, 0x00	; 0
    413c:	b9 01       	movw	r22, r18
    413e:	44 e0       	ldi	r20, 0x04	; 4
    4140:	0e 94 3e 17 	call	0x2e7c	; 0x2e7c <EEPROM_voidReceiveStr>

	EEPROM_voidReceiveStr(20, ID_3, 4);
    4144:	23 e5       	ldi	r18, 0x53	; 83
    4146:	35 e0       	ldi	r19, 0x05	; 5
    4148:	84 e1       	ldi	r24, 0x14	; 20
    414a:	90 e0       	ldi	r25, 0x00	; 0
    414c:	b9 01       	movw	r22, r18
    414e:	44 e0       	ldi	r20, 0x04	; 4
    4150:	0e 94 3e 17 	call	0x2e7c	; 0x2e7c <EEPROM_voidReceiveStr>
	EEPROM_voidReceiveStr(25, PW_3, 4);
    4154:	2e e4       	ldi	r18, 0x4E	; 78
    4156:	35 e0       	ldi	r19, 0x05	; 5
    4158:	89 e1       	ldi	r24, 0x19	; 25
    415a:	90 e0       	ldi	r25, 0x00	; 0
    415c:	b9 01       	movw	r22, r18
    415e:	44 e0       	ldi	r20, 0x04	; 4
    4160:	0e 94 3e 17 	call	0x2e7c	; 0x2e7c <EEPROM_voidReceiveStr>

	EEPROM_voidReceiveStr(30, ID_4, 4);
    4164:	29 e4       	ldi	r18, 0x49	; 73
    4166:	35 e0       	ldi	r19, 0x05	; 5
    4168:	8e e1       	ldi	r24, 0x1E	; 30
    416a:	90 e0       	ldi	r25, 0x00	; 0
    416c:	b9 01       	movw	r22, r18
    416e:	44 e0       	ldi	r20, 0x04	; 4
    4170:	0e 94 3e 17 	call	0x2e7c	; 0x2e7c <EEPROM_voidReceiveStr>
	EEPROM_voidReceiveStr(35, PW_4, 4);
    4174:	22 e6       	ldi	r18, 0x62	; 98
    4176:	35 e0       	ldi	r19, 0x05	; 5
    4178:	83 e2       	ldi	r24, 0x23	; 35
    417a:	90 e0       	ldi	r25, 0x00	; 0
    417c:	b9 01       	movw	r22, r18
    417e:	44 e0       	ldi	r20, 0x04	; 4
    4180:	0e 94 3e 17 	call	0x2e7c	; 0x2e7c <EEPROM_voidReceiveStr>

	EEPROM_voidReceiveStr(40, ID_5, 4);
    4184:	2d e5       	ldi	r18, 0x5D	; 93
    4186:	35 e0       	ldi	r19, 0x05	; 5
    4188:	88 e2       	ldi	r24, 0x28	; 40
    418a:	90 e0       	ldi	r25, 0x00	; 0
    418c:	b9 01       	movw	r22, r18
    418e:	44 e0       	ldi	r20, 0x04	; 4
    4190:	0e 94 3e 17 	call	0x2e7c	; 0x2e7c <EEPROM_voidReceiveStr>
	EEPROM_voidReceiveStr(45, PW_5, 4);
    4194:	2c e6       	ldi	r18, 0x6C	; 108
    4196:	35 e0       	ldi	r19, 0x05	; 5
    4198:	8d e2       	ldi	r24, 0x2D	; 45
    419a:	90 e0       	ldi	r25, 0x00	; 0
    419c:	b9 01       	movw	r22, r18
    419e:	44 e0       	ldi	r20, 0x04	; 4
    41a0:	0e 94 3e 17 	call	0x2e7c	; 0x2e7c <EEPROM_voidReceiveStr>

	/*Ask Admin or User mode*/
	USART_voidSendString("\r\nfor Admin mode, enter 1\r\nfor user mode, enter 2 : \r\n");
    41a4:	8a e7       	ldi	r24, 0x7A	; 122
    41a6:	90 e0       	ldi	r25, 0x00	; 0
    41a8:	0e 94 7a 1f 	call	0x3ef4	; 0x3ef4 <USART_voidSendString>
	USART_voidReceiveString(&Local_u8OperatingMode);
    41ac:	ce 01       	movw	r24, r28
    41ae:	47 96       	adiw	r24, 0x17	; 23
    41b0:	0e 94 a2 1f 	call	0x3f44	; 0x3f44 <USART_voidReceiveString>
	if(Local_u8OperatingMode == '1')         //Admin mode (check for password)
    41b4:	8f 89       	ldd	r24, Y+23	; 0x17
    41b6:	81 33       	cpi	r24, 0x31	; 49
    41b8:	09 f0       	breq	.+2      	; 0x41bc <main+0x17c>
    41ba:	46 c0       	rjmp	.+140    	; 0x4248 <main+0x208>
	{
		/*check for the password*/
		Local_u8Iterator = 0;
    41bc:	1e 8a       	std	Y+22, r1	; 0x16
    41be:	3f c0       	rjmp	.+126    	; 0x423e <main+0x1fe>
		while(Local_u8Iterator < Try_times)
		{
			/*Ask for password*/

			LCD_voidClearScreen();
    41c0:	0e 94 d5 0f 	call	0x1faa	; 0x1faa <LCD_voidClearScreen>
			LCD_voidGoTORowCol(0,0);
    41c4:	80 e0       	ldi	r24, 0x00	; 0
    41c6:	60 e0       	ldi	r22, 0x00	; 0
    41c8:	0e 94 6f 0e 	call	0x1cde	; 0x1cde <LCD_voidGoTORowCol>
			LCD_voidSendString("Entr Admn PW:");
    41cc:	81 eb       	ldi	r24, 0xB1	; 177
    41ce:	90 e0       	ldi	r25, 0x00	; 0
    41d0:	0e 94 46 0e 	call	0x1c8c	; 0x1c8c <LCD_voidSendString>
			USART_voidSendString("\r\nEnter Admin Password : \r\n");
    41d4:	8f eb       	ldi	r24, 0xBF	; 191
    41d6:	90 e0       	ldi	r25, 0x00	; 0
    41d8:	0e 94 7a 1f 	call	0x3ef4	; 0x3ef4 <USART_voidSendString>

			USART_voidReceiveString(Local_u8EnteredAdminPW);
    41dc:	ce 01       	movw	r24, r28
    41de:	49 96       	adiw	r24, 0x19	; 25
    41e0:	0e 94 a2 1f 	call	0x3f44	; 0x3f44 <USART_voidReceiveString>

			Local_u8PWValidation = String_u8CompareElements(Local_u8EnteredAdminPW, PW_A);
    41e4:	ce 01       	movw	r24, r28
    41e6:	49 96       	adiw	r24, 0x19	; 25
    41e8:	2b e2       	ldi	r18, 0x2B	; 43
    41ea:	35 e0       	ldi	r19, 0x05	; 5
    41ec:	b9 01       	movw	r22, r18
    41ee:	0e 94 5e 24 	call	0x48bc	; 0x48bc <String_u8CompareElements>
    41f2:	8d 8b       	std	Y+21, r24	; 0x15

			if(Local_u8PWValidation == 1)  //right PW
    41f4:	8d 89       	ldd	r24, Y+21	; 0x15
    41f6:	81 30       	cpi	r24, 0x01	; 1
    41f8:	89 f4       	brne	.+34     	; 0x421c <main+0x1dc>
			{
				USART_voidSendString("\r\nValid PW! \r\n");
    41fa:	8b ed       	ldi	r24, 0xDB	; 219
    41fc:	90 e0       	ldi	r25, 0x00	; 0
    41fe:	0e 94 7a 1f 	call	0x3ef4	; 0x3ef4 <USART_voidSendString>
				LCD_voidClearScreen();
    4202:	0e 94 d5 0f 	call	0x1faa	; 0x1faa <LCD_voidClearScreen>
				LCD_voidGoTORowCol(0,0);
    4206:	80 e0       	ldi	r24, 0x00	; 0
    4208:	60 e0       	ldi	r22, 0x00	; 0
    420a:	0e 94 6f 0e 	call	0x1cde	; 0x1cde <LCD_voidGoTORowCol>
				LCD_voidSendString("Valid PW!");
    420e:	8a ee       	ldi	r24, 0xEA	; 234
    4210:	90 e0       	ldi	r25, 0x00	; 0
    4212:	0e 94 46 0e 	call	0x1c8c	; 0x1c8c <LCD_voidSendString>
				Local_u8PWValidation = 11;
    4216:	8b e0       	ldi	r24, 0x0B	; 11
    4218:	8d 8b       	std	Y+21, r24	; 0x15
    421a:	45 c1       	rjmp	.+650    	; 0x44a6 <main+0x466>
				break;
			}
			else
			{
				USART_voidSendString("\r\nWrong Password! Try again  ");
    421c:	84 ef       	ldi	r24, 0xF4	; 244
    421e:	90 e0       	ldi	r25, 0x00	; 0
    4220:	0e 94 7a 1f 	call	0x3ef4	; 0x3ef4 <USART_voidSendString>
				LCD_voidClearScreen();
    4224:	0e 94 d5 0f 	call	0x1faa	; 0x1faa <LCD_voidClearScreen>
				LCD_voidGoTORowCol(0,0);
    4228:	80 e0       	ldi	r24, 0x00	; 0
    422a:	60 e0       	ldi	r22, 0x00	; 0
    422c:	0e 94 6f 0e 	call	0x1cde	; 0x1cde <LCD_voidGoTORowCol>
				LCD_voidSendString("Invalid PW!");
    4230:	82 e1       	ldi	r24, 0x12	; 18
    4232:	91 e0       	ldi	r25, 0x01	; 1
    4234:	0e 94 46 0e 	call	0x1c8c	; 0x1c8c <LCD_voidSendString>
				Local_u8Iterator++;
    4238:	8e 89       	ldd	r24, Y+22	; 0x16
    423a:	8f 5f       	subi	r24, 0xFF	; 255
    423c:	8e 8b       	std	Y+22, r24	; 0x16
	USART_voidReceiveString(&Local_u8OperatingMode);
	if(Local_u8OperatingMode == '1')         //Admin mode (check for password)
	{
		/*check for the password*/
		Local_u8Iterator = 0;
		while(Local_u8Iterator < Try_times)
    423e:	8e 89       	ldd	r24, Y+22	; 0x16
    4240:	83 30       	cpi	r24, 0x03	; 3
    4242:	08 f4       	brcc	.+2      	; 0x4246 <main+0x206>
    4244:	bd cf       	rjmp	.-134    	; 0x41c0 <main+0x180>
    4246:	2f c1       	rjmp	.+606    	; 0x44a6 <main+0x466>
				Local_u8Iterator++;
			}
		}
	}
	//
	else if(Local_u8OperatingMode == '2')    //user mode (check for user name and password)
    4248:	8f 89       	ldd	r24, Y+23	; 0x17
    424a:	82 33       	cpi	r24, 0x32	; 50
    424c:	09 f0       	breq	.+2      	; 0x4250 <main+0x210>
    424e:	1d c1       	rjmp	.+570    	; 0x448a <main+0x44a>
	{
		u8 Local_u8Iterator = 0;
    4250:	1f 86       	std	Y+15, r1	; 0x0f
    4252:	68 c0       	rjmp	.+208    	; 0x4324 <main+0x2e4>
		while(Local_u8Iterator < 3)
		{
			USART_voidSendString("\r\n      Enter your User name : \r\n");
    4254:	8e e1       	ldi	r24, 0x1E	; 30
    4256:	91 e0       	ldi	r25, 0x01	; 1
    4258:	0e 94 7a 1f 	call	0x3ef4	; 0x3ef4 <USART_voidSendString>
			USART_voidReceiveString(Local_u8EnteredUserName);
    425c:	ce 01       	movw	r24, r28
    425e:	4d 96       	adiw	r24, 0x1d	; 29
    4260:	0e 94 a2 1f 	call	0x3f44	; 0x3f44 <USART_voidReceiveString>
			LCD_voidClearScreen();
    4264:	0e 94 d5 0f 	call	0x1faa	; 0x1faa <LCD_voidClearScreen>
			LCD_voidGoTORowCol(0,0);
    4268:	80 e0       	ldi	r24, 0x00	; 0
    426a:	60 e0       	ldi	r22, 0x00	; 0
    426c:	0e 94 6f 0e 	call	0x1cde	; 0x1cde <LCD_voidGoTORowCol>
			LCD_voidSendString("Entr Usr Name:");
    4270:	80 e4       	ldi	r24, 0x40	; 64
    4272:	91 e0       	ldi	r25, 0x01	; 1
    4274:	0e 94 46 0e 	call	0x1c8c	; 0x1c8c <LCD_voidSendString>
			LCD_voidGoTORowCol(1,0);
    4278:	81 e0       	ldi	r24, 0x01	; 1
    427a:	60 e0       	ldi	r22, 0x00	; 0
    427c:	0e 94 6f 0e 	call	0x1cde	; 0x1cde <LCD_voidGoTORowCol>
			LCD_voidSendString(Local_u8EnteredUserName);
    4280:	ce 01       	movw	r24, r28
    4282:	4d 96       	adiw	r24, 0x1d	; 29
    4284:	0e 94 46 0e 	call	0x1c8c	; 0x1c8c <LCD_voidSendString>

			if(String_u8CompareElements(Local_u8EnteredUserName, ID_1))
    4288:	ce 01       	movw	r24, r28
    428a:	4d 96       	adiw	r24, 0x1d	; 29
    428c:	20 e3       	ldi	r18, 0x30	; 48
    428e:	35 e0       	ldi	r19, 0x05	; 5
    4290:	b9 01       	movw	r22, r18
    4292:	0e 94 5e 24 	call	0x48bc	; 0x48bc <String_u8CompareElements>
    4296:	88 23       	and	r24, r24
    4298:	19 f0       	breq	.+6      	; 0x42a0 <main+0x260>
			{
				Local_u8UserNameValidation = 1;   //first user
    429a:	81 e0       	ldi	r24, 0x01	; 1
    429c:	8c 8b       	std	Y+20, r24	; 0x14
    429e:	46 c0       	rjmp	.+140    	; 0x432c <main+0x2ec>
				break;
			}
			else if(String_u8CompareElements(Local_u8EnteredUserName, ID_2))
    42a0:	ce 01       	movw	r24, r28
    42a2:	4d 96       	adiw	r24, 0x1d	; 29
    42a4:	27 e6       	ldi	r18, 0x67	; 103
    42a6:	35 e0       	ldi	r19, 0x05	; 5
    42a8:	b9 01       	movw	r22, r18
    42aa:	0e 94 5e 24 	call	0x48bc	; 0x48bc <String_u8CompareElements>
    42ae:	88 23       	and	r24, r24
    42b0:	19 f0       	breq	.+6      	; 0x42b8 <main+0x278>
			{
				Local_u8UserNameValidation = 2;   //second user
    42b2:	82 e0       	ldi	r24, 0x02	; 2
    42b4:	8c 8b       	std	Y+20, r24	; 0x14
    42b6:	3a c0       	rjmp	.+116    	; 0x432c <main+0x2ec>
				break;
			}
			else if(String_u8CompareElements(Local_u8EnteredUserName, ID_3))
    42b8:	ce 01       	movw	r24, r28
    42ba:	4d 96       	adiw	r24, 0x1d	; 29
    42bc:	23 e5       	ldi	r18, 0x53	; 83
    42be:	35 e0       	ldi	r19, 0x05	; 5
    42c0:	b9 01       	movw	r22, r18
    42c2:	0e 94 5e 24 	call	0x48bc	; 0x48bc <String_u8CompareElements>
    42c6:	88 23       	and	r24, r24
    42c8:	19 f0       	breq	.+6      	; 0x42d0 <main+0x290>
			{
				Local_u8UserNameValidation = 3;   //third user
    42ca:	83 e0       	ldi	r24, 0x03	; 3
    42cc:	8c 8b       	std	Y+20, r24	; 0x14
    42ce:	2e c0       	rjmp	.+92     	; 0x432c <main+0x2ec>
				break;
			}
			else if(String_u8CompareElements(Local_u8EnteredUserName, ID_4))
    42d0:	ce 01       	movw	r24, r28
    42d2:	4d 96       	adiw	r24, 0x1d	; 29
    42d4:	29 e4       	ldi	r18, 0x49	; 73
    42d6:	35 e0       	ldi	r19, 0x05	; 5
    42d8:	b9 01       	movw	r22, r18
    42da:	0e 94 5e 24 	call	0x48bc	; 0x48bc <String_u8CompareElements>
    42de:	88 23       	and	r24, r24
    42e0:	19 f0       	breq	.+6      	; 0x42e8 <main+0x2a8>
			{
				Local_u8UserNameValidation = 4;   //fourth user
    42e2:	84 e0       	ldi	r24, 0x04	; 4
    42e4:	8c 8b       	std	Y+20, r24	; 0x14
    42e6:	22 c0       	rjmp	.+68     	; 0x432c <main+0x2ec>
				break;
			}
			else if(String_u8CompareElements(Local_u8EnteredUserName, ID_5))
    42e8:	ce 01       	movw	r24, r28
    42ea:	4d 96       	adiw	r24, 0x1d	; 29
    42ec:	2d e5       	ldi	r18, 0x5D	; 93
    42ee:	35 e0       	ldi	r19, 0x05	; 5
    42f0:	b9 01       	movw	r22, r18
    42f2:	0e 94 5e 24 	call	0x48bc	; 0x48bc <String_u8CompareElements>
    42f6:	88 23       	and	r24, r24
    42f8:	19 f0       	breq	.+6      	; 0x4300 <main+0x2c0>
			{
				Local_u8UserNameValidation = 5;   //fifth user
    42fa:	85 e0       	ldi	r24, 0x05	; 5
    42fc:	8c 8b       	std	Y+20, r24	; 0x14
    42fe:	16 c0       	rjmp	.+44     	; 0x432c <main+0x2ec>
				break;
			}
			else
			{
				Local_u8UserNameValidation = 0;   //invalid user
    4300:	1c 8a       	std	Y+20, r1	; 0x14
				Local_u8Iterator++;
    4302:	8f 85       	ldd	r24, Y+15	; 0x0f
    4304:	8f 5f       	subi	r24, 0xFF	; 255
    4306:	8f 87       	std	Y+15, r24	; 0x0f
				USART_voidSendString("   Wrong ID, Try again: \r\n");
    4308:	8f e4       	ldi	r24, 0x4F	; 79
    430a:	91 e0       	ldi	r25, 0x01	; 1
    430c:	0e 94 7a 1f 	call	0x3ef4	; 0x3ef4 <USART_voidSendString>
				LCD_voidClearScreen();
    4310:	0e 94 d5 0f 	call	0x1faa	; 0x1faa <LCD_voidClearScreen>
				LCD_voidGoTORowCol(0,0);
    4314:	80 e0       	ldi	r24, 0x00	; 0
    4316:	60 e0       	ldi	r22, 0x00	; 0
    4318:	0e 94 6f 0e 	call	0x1cde	; 0x1cde <LCD_voidGoTORowCol>
				LCD_voidSendString("Invalid ID!");
    431c:	8a e6       	ldi	r24, 0x6A	; 106
    431e:	91 e0       	ldi	r25, 0x01	; 1
    4320:	0e 94 46 0e 	call	0x1c8c	; 0x1c8c <LCD_voidSendString>
	}
	//
	else if(Local_u8OperatingMode == '2')    //user mode (check for user name and password)
	{
		u8 Local_u8Iterator = 0;
		while(Local_u8Iterator < 3)
    4324:	8f 85       	ldd	r24, Y+15	; 0x0f
    4326:	83 30       	cpi	r24, 0x03	; 3
    4328:	08 f4       	brcc	.+2      	; 0x432c <main+0x2ec>
    432a:	94 cf       	rjmp	.-216    	; 0x4254 <main+0x214>
				LCD_voidClearScreen();
				LCD_voidGoTORowCol(0,0);
				LCD_voidSendString("Invalid ID!");
			}
		}
		switch(Local_u8UserNameValidation)
    432c:	8c 89       	ldd	r24, Y+20	; 0x14
    432e:	28 2f       	mov	r18, r24
    4330:	30 e0       	ldi	r19, 0x00	; 0
    4332:	3b ab       	std	Y+51, r19	; 0x33
    4334:	2a ab       	std	Y+50, r18	; 0x32
    4336:	8a a9       	ldd	r24, Y+50	; 0x32
    4338:	9b a9       	ldd	r25, Y+51	; 0x33
    433a:	82 30       	cpi	r24, 0x02	; 2
    433c:	91 05       	cpc	r25, r1
    433e:	09 f4       	brne	.+2      	; 0x4342 <main+0x302>
    4340:	48 c0       	rjmp	.+144    	; 0x43d2 <main+0x392>
    4342:	2a a9       	ldd	r18, Y+50	; 0x32
    4344:	3b a9       	ldd	r19, Y+51	; 0x33
    4346:	23 30       	cpi	r18, 0x03	; 3
    4348:	31 05       	cpc	r19, r1
    434a:	54 f4       	brge	.+20     	; 0x4360 <main+0x320>
    434c:	8a a9       	ldd	r24, Y+50	; 0x32
    434e:	9b a9       	ldd	r25, Y+51	; 0x33
    4350:	00 97       	sbiw	r24, 0x00	; 0
    4352:	c9 f0       	breq	.+50     	; 0x4386 <main+0x346>
    4354:	2a a9       	ldd	r18, Y+50	; 0x32
    4356:	3b a9       	ldd	r19, Y+51	; 0x33
    4358:	21 30       	cpi	r18, 0x01	; 1
    435a:	31 05       	cpc	r19, r1
    435c:	19 f1       	breq	.+70     	; 0x43a4 <main+0x364>
    435e:	a3 c0       	rjmp	.+326    	; 0x44a6 <main+0x466>
    4360:	8a a9       	ldd	r24, Y+50	; 0x32
    4362:	9b a9       	ldd	r25, Y+51	; 0x33
    4364:	84 30       	cpi	r24, 0x04	; 4
    4366:	91 05       	cpc	r25, r1
    4368:	09 f4       	brne	.+2      	; 0x436c <main+0x32c>
    436a:	61 c0       	rjmp	.+194    	; 0x442e <main+0x3ee>
    436c:	2a a9       	ldd	r18, Y+50	; 0x32
    436e:	3b a9       	ldd	r19, Y+51	; 0x33
    4370:	24 30       	cpi	r18, 0x04	; 4
    4372:	31 05       	cpc	r19, r1
    4374:	0c f4       	brge	.+2      	; 0x4378 <main+0x338>
    4376:	44 c0       	rjmp	.+136    	; 0x4400 <main+0x3c0>
    4378:	8a a9       	ldd	r24, Y+50	; 0x32
    437a:	9b a9       	ldd	r25, Y+51	; 0x33
    437c:	85 30       	cpi	r24, 0x05	; 5
    437e:	91 05       	cpc	r25, r1
    4380:	09 f4       	brne	.+2      	; 0x4384 <main+0x344>
    4382:	6c c0       	rjmp	.+216    	; 0x445c <main+0x41c>
    4384:	90 c0       	rjmp	.+288    	; 0x44a6 <main+0x466>
		{
		case 0:
			USART_voidSendString("\r\nInvalid ID, System Locked !");
    4386:	86 e7       	ldi	r24, 0x76	; 118
    4388:	91 e0       	ldi	r25, 0x01	; 1
    438a:	0e 94 7a 1f 	call	0x3ef4	; 0x3ef4 <USART_voidSendString>
			LCD_voidClearScreen();
    438e:	0e 94 d5 0f 	call	0x1faa	; 0x1faa <LCD_voidClearScreen>
			LCD_voidGoTORowCol(0,0);
    4392:	80 e0       	ldi	r24, 0x00	; 0
    4394:	60 e0       	ldi	r22, 0x00	; 0
    4396:	0e 94 6f 0e 	call	0x1cde	; 0x1cde <LCD_voidGoTORowCol>
			LCD_voidSendString("SYS locked!");
    439a:	84 e9       	ldi	r24, 0x94	; 148
    439c:	91 e0       	ldi	r25, 0x01	; 1
    439e:	0e 94 46 0e 	call	0x1c8c	; 0x1c8c <LCD_voidSendString>
    43a2:	81 c0       	rjmp	.+258    	; 0x44a6 <main+0x466>
			break;   //no ID matches Users for 3 times

		case 1:       //first user, check for password
			USART_voidSendString("\r\n Hello\r\n");
    43a4:	80 ea       	ldi	r24, 0xA0	; 160
    43a6:	91 e0       	ldi	r25, 0x01	; 1
    43a8:	0e 94 7a 1f 	call	0x3ef4	; 0x3ef4 <USART_voidSendString>
			LCD_voidGoTORowCol(0,6);
    43ac:	80 e0       	ldi	r24, 0x00	; 0
    43ae:	66 e0       	ldi	r22, 0x06	; 6
    43b0:	0e 94 6f 0e 	call	0x1cde	; 0x1cde <LCD_voidGoTORowCol>
			LCD_voidClearScreen();
    43b4:	0e 94 d5 0f 	call	0x1faa	; 0x1faa <LCD_voidClearScreen>
			LCD_voidSendString("HELLO");
    43b8:	8b ea       	ldi	r24, 0xAB	; 171
    43ba:	91 e0       	ldi	r25, 0x01	; 1
    43bc:	0e 94 46 0e 	call	0x1c8c	; 0x1c8c <LCD_voidSendString>
			Local_u8PWValidation = Check_u8UserPW(Local_u8EnteredUserPW, PW_1);
    43c0:	25 e3       	ldi	r18, 0x35	; 53
    43c2:	35 e0       	ldi	r19, 0x05	; 5
    43c4:	ce 01       	movw	r24, r28
    43c6:	81 96       	adiw	r24, 0x21	; 33
    43c8:	b9 01       	movw	r22, r18
    43ca:	0e 94 f7 24 	call	0x49ee	; 0x49ee <Check_u8UserPW>
    43ce:	8d 8b       	std	Y+21, r24	; 0x15
    43d0:	6a c0       	rjmp	.+212    	; 0x44a6 <main+0x466>
			break;

		case 2:       //second user, check for password
			USART_voidSendString("\r\n Hello\r\n");
    43d2:	80 ea       	ldi	r24, 0xA0	; 160
    43d4:	91 e0       	ldi	r25, 0x01	; 1
    43d6:	0e 94 7a 1f 	call	0x3ef4	; 0x3ef4 <USART_voidSendString>
			LCD_voidGoTORowCol(0,6);
    43da:	80 e0       	ldi	r24, 0x00	; 0
    43dc:	66 e0       	ldi	r22, 0x06	; 6
    43de:	0e 94 6f 0e 	call	0x1cde	; 0x1cde <LCD_voidGoTORowCol>
			LCD_voidClearScreen();
    43e2:	0e 94 d5 0f 	call	0x1faa	; 0x1faa <LCD_voidClearScreen>
			LCD_voidSendString("HELLO");
    43e6:	8b ea       	ldi	r24, 0xAB	; 171
    43e8:	91 e0       	ldi	r25, 0x01	; 1
    43ea:	0e 94 46 0e 	call	0x1c8c	; 0x1c8c <LCD_voidSendString>
			Local_u8PWValidation = Check_u8UserPW(Local_u8EnteredUserPW, PW_2);
    43ee:	28 e5       	ldi	r18, 0x58	; 88
    43f0:	35 e0       	ldi	r19, 0x05	; 5
    43f2:	ce 01       	movw	r24, r28
    43f4:	81 96       	adiw	r24, 0x21	; 33
    43f6:	b9 01       	movw	r22, r18
    43f8:	0e 94 f7 24 	call	0x49ee	; 0x49ee <Check_u8UserPW>
    43fc:	8d 8b       	std	Y+21, r24	; 0x15
    43fe:	53 c0       	rjmp	.+166    	; 0x44a6 <main+0x466>
			break;

		case 3:       //third user, check for password
			USART_voidSendString("\r\n Hello\r\n");
    4400:	80 ea       	ldi	r24, 0xA0	; 160
    4402:	91 e0       	ldi	r25, 0x01	; 1
    4404:	0e 94 7a 1f 	call	0x3ef4	; 0x3ef4 <USART_voidSendString>
			LCD_voidGoTORowCol(0,6);
    4408:	80 e0       	ldi	r24, 0x00	; 0
    440a:	66 e0       	ldi	r22, 0x06	; 6
    440c:	0e 94 6f 0e 	call	0x1cde	; 0x1cde <LCD_voidGoTORowCol>
			LCD_voidClearScreen();
    4410:	0e 94 d5 0f 	call	0x1faa	; 0x1faa <LCD_voidClearScreen>
			LCD_voidSendString("HELLO");
    4414:	8b ea       	ldi	r24, 0xAB	; 171
    4416:	91 e0       	ldi	r25, 0x01	; 1
    4418:	0e 94 46 0e 	call	0x1c8c	; 0x1c8c <LCD_voidSendString>
			Local_u8PWValidation = Check_u8UserPW(Local_u8EnteredUserPW, PW_3);
    441c:	2e e4       	ldi	r18, 0x4E	; 78
    441e:	35 e0       	ldi	r19, 0x05	; 5
    4420:	ce 01       	movw	r24, r28
    4422:	81 96       	adiw	r24, 0x21	; 33
    4424:	b9 01       	movw	r22, r18
    4426:	0e 94 f7 24 	call	0x49ee	; 0x49ee <Check_u8UserPW>
    442a:	8d 8b       	std	Y+21, r24	; 0x15
    442c:	3c c0       	rjmp	.+120    	; 0x44a6 <main+0x466>
			break;

		case 4:       //fourth user, check for password
			USART_voidSendString("\r\n Hello\r\n");
    442e:	80 ea       	ldi	r24, 0xA0	; 160
    4430:	91 e0       	ldi	r25, 0x01	; 1
    4432:	0e 94 7a 1f 	call	0x3ef4	; 0x3ef4 <USART_voidSendString>
			LCD_voidGoTORowCol(0,6);
    4436:	80 e0       	ldi	r24, 0x00	; 0
    4438:	66 e0       	ldi	r22, 0x06	; 6
    443a:	0e 94 6f 0e 	call	0x1cde	; 0x1cde <LCD_voidGoTORowCol>
			LCD_voidClearScreen();
    443e:	0e 94 d5 0f 	call	0x1faa	; 0x1faa <LCD_voidClearScreen>
			LCD_voidSendString("HELLO");
    4442:	8b ea       	ldi	r24, 0xAB	; 171
    4444:	91 e0       	ldi	r25, 0x01	; 1
    4446:	0e 94 46 0e 	call	0x1c8c	; 0x1c8c <LCD_voidSendString>
			Local_u8PWValidation = Check_u8UserPW(Local_u8EnteredUserPW, PW_4);
    444a:	22 e6       	ldi	r18, 0x62	; 98
    444c:	35 e0       	ldi	r19, 0x05	; 5
    444e:	ce 01       	movw	r24, r28
    4450:	81 96       	adiw	r24, 0x21	; 33
    4452:	b9 01       	movw	r22, r18
    4454:	0e 94 f7 24 	call	0x49ee	; 0x49ee <Check_u8UserPW>
    4458:	8d 8b       	std	Y+21, r24	; 0x15
    445a:	25 c0       	rjmp	.+74     	; 0x44a6 <main+0x466>
			break;

		case 5:       //fifth user, check for password
			USART_voidSendString("\r\n Hello\r\n");
    445c:	80 ea       	ldi	r24, 0xA0	; 160
    445e:	91 e0       	ldi	r25, 0x01	; 1
    4460:	0e 94 7a 1f 	call	0x3ef4	; 0x3ef4 <USART_voidSendString>
			LCD_voidGoTORowCol(0,6);
    4464:	80 e0       	ldi	r24, 0x00	; 0
    4466:	66 e0       	ldi	r22, 0x06	; 6
    4468:	0e 94 6f 0e 	call	0x1cde	; 0x1cde <LCD_voidGoTORowCol>
			LCD_voidClearScreen();
    446c:	0e 94 d5 0f 	call	0x1faa	; 0x1faa <LCD_voidClearScreen>
			LCD_voidSendString("HELLO");
    4470:	8b ea       	ldi	r24, 0xAB	; 171
    4472:	91 e0       	ldi	r25, 0x01	; 1
    4474:	0e 94 46 0e 	call	0x1c8c	; 0x1c8c <LCD_voidSendString>
			Local_u8PWValidation = Check_u8UserPW(Local_u8EnteredUserPW, PW_5);
    4478:	2c e6       	ldi	r18, 0x6C	; 108
    447a:	35 e0       	ldi	r19, 0x05	; 5
    447c:	ce 01       	movw	r24, r28
    447e:	81 96       	adiw	r24, 0x21	; 33
    4480:	b9 01       	movw	r22, r18
    4482:	0e 94 f7 24 	call	0x49ee	; 0x49ee <Check_u8UserPW>
    4486:	8d 8b       	std	Y+21, r24	; 0x15
    4488:	0e c0       	rjmp	.+28     	; 0x44a6 <main+0x466>
			break;
		}
	}
	else
	{
		USART_voidSendString("Invalid mode number");
    448a:	81 eb       	ldi	r24, 0xB1	; 177
    448c:	91 e0       	ldi	r25, 0x01	; 1
    448e:	0e 94 7a 1f 	call	0x3ef4	; 0x3ef4 <USART_voidSendString>
		LCD_voidClearScreen();
    4492:	0e 94 d5 0f 	call	0x1faa	; 0x1faa <LCD_voidClearScreen>
		LCD_voidGoTORowCol(0,0);
    4496:	80 e0       	ldi	r24, 0x00	; 0
    4498:	60 e0       	ldi	r22, 0x00	; 0
    449a:	0e 94 6f 0e 	call	0x1cde	; 0x1cde <LCD_voidGoTORowCol>
		LCD_voidSendString("Invlid MD no!");
    449e:	85 ec       	ldi	r24, 0xC5	; 197
    44a0:	91 e0       	ldi	r25, 0x01	; 1
    44a2:	0e 94 46 0e 	call	0x1c8c	; 0x1c8c <LCD_voidSendString>
		//system should be restarted
	}

	if(Local_u8PWValidation == 11)   //password approved, start admin mode or User mode
    44a6:	8d 89       	ldd	r24, Y+21	; 0x15
    44a8:	8b 30       	cpi	r24, 0x0B	; 11
    44aa:	09 f0       	breq	.+2      	; 0x44ae <main+0x46e>
    44ac:	d7 c1       	rjmp	.+942    	; 0x485c <main+0x81c>
	{
		/*program functionality*/
		while(1)
		{
			if(Local_u8OperatingMode == '1')         //Admin mode
    44ae:	8f 89       	ldd	r24, Y+23	; 0x17
    44b0:	81 33       	cpi	r24, 0x31	; 49
    44b2:	09 f0       	breq	.+2      	; 0x44b6 <main+0x476>
    44b4:	eb c0       	rjmp	.+470    	; 0x468c <main+0x64c>
			{
				LCD_voidGoTORowCol(0,3);
    44b6:	80 e0       	ldi	r24, 0x00	; 0
    44b8:	63 e0       	ldi	r22, 0x03	; 3
    44ba:	0e 94 6f 0e 	call	0x1cde	; 0x1cde <LCD_voidGoTORowCol>
				LCD_voidClearScreen();
    44be:	0e 94 d5 0f 	call	0x1faa	; 0x1faa <LCD_voidClearScreen>
				LCD_voidSendString("Admin mode");
    44c2:	83 ed       	ldi	r24, 0xD3	; 211
    44c4:	91 e0       	ldi	r25, 0x01	; 1
    44c6:	0e 94 46 0e 	call	0x1c8c	; 0x1c8c <LCD_voidSendString>
				/*Admin mode "add, modify, delete users"*/
				USART_voidSendString("\r\nTo add new user or modify, enter 1\r\n"
    44ca:	8e ed       	ldi	r24, 0xDE	; 222
    44cc:	91 e0       	ldi	r25, 0x01	; 1
    44ce:	0e 94 7a 1f 	call	0x3ef4	; 0x3ef4 <USART_voidSendString>
						"To delete an old user, enter 2\r\nTo terminate, enter 3 :\r\n ");
				USART_voidReceiveString(&Local_u8AdminMode);
    44d2:	ce 01       	movw	r24, r28
    44d4:	48 96       	adiw	r24, 0x18	; 24
    44d6:	0e 94 a2 1f 	call	0x3f44	; 0x3f44 <USART_voidReceiveString>
				LCD_voidGoTORowCol(1,0);
    44da:	81 e0       	ldi	r24, 0x01	; 1
    44dc:	60 e0       	ldi	r22, 0x00	; 0
    44de:	0e 94 6f 0e 	call	0x1cde	; 0x1cde <LCD_voidGoTORowCol>
				LCD_voidSendString(Local_u8AdminMode);
    44e2:	88 8d       	ldd	r24, Y+24	; 0x18
    44e4:	88 2f       	mov	r24, r24
    44e6:	90 e0       	ldi	r25, 0x00	; 0
    44e8:	0e 94 46 0e 	call	0x1c8c	; 0x1c8c <LCD_voidSendString>

				if(Local_u8AdminMode == '1')          //add new user
    44ec:	88 8d       	ldd	r24, Y+24	; 0x18
    44ee:	81 33       	cpi	r24, 0x31	; 49
    44f0:	09 f0       	breq	.+2      	; 0x44f4 <main+0x4b4>
    44f2:	73 c0       	rjmp	.+230    	; 0x45da <main+0x59a>
				{
					/*Get location of storing the new user*/
					USART_voidSendString("\r\nEnter the user ID from 1 to 5 : \r\n");
    44f4:	8f e3       	ldi	r24, 0x3F	; 63
    44f6:	92 e0       	ldi	r25, 0x02	; 2
    44f8:	0e 94 7a 1f 	call	0x3ef4	; 0x3ef4 <USART_voidSendString>
					USART_voidReceiveString(&Local_u8NewIDNumStr);
    44fc:	ce 01       	movw	r24, r28
    44fe:	85 96       	adiw	r24, 0x25	; 37
    4500:	0e 94 a2 1f 	call	0x3f44	; 0x3f44 <USART_voidReceiveString>
					LCD_voidClearScreen();
    4504:	0e 94 d5 0f 	call	0x1faa	; 0x1faa <LCD_voidClearScreen>
					LCD_voidGoTORowCol(0,0);
    4508:	80 e0       	ldi	r24, 0x00	; 0
    450a:	60 e0       	ldi	r22, 0x00	; 0
    450c:	0e 94 6f 0e 	call	0x1cde	; 0x1cde <LCD_voidGoTORowCol>
					LCD_voidSendString("Admin mode");
    4510:	83 ed       	ldi	r24, 0xD3	; 211
    4512:	91 e0       	ldi	r25, 0x01	; 1
    4514:	0e 94 46 0e 	call	0x1c8c	; 0x1c8c <LCD_voidSendString>
					LCD_voidGoTORowCol(1,0);
    4518:	81 e0       	ldi	r24, 0x01	; 1
    451a:	60 e0       	ldi	r22, 0x00	; 0
    451c:	0e 94 6f 0e 	call	0x1cde	; 0x1cde <LCD_voidGoTORowCol>
					LCD_voidSendString(Local_u8NewIDNumStr);
    4520:	8d a1       	ldd	r24, Y+37	; 0x25
    4522:	88 2f       	mov	r24, r24
    4524:	90 e0       	ldi	r25, 0x00	; 0
    4526:	0e 94 46 0e 	call	0x1c8c	; 0x1c8c <LCD_voidSendString>
					Local_u8NewIDNum = STR_u8StringToInt(&Local_u8NewIDNumStr);
    452a:	ce 01       	movw	r24, r28
    452c:	85 96       	adiw	r24, 0x25	; 37
    452e:	0e 94 7f 25 	call	0x4afe	; 0x4afe <STR_u8StringToInt>
    4532:	8b 8b       	std	Y+19, r24	; 0x13

					if((Local_u8NewIDNum > 0) && (Local_u8NewIDNum <= 5))
    4534:	8b 89       	ldd	r24, Y+19	; 0x13
    4536:	88 23       	and	r24, r24
    4538:	09 f4       	brne	.+2      	; 0x453c <main+0x4fc>
    453a:	b9 cf       	rjmp	.-142    	; 0x44ae <main+0x46e>
    453c:	8b 89       	ldd	r24, Y+19	; 0x13
    453e:	86 30       	cpi	r24, 0x06	; 6
    4540:	08 f0       	brcs	.+2      	; 0x4544 <main+0x504>
    4542:	b5 cf       	rjmp	.-150    	; 0x44ae <main+0x46e>
					{
						/*New ID name*/
						USART_voidSendString("\r\nEnter the new user name : \r\n");
    4544:	84 e6       	ldi	r24, 0x64	; 100
    4546:	92 e0       	ldi	r25, 0x02	; 2
    4548:	0e 94 7a 1f 	call	0x3ef4	; 0x3ef4 <USART_voidSendString>
						USART_voidReceiveString(&Local_u8NewIDStr);
    454c:	ce 01       	movw	r24, r28
    454e:	86 96       	adiw	r24, 0x26	; 38
    4550:	0e 94 a2 1f 	call	0x3f44	; 0x3f44 <USART_voidReceiveString>
						LCD_voidGoTORowCol(1,0);
    4554:	81 e0       	ldi	r24, 0x01	; 1
    4556:	60 e0       	ldi	r22, 0x00	; 0
    4558:	0e 94 6f 0e 	call	0x1cde	; 0x1cde <LCD_voidGoTORowCol>
						LCD_voidSendString(Local_u8NewIDStr);
    455c:	ce 01       	movw	r24, r28
    455e:	86 96       	adiw	r24, 0x26	; 38
    4560:	0e 94 46 0e 	call	0x1c8c	; 0x1c8c <LCD_voidSendString>

						/*New ID PW*/
						USART_voidSendString("\r\nEnter the new user name's PW : \r\n");
    4564:	83 e8       	ldi	r24, 0x83	; 131
    4566:	92 e0       	ldi	r25, 0x02	; 2
    4568:	0e 94 7a 1f 	call	0x3ef4	; 0x3ef4 <USART_voidSendString>
						USART_voidReceiveString(&Local_u8NewIDPW);
    456c:	ce 01       	movw	r24, r28
    456e:	8b 96       	adiw	r24, 0x2b	; 43
    4570:	0e 94 a2 1f 	call	0x3f44	; 0x3f44 <USART_voidReceiveString>
						LCD_voidGoTORowCol(1,0);
    4574:	81 e0       	ldi	r24, 0x01	; 1
    4576:	60 e0       	ldi	r22, 0x00	; 0
    4578:	0e 94 6f 0e 	call	0x1cde	; 0x1cde <LCD_voidGoTORowCol>
						LCD_voidSendString(Local_u8NewIDPW);
    457c:	ce 01       	movw	r24, r28
    457e:	8b 96       	adiw	r24, 0x2b	; 43
    4580:	0e 94 46 0e 	call	0x1c8c	; 0x1c8c <LCD_voidSendString>

						App_voidAdminAddUser(Local_u8NewIDNum, &Local_u8NewIDStr);
    4584:	8b 89       	ldd	r24, Y+19	; 0x13
    4586:	88 2f       	mov	r24, r24
    4588:	90 e0       	ldi	r25, 0x00	; 0
    458a:	9e 01       	movw	r18, r28
    458c:	2a 5d       	subi	r18, 0xDA	; 218
    458e:	3f 4f       	sbci	r19, 0xFF	; 255
    4590:	b9 01       	movw	r22, r18
    4592:	0e 94 31 25 	call	0x4a62	; 0x4a62 <App_voidAdminAddUser>
						USART_voidSendString("\r\n\r\n    user name added \r\n");
    4596:	87 ea       	ldi	r24, 0xA7	; 167
    4598:	92 e0       	ldi	r25, 0x02	; 2
    459a:	0e 94 7a 1f 	call	0x3ef4	; 0x3ef4 <USART_voidSendString>
						LCD_voidGoTORowCol(1,0);
    459e:	81 e0       	ldi	r24, 0x01	; 1
    45a0:	60 e0       	ldi	r22, 0x00	; 0
    45a2:	0e 94 6f 0e 	call	0x1cde	; 0x1cde <LCD_voidGoTORowCol>
						LCD_voidSendString("User+");
    45a6:	82 ec       	ldi	r24, 0xC2	; 194
    45a8:	92 e0       	ldi	r25, 0x02	; 2
    45aa:	0e 94 46 0e 	call	0x1c8c	; 0x1c8c <LCD_voidSendString>

						App_voidAdminAddUserPW(Local_u8NewIDNum, &Local_u8NewIDPW);
    45ae:	8b 89       	ldd	r24, Y+19	; 0x13
    45b0:	88 2f       	mov	r24, r24
    45b2:	90 e0       	ldi	r25, 0x00	; 0
    45b4:	9e 01       	movw	r18, r28
    45b6:	25 5d       	subi	r18, 0xD5	; 213
    45b8:	3f 4f       	sbci	r19, 0xFF	; 255
    45ba:	b9 01       	movw	r22, r18
    45bc:	0e 94 58 25 	call	0x4ab0	; 0x4ab0 <App_voidAdminAddUserPW>
						USART_voidSendString("\r\n     password added \r\n");
    45c0:	88 ec       	ldi	r24, 0xC8	; 200
    45c2:	92 e0       	ldi	r25, 0x02	; 2
    45c4:	0e 94 7a 1f 	call	0x3ef4	; 0x3ef4 <USART_voidSendString>
						LCD_voidGoTORowCol(1,9);
    45c8:	81 e0       	ldi	r24, 0x01	; 1
    45ca:	69 e0       	ldi	r22, 0x09	; 9
    45cc:	0e 94 6f 0e 	call	0x1cde	; 0x1cde <LCD_voidGoTORowCol>
						LCD_voidSendString("PW+");
    45d0:	81 ee       	ldi	r24, 0xE1	; 225
    45d2:	92 e0       	ldi	r25, 0x02	; 2
    45d4:	0e 94 46 0e 	call	0x1c8c	; 0x1c8c <LCD_voidSendString>
    45d8:	6a cf       	rjmp	.-300    	; 0x44ae <main+0x46e>
					}
					/*loop inside admin mode*/
				}
				else if(Local_u8AdminMode == '2')     //delete old user
    45da:	88 8d       	ldd	r24, Y+24	; 0x18
    45dc:	82 33       	cpi	r24, 0x32	; 50
    45de:	99 f5       	brne	.+102    	; 0x4646 <main+0x606>
				{
					/*Get location of the user to be deleted*/
					USART_voidSendString("\r\nEnter the user ID to delete from 1 to 5 : \r\n");
    45e0:	85 ee       	ldi	r24, 0xE5	; 229
    45e2:	92 e0       	ldi	r25, 0x02	; 2
    45e4:	0e 94 7a 1f 	call	0x3ef4	; 0x3ef4 <USART_voidSendString>
					USART_voidReceiveString(&Local_u8NewIDNumStr);
    45e8:	ce 01       	movw	r24, r28
    45ea:	85 96       	adiw	r24, 0x25	; 37
    45ec:	0e 94 a2 1f 	call	0x3f44	; 0x3f44 <USART_voidReceiveString>
					Local_u8NewIDNum = STR_u8StringToInt(&Local_u8NewIDNumStr);
    45f0:	ce 01       	movw	r24, r28
    45f2:	85 96       	adiw	r24, 0x25	; 37
    45f4:	0e 94 7f 25 	call	0x4afe	; 0x4afe <STR_u8StringToInt>
    45f8:	8b 8b       	std	Y+19, r24	; 0x13
					LCD_voidGoTORowCol(1,0);
    45fa:	81 e0       	ldi	r24, 0x01	; 1
    45fc:	60 e0       	ldi	r22, 0x00	; 0
    45fe:	0e 94 6f 0e 	call	0x1cde	; 0x1cde <LCD_voidGoTORowCol>
					LCD_voidSendString(Local_u8NewIDNumStr);
    4602:	8d a1       	ldd	r24, Y+37	; 0x25
    4604:	88 2f       	mov	r24, r24
    4606:	90 e0       	ldi	r25, 0x00	; 0
    4608:	0e 94 46 0e 	call	0x1c8c	; 0x1c8c <LCD_voidSendString>

					/*give the required address a name (aaa)*/
					App_voidAdminAddUser(Local_u8NewIDNum, "aaa");
    460c:	8b 89       	ldd	r24, Y+19	; 0x13
    460e:	88 2f       	mov	r24, r24
    4610:	90 e0       	ldi	r25, 0x00	; 0
    4612:	24 e1       	ldi	r18, 0x14	; 20
    4614:	33 e0       	ldi	r19, 0x03	; 3
    4616:	b9 01       	movw	r22, r18
    4618:	0e 94 31 25 	call	0x4a62	; 0x4a62 <App_voidAdminAddUser>

					/*assign the password to 000*/
					App_voidAdminAddUserPW(Local_u8NewIDNum, "000");
    461c:	8b 89       	ldd	r24, Y+19	; 0x13
    461e:	88 2f       	mov	r24, r24
    4620:	90 e0       	ldi	r25, 0x00	; 0
    4622:	28 e1       	ldi	r18, 0x18	; 24
    4624:	33 e0       	ldi	r19, 0x03	; 3
    4626:	b9 01       	movw	r22, r18
    4628:	0e 94 58 25 	call	0x4ab0	; 0x4ab0 <App_voidAdminAddUserPW>

					USART_voidSendString("\r\nUser name was deleted successfully\r\n");
    462c:	8c e1       	ldi	r24, 0x1C	; 28
    462e:	93 e0       	ldi	r25, 0x03	; 3
    4630:	0e 94 7a 1f 	call	0x3ef4	; 0x3ef4 <USART_voidSendString>
					LCD_voidGoTORowCol(1,0);
    4634:	81 e0       	ldi	r24, 0x01	; 1
    4636:	60 e0       	ldi	r22, 0x00	; 0
    4638:	0e 94 6f 0e 	call	0x1cde	; 0x1cde <LCD_voidGoTORowCol>
					LCD_voidSendString("User-");
    463c:	83 e4       	ldi	r24, 0x43	; 67
    463e:	93 e0       	ldi	r25, 0x03	; 3
    4640:	0e 94 46 0e 	call	0x1c8c	; 0x1c8c <LCD_voidSendString>
    4644:	34 cf       	rjmp	.-408    	; 0x44ae <main+0x46e>
				}
				else if(Local_u8AdminMode == '3')     //terminate
    4646:	88 8d       	ldd	r24, Y+24	; 0x18
    4648:	83 33       	cpi	r24, 0x33	; 51
    464a:	89 f4       	brne	.+34     	; 0x466e <main+0x62e>
				{
					USART_voidSendString("\r\nSystem terminated!\r\n");
    464c:	89 e4       	ldi	r24, 0x49	; 73
    464e:	93 e0       	ldi	r25, 0x03	; 3
    4650:	0e 94 7a 1f 	call	0x3ef4	; 0x3ef4 <USART_voidSendString>
					LCD_voidClearScreen();
    4654:	0e 94 d5 0f 	call	0x1faa	; 0x1faa <LCD_voidClearScreen>
					LCD_voidGoTORowCol(1,0);
    4658:	81 e0       	ldi	r24, 0x01	; 1
    465a:	60 e0       	ldi	r22, 0x00	; 0
    465c:	0e 94 6f 0e 	call	0x1cde	; 0x1cde <LCD_voidGoTORowCol>
					LCD_voidSendString("SYS OFF");
    4660:	80 e6       	ldi	r24, 0x60	; 96
    4662:	93 e0       	ldi	r25, 0x03	; 3
    4664:	0e 94 46 0e 	call	0x1c8c	; 0x1c8c <LCD_voidSendString>
					return 0;
    4668:	19 aa       	std	Y+49, r1	; 0x31
    466a:	18 aa       	std	Y+48, r1	; 0x30
    466c:	fd c0       	rjmp	.+506    	; 0x4868 <main+0x828>
				}
				else
				{
					USART_voidSendString("\r\nInvalid mode number!\r\n");
    466e:	88 e6       	ldi	r24, 0x68	; 104
    4670:	93 e0       	ldi	r25, 0x03	; 3
    4672:	0e 94 7a 1f 	call	0x3ef4	; 0x3ef4 <USART_voidSendString>
					LCD_voidClearScreen();
    4676:	0e 94 d5 0f 	call	0x1faa	; 0x1faa <LCD_voidClearScreen>
					LCD_voidGoTORowCol(0,0);
    467a:	80 e0       	ldi	r24, 0x00	; 0
    467c:	60 e0       	ldi	r22, 0x00	; 0
    467e:	0e 94 6f 0e 	call	0x1cde	; 0x1cde <LCD_voidGoTORowCol>
					LCD_voidSendString("Invlid MD no!");
    4682:	85 ec       	ldi	r24, 0xC5	; 197
    4684:	91 e0       	ldi	r25, 0x01	; 1
    4686:	0e 94 46 0e 	call	0x1c8c	; 0x1c8c <LCD_voidSendString>
    468a:	11 cf       	rjmp	.-478    	; 0x44ae <main+0x46e>
					//return 0;               //system should be restarted
				}
			}

			/*USER mode*/
			else if(Local_u8OperatingMode == '2')
    468c:	8f 89       	ldd	r24, Y+23	; 0x17
    468e:	82 33       	cpi	r24, 0x32	; 50
    4690:	09 f0       	breq	.+2      	; 0x4694 <main+0x654>
    4692:	0d cf       	rjmp	.-486    	; 0x44ae <main+0x46e>
			{
				Local_u8UserIn = 1;
    4694:	81 e0       	ldi	r24, 0x01	; 1
    4696:	8a 8b       	std	Y+18, r24	; 0x12
				USART_voidSendString("\r\nWelcome Home!\r\n");
    4698:	81 e8       	ldi	r24, 0x81	; 129
    469a:	93 e0       	ldi	r25, 0x03	; 3
    469c:	0e 94 7a 1f 	call	0x3ef4	; 0x3ef4 <USART_voidSendString>
				LCD_voidGoTORowCol(1,1);
    46a0:	81 e0       	ldi	r24, 0x01	; 1
    46a2:	61 e0       	ldi	r22, 0x01	; 1
    46a4:	0e 94 6f 0e 	call	0x1cde	; 0x1cde <LCD_voidGoTORowCol>
				LCD_voidClearScreen();
    46a8:	0e 94 d5 0f 	call	0x1faa	; 0x1faa <LCD_voidClearScreen>
				LCD_voidSendString("WELCOME HOME");
    46ac:	83 e9       	ldi	r24, 0x93	; 147
    46ae:	93 e0       	ldi	r25, 0x03	; 3
    46b0:	0e 94 46 0e 	call	0x1c8c	; 0x1c8c <LCD_voidSendString>
				/*Servo rotates by 90 degrees*/
				PWM_voidSetDutyCycleRange0_180(90, FREQUENCY_250);
    46b4:	8a e5       	ldi	r24, 0x5A	; 90
    46b6:	90 e0       	ldi	r25, 0x00	; 0
    46b8:	60 ea       	ldi	r22, 0xA0	; 160
    46ba:	7f e0       	ldi	r23, 0x0F	; 15
    46bc:	0e 94 49 19 	call	0x3292	; 0x3292 <PWM_voidSetDutyCycleRange0_180>
				PWM_voidProducePWM(CHANNEL_A, FREQUENCY_250);
    46c0:	81 e0       	ldi	r24, 0x01	; 1
    46c2:	60 ea       	ldi	r22, 0xA0	; 160
    46c4:	7f e0       	ldi	r23, 0x0F	; 15
    46c6:	0e 94 82 18 	call	0x3104	; 0x3104 <PWM_voidProducePWM>

				/*LED ON*/
				LED_ON(DIO_u8PORTA, DIO_u8PIN1);
    46ca:	80 e0       	ldi	r24, 0x00	; 0
    46cc:	61 e0       	ldi	r22, 0x01	; 1
    46ce:	0e 94 50 18 	call	0x30a0	; 0x30a0 <LED_ON>

				/*buzzer*/
				Play_Note(500,250);
    46d2:	84 ef       	ldi	r24, 0xF4	; 244
    46d4:	91 e0       	ldi	r25, 0x01	; 1
    46d6:	6a ef       	ldi	r22, 0xFA	; 250
    46d8:	0e 94 d1 25 	call	0x4ba2	; 0x4ba2 <Play_Note>
				Play_Note(700,250);
    46dc:	8c eb       	ldi	r24, 0xBC	; 188
    46de:	92 e0       	ldi	r25, 0x02	; 2
    46e0:	6a ef       	ldi	r22, 0xFA	; 250
    46e2:	0e 94 d1 25 	call	0x4ba2	; 0x4ba2 <Play_Note>
				Play_Note(800,250);
    46e6:	80 e2       	ldi	r24, 0x20	; 32
    46e8:	93 e0       	ldi	r25, 0x03	; 3
    46ea:	6a ef       	ldi	r22, 0xFA	; 250
    46ec:	0e 94 d1 25 	call	0x4ba2	; 0x4ba2 <Play_Note>
				Play_Note(1000,250);
    46f0:	88 ee       	ldi	r24, 0xE8	; 232
    46f2:	93 e0       	ldi	r25, 0x03	; 3
    46f4:	6a ef       	ldi	r22, 0xFA	; 250
    46f6:	0e 94 d1 25 	call	0x4ba2	; 0x4ba2 <Play_Note>


				ADC_voidInit(ADC_PRESCALER128);
    46fa:	87 e0       	ldi	r24, 0x07	; 7
    46fc:	0e 94 17 07 	call	0xe2e	; 0xe2e <ADC_voidInit>
    4700:	a8 c0       	rjmp	.+336    	; 0x4852 <main+0x812>
				while(Local_u8UserIn == 1) //system stuck in user mode
				{
					/*fan*/
					Reading = ADC_voidStartConversionSync(CHANNEL0);
    4702:	80 e0       	ldi	r24, 0x00	; 0
    4704:	0e 94 9e 07 	call	0xf3c	; 0xf3c <ADC_voidStartConversionSync>
    4708:	88 2f       	mov	r24, r24
    470a:	90 e0       	ldi	r25, 0x00	; 0
    470c:	99 8b       	std	Y+17, r25	; 0x11
    470e:	88 8b       	std	Y+16, r24	; 0x10
					Reading = (Reading * (5000 /256) / 10);
    4710:	48 89       	ldd	r20, Y+16	; 0x10
    4712:	59 89       	ldd	r21, Y+17	; 0x11
    4714:	ca 01       	movw	r24, r20
    4716:	88 0f       	add	r24, r24
    4718:	99 1f       	adc	r25, r25
    471a:	9c 01       	movw	r18, r24
    471c:	22 0f       	add	r18, r18
    471e:	33 1f       	adc	r19, r19
    4720:	22 0f       	add	r18, r18
    4722:	33 1f       	adc	r19, r19
    4724:	22 0f       	add	r18, r18
    4726:	33 1f       	adc	r19, r19
    4728:	82 0f       	add	r24, r18
    472a:	93 1f       	adc	r25, r19
    472c:	84 0f       	add	r24, r20
    472e:	95 1f       	adc	r25, r21
    4730:	2a e0       	ldi	r18, 0x0A	; 10
    4732:	30 e0       	ldi	r19, 0x00	; 0
    4734:	b9 01       	movw	r22, r18
    4736:	0e 94 b7 27 	call	0x4f6e	; 0x4f6e <__udivmodhi4>
    473a:	cb 01       	movw	r24, r22
    473c:	99 8b       	std	Y+17, r25	; 0x11
    473e:	88 8b       	std	Y+16, r24	; 0x10
					if(Reading > 28)
    4740:	88 89       	ldd	r24, Y+16	; 0x10
    4742:	99 89       	ldd	r25, Y+17	; 0x11
    4744:	8d 31       	cpi	r24, 0x1D	; 29
    4746:	91 05       	cpc	r25, r1
    4748:	30 f0       	brcs	.+12     	; 0x4756 <main+0x716>
					{
						DIO_u8SetPinValue(DIO_u8PORTA, DIO_u8PIN2, DIO_u8PIN_HIGH);
    474a:	80 e0       	ldi	r24, 0x00	; 0
    474c:	62 e0       	ldi	r22, 0x02	; 2
    474e:	41 e0       	ldi	r20, 0x01	; 1
    4750:	0e 94 26 12 	call	0x244c	; 0x244c <DIO_u8SetPinValue>
    4754:	05 c0       	rjmp	.+10     	; 0x4760 <main+0x720>
					}
					else
					{
						DIO_u8SetPinValue(DIO_u8PORTA, DIO_u8PIN2, DIO_u8PIN_LOW);
    4756:	80 e0       	ldi	r24, 0x00	; 0
    4758:	62 e0       	ldi	r22, 0x02	; 2
    475a:	40 e0       	ldi	r20, 0x00	; 0
    475c:	0e 94 26 12 	call	0x244c	; 0x244c <DIO_u8SetPinValue>
					}
					LCD_voidGoTORowCol(1,0);
    4760:	81 e0       	ldi	r24, 0x01	; 1
    4762:	60 e0       	ldi	r22, 0x00	; 0
    4764:	0e 94 6f 0e 	call	0x1cde	; 0x1cde <LCD_voidGoTORowCol>
					LCD_voidSendVariable(Reading);
    4768:	88 89       	ldd	r24, Y+16	; 0x10
    476a:	0e 94 e0 0e 	call	0x1dc0	; 0x1dc0 <LCD_voidSendVariable>
    476e:	80 e0       	ldi	r24, 0x00	; 0
    4770:	90 e0       	ldi	r25, 0x00	; 0
    4772:	a8 ec       	ldi	r26, 0xC8	; 200
    4774:	b2 e4       	ldi	r27, 0x42	; 66
    4776:	8b 87       	std	Y+11, r24	; 0x0b
    4778:	9c 87       	std	Y+12, r25	; 0x0c
    477a:	ad 87       	std	Y+13, r26	; 0x0d
    477c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    477e:	6b 85       	ldd	r22, Y+11	; 0x0b
    4780:	7c 85       	ldd	r23, Y+12	; 0x0c
    4782:	8d 85       	ldd	r24, Y+13	; 0x0d
    4784:	9e 85       	ldd	r25, Y+14	; 0x0e
    4786:	20 e0       	ldi	r18, 0x00	; 0
    4788:	30 e0       	ldi	r19, 0x00	; 0
    478a:	4a ef       	ldi	r20, 0xFA	; 250
    478c:	54 e4       	ldi	r21, 0x44	; 68
    478e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4792:	dc 01       	movw	r26, r24
    4794:	cb 01       	movw	r24, r22
    4796:	8f 83       	std	Y+7, r24	; 0x07
    4798:	98 87       	std	Y+8, r25	; 0x08
    479a:	a9 87       	std	Y+9, r26	; 0x09
    479c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    479e:	6f 81       	ldd	r22, Y+7	; 0x07
    47a0:	78 85       	ldd	r23, Y+8	; 0x08
    47a2:	89 85       	ldd	r24, Y+9	; 0x09
    47a4:	9a 85       	ldd	r25, Y+10	; 0x0a
    47a6:	20 e0       	ldi	r18, 0x00	; 0
    47a8:	30 e0       	ldi	r19, 0x00	; 0
    47aa:	40 e8       	ldi	r20, 0x80	; 128
    47ac:	5f e3       	ldi	r21, 0x3F	; 63
    47ae:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    47b2:	88 23       	and	r24, r24
    47b4:	2c f4       	brge	.+10     	; 0x47c0 <main+0x780>
		__ticks = 1;
    47b6:	81 e0       	ldi	r24, 0x01	; 1
    47b8:	90 e0       	ldi	r25, 0x00	; 0
    47ba:	9e 83       	std	Y+6, r25	; 0x06
    47bc:	8d 83       	std	Y+5, r24	; 0x05
    47be:	3f c0       	rjmp	.+126    	; 0x483e <main+0x7fe>
	else if (__tmp > 65535)
    47c0:	6f 81       	ldd	r22, Y+7	; 0x07
    47c2:	78 85       	ldd	r23, Y+8	; 0x08
    47c4:	89 85       	ldd	r24, Y+9	; 0x09
    47c6:	9a 85       	ldd	r25, Y+10	; 0x0a
    47c8:	20 e0       	ldi	r18, 0x00	; 0
    47ca:	3f ef       	ldi	r19, 0xFF	; 255
    47cc:	4f e7       	ldi	r20, 0x7F	; 127
    47ce:	57 e4       	ldi	r21, 0x47	; 71
    47d0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    47d4:	18 16       	cp	r1, r24
    47d6:	4c f5       	brge	.+82     	; 0x482a <main+0x7ea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    47d8:	6b 85       	ldd	r22, Y+11	; 0x0b
    47da:	7c 85       	ldd	r23, Y+12	; 0x0c
    47dc:	8d 85       	ldd	r24, Y+13	; 0x0d
    47de:	9e 85       	ldd	r25, Y+14	; 0x0e
    47e0:	20 e0       	ldi	r18, 0x00	; 0
    47e2:	30 e0       	ldi	r19, 0x00	; 0
    47e4:	40 e2       	ldi	r20, 0x20	; 32
    47e6:	51 e4       	ldi	r21, 0x41	; 65
    47e8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    47ec:	dc 01       	movw	r26, r24
    47ee:	cb 01       	movw	r24, r22
    47f0:	bc 01       	movw	r22, r24
    47f2:	cd 01       	movw	r24, r26
    47f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    47f8:	dc 01       	movw	r26, r24
    47fa:	cb 01       	movw	r24, r22
    47fc:	9e 83       	std	Y+6, r25	; 0x06
    47fe:	8d 83       	std	Y+5, r24	; 0x05
    4800:	0f c0       	rjmp	.+30     	; 0x4820 <main+0x7e0>
    4802:	88 ec       	ldi	r24, 0xC8	; 200
    4804:	90 e0       	ldi	r25, 0x00	; 0
    4806:	9c 83       	std	Y+4, r25	; 0x04
    4808:	8b 83       	std	Y+3, r24	; 0x03
    480a:	8b 81       	ldd	r24, Y+3	; 0x03
    480c:	9c 81       	ldd	r25, Y+4	; 0x04
    480e:	01 97       	sbiw	r24, 0x01	; 1
    4810:	f1 f7       	brne	.-4      	; 0x480e <main+0x7ce>
    4812:	9c 83       	std	Y+4, r25	; 0x04
    4814:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4816:	8d 81       	ldd	r24, Y+5	; 0x05
    4818:	9e 81       	ldd	r25, Y+6	; 0x06
    481a:	01 97       	sbiw	r24, 0x01	; 1
    481c:	9e 83       	std	Y+6, r25	; 0x06
    481e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4820:	8d 81       	ldd	r24, Y+5	; 0x05
    4822:	9e 81       	ldd	r25, Y+6	; 0x06
    4824:	00 97       	sbiw	r24, 0x00	; 0
    4826:	69 f7       	brne	.-38     	; 0x4802 <main+0x7c2>
    4828:	14 c0       	rjmp	.+40     	; 0x4852 <main+0x812>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    482a:	6f 81       	ldd	r22, Y+7	; 0x07
    482c:	78 85       	ldd	r23, Y+8	; 0x08
    482e:	89 85       	ldd	r24, Y+9	; 0x09
    4830:	9a 85       	ldd	r25, Y+10	; 0x0a
    4832:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4836:	dc 01       	movw	r26, r24
    4838:	cb 01       	movw	r24, r22
    483a:	9e 83       	std	Y+6, r25	; 0x06
    483c:	8d 83       	std	Y+5, r24	; 0x05
    483e:	8d 81       	ldd	r24, Y+5	; 0x05
    4840:	9e 81       	ldd	r25, Y+6	; 0x06
    4842:	9a 83       	std	Y+2, r25	; 0x02
    4844:	89 83       	std	Y+1, r24	; 0x01
    4846:	89 81       	ldd	r24, Y+1	; 0x01
    4848:	9a 81       	ldd	r25, Y+2	; 0x02
    484a:	01 97       	sbiw	r24, 0x01	; 1
    484c:	f1 f7       	brne	.-4      	; 0x484a <main+0x80a>
    484e:	9a 83       	std	Y+2, r25	; 0x02
    4850:	89 83       	std	Y+1, r24	; 0x01
				Play_Note(800,250);
				Play_Note(1000,250);


				ADC_voidInit(ADC_PRESCALER128);
				while(Local_u8UserIn == 1) //system stuck in user mode
    4852:	8a 89       	ldd	r24, Y+18	; 0x12
    4854:	81 30       	cpi	r24, 0x01	; 1
    4856:	09 f4       	brne	.+2      	; 0x485a <main+0x81a>
    4858:	54 cf       	rjmp	.-344    	; 0x4702 <main+0x6c2>
    485a:	29 ce       	rjmp	.-942    	; 0x44ae <main+0x46e>
		}
	}

	else    //wrong Admin password
	{
		USART_voidSendString("\r\nInvalid PW, System Locked !");
    485c:	80 ea       	ldi	r24, 0xA0	; 160
    485e:	93 e0       	ldi	r25, 0x03	; 3
    4860:	0e 94 7a 1f 	call	0x3ef4	; 0x3ef4 <USART_voidSendString>
		return 0;
    4864:	19 aa       	std	Y+49, r1	; 0x31
    4866:	18 aa       	std	Y+48, r1	; 0x30
    4868:	88 a9       	ldd	r24, Y+48	; 0x30
    486a:	99 a9       	ldd	r25, Y+49	; 0x31
	}
}
    486c:	e3 96       	adiw	r28, 0x33	; 51
    486e:	0f b6       	in	r0, 0x3f	; 63
    4870:	f8 94       	cli
    4872:	de bf       	out	0x3e, r29	; 62
    4874:	0f be       	out	0x3f, r0	; 63
    4876:	cd bf       	out	0x3d, r28	; 61
    4878:	cf 91       	pop	r28
    487a:	df 91       	pop	r29
    487c:	08 95       	ret

0000487e <String_u8CompareLength>:
/******************************************************************/
/******************* functions Implementation *********************/
/******************************************************************/

u8 String_u8CompareLength(u8 * Copy_pu8Str)
{
    487e:	df 93       	push	r29
    4880:	cf 93       	push	r28
    4882:	00 d0       	rcall	.+0      	; 0x4884 <String_u8CompareLength+0x6>
    4884:	0f 92       	push	r0
    4886:	cd b7       	in	r28, 0x3d	; 61
    4888:	de b7       	in	r29, 0x3e	; 62
    488a:	9b 83       	std	Y+3, r25	; 0x03
    488c:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8Iterator = 0;
    488e:	19 82       	std	Y+1, r1	; 0x01
    4890:	03 c0       	rjmp	.+6      	; 0x4898 <String_u8CompareLength+0x1a>

	while(Copy_pu8Str[Local_u8Iterator] != '\0')
	{
		Local_u8Iterator++;
    4892:	89 81       	ldd	r24, Y+1	; 0x01
    4894:	8f 5f       	subi	r24, 0xFF	; 255
    4896:	89 83       	std	Y+1, r24	; 0x01

u8 String_u8CompareLength(u8 * Copy_pu8Str)
{
	u8 Local_u8Iterator = 0;

	while(Copy_pu8Str[Local_u8Iterator] != '\0')
    4898:	89 81       	ldd	r24, Y+1	; 0x01
    489a:	28 2f       	mov	r18, r24
    489c:	30 e0       	ldi	r19, 0x00	; 0
    489e:	8a 81       	ldd	r24, Y+2	; 0x02
    48a0:	9b 81       	ldd	r25, Y+3	; 0x03
    48a2:	fc 01       	movw	r30, r24
    48a4:	e2 0f       	add	r30, r18
    48a6:	f3 1f       	adc	r31, r19
    48a8:	80 81       	ld	r24, Z
    48aa:	88 23       	and	r24, r24
    48ac:	91 f7       	brne	.-28     	; 0x4892 <String_u8CompareLength+0x14>
	{
		Local_u8Iterator++;
	}

	return Local_u8Iterator;
    48ae:	89 81       	ldd	r24, Y+1	; 0x01
}
    48b0:	0f 90       	pop	r0
    48b2:	0f 90       	pop	r0
    48b4:	0f 90       	pop	r0
    48b6:	cf 91       	pop	r28
    48b8:	df 91       	pop	r29
    48ba:	08 95       	ret

000048bc <String_u8CompareElements>:

u8 String_u8CompareElements(u8 * Copy_pu8Str1, u8 * Copy_pu8Str2)
{
    48bc:	1f 93       	push	r17
    48be:	df 93       	push	r29
    48c0:	cf 93       	push	r28
    48c2:	00 d0       	rcall	.+0      	; 0x48c4 <String_u8CompareElements+0x8>
    48c4:	00 d0       	rcall	.+0      	; 0x48c6 <String_u8CompareElements+0xa>
    48c6:	00 d0       	rcall	.+0      	; 0x48c8 <String_u8CompareElements+0xc>
    48c8:	cd b7       	in	r28, 0x3d	; 61
    48ca:	de b7       	in	r29, 0x3e	; 62
    48cc:	9b 83       	std	Y+3, r25	; 0x03
    48ce:	8a 83       	std	Y+2, r24	; 0x02
    48d0:	7d 83       	std	Y+5, r23	; 0x05
    48d2:	6c 83       	std	Y+4, r22	; 0x04
	u8 Local_u8Iterator;
	if (String_u8CompareLength(Copy_pu8Str1) != String_u8CompareLength(Copy_pu8Str2))
    48d4:	8a 81       	ldd	r24, Y+2	; 0x02
    48d6:	9b 81       	ldd	r25, Y+3	; 0x03
    48d8:	0e 94 3f 24 	call	0x487e	; 0x487e <String_u8CompareLength>
    48dc:	18 2f       	mov	r17, r24
    48de:	8c 81       	ldd	r24, Y+4	; 0x04
    48e0:	9d 81       	ldd	r25, Y+5	; 0x05
    48e2:	0e 94 3f 24 	call	0x487e	; 0x487e <String_u8CompareLength>
    48e6:	18 17       	cp	r17, r24
    48e8:	11 f0       	breq	.+4      	; 0x48ee <String_u8CompareElements+0x32>
	{
		return 0;
    48ea:	1e 82       	std	Y+6, r1	; 0x06
    48ec:	28 c0       	rjmp	.+80     	; 0x493e <String_u8CompareElements+0x82>
	}
	else
	{
		for (Local_u8Iterator=0;Copy_pu8Str1[Local_u8Iterator]!='\0';Local_u8Iterator++)
    48ee:	19 82       	std	Y+1, r1	; 0x01
    48f0:	19 c0       	rjmp	.+50     	; 0x4924 <String_u8CompareElements+0x68>
		{
			if (Copy_pu8Str1[Local_u8Iterator] != Copy_pu8Str2[Local_u8Iterator])
    48f2:	89 81       	ldd	r24, Y+1	; 0x01
    48f4:	28 2f       	mov	r18, r24
    48f6:	30 e0       	ldi	r19, 0x00	; 0
    48f8:	8a 81       	ldd	r24, Y+2	; 0x02
    48fa:	9b 81       	ldd	r25, Y+3	; 0x03
    48fc:	fc 01       	movw	r30, r24
    48fe:	e2 0f       	add	r30, r18
    4900:	f3 1f       	adc	r31, r19
    4902:	40 81       	ld	r20, Z
    4904:	89 81       	ldd	r24, Y+1	; 0x01
    4906:	28 2f       	mov	r18, r24
    4908:	30 e0       	ldi	r19, 0x00	; 0
    490a:	8c 81       	ldd	r24, Y+4	; 0x04
    490c:	9d 81       	ldd	r25, Y+5	; 0x05
    490e:	fc 01       	movw	r30, r24
    4910:	e2 0f       	add	r30, r18
    4912:	f3 1f       	adc	r31, r19
    4914:	80 81       	ld	r24, Z
    4916:	48 17       	cp	r20, r24
    4918:	11 f0       	breq	.+4      	; 0x491e <String_u8CompareElements+0x62>
				return 0;
    491a:	1e 82       	std	Y+6, r1	; 0x06
    491c:	10 c0       	rjmp	.+32     	; 0x493e <String_u8CompareElements+0x82>
	{
		return 0;
	}
	else
	{
		for (Local_u8Iterator=0;Copy_pu8Str1[Local_u8Iterator]!='\0';Local_u8Iterator++)
    491e:	89 81       	ldd	r24, Y+1	; 0x01
    4920:	8f 5f       	subi	r24, 0xFF	; 255
    4922:	89 83       	std	Y+1, r24	; 0x01
    4924:	89 81       	ldd	r24, Y+1	; 0x01
    4926:	28 2f       	mov	r18, r24
    4928:	30 e0       	ldi	r19, 0x00	; 0
    492a:	8a 81       	ldd	r24, Y+2	; 0x02
    492c:	9b 81       	ldd	r25, Y+3	; 0x03
    492e:	fc 01       	movw	r30, r24
    4930:	e2 0f       	add	r30, r18
    4932:	f3 1f       	adc	r31, r19
    4934:	80 81       	ld	r24, Z
    4936:	88 23       	and	r24, r24
    4938:	e1 f6       	brne	.-72     	; 0x48f2 <String_u8CompareElements+0x36>
		{
			if (Copy_pu8Str1[Local_u8Iterator] != Copy_pu8Str2[Local_u8Iterator])
				return 0;
		}
		return 1;
    493a:	81 e0       	ldi	r24, 0x01	; 1
    493c:	8e 83       	std	Y+6, r24	; 0x06
    493e:	8e 81       	ldd	r24, Y+6	; 0x06
	}
}
    4940:	26 96       	adiw	r28, 0x06	; 6
    4942:	0f b6       	in	r0, 0x3f	; 63
    4944:	f8 94       	cli
    4946:	de bf       	out	0x3e, r29	; 62
    4948:	0f be       	out	0x3f, r0	; 63
    494a:	cd bf       	out	0x3d, r28	; 61
    494c:	cf 91       	pop	r28
    494e:	df 91       	pop	r29
    4950:	1f 91       	pop	r17
    4952:	08 95       	ret

00004954 <Check_u8UserID>:

u8 Check_u8UserID(u8 * Copy_pu8UserID)
{
    4954:	df 93       	push	r29
    4956:	cf 93       	push	r28
    4958:	00 d0       	rcall	.+0      	; 0x495a <Check_u8UserID+0x6>
    495a:	00 d0       	rcall	.+0      	; 0x495c <Check_u8UserID+0x8>
    495c:	cd b7       	in	r28, 0x3d	; 61
    495e:	de b7       	in	r29, 0x3e	; 62
    4960:	9b 83       	std	Y+3, r25	; 0x03
    4962:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8Iterator = 0;
    4964:	19 82       	std	Y+1, r1	; 0x01
    4966:	33 c0       	rjmp	.+102    	; 0x49ce <Check_u8UserID+0x7a>
	while(Local_u8Iterator < 3)
	{
		USART_voidSendString("\r\nPlease Enter your ID : ");
    4968:	8e eb       	ldi	r24, 0xBE	; 190
    496a:	93 e0       	ldi	r25, 0x03	; 3
    496c:	0e 94 7a 1f 	call	0x3ef4	; 0x3ef4 <USART_voidSendString>
		USART_voidReceiveString(Copy_pu8UserID);
    4970:	8a 81       	ldd	r24, Y+2	; 0x02
    4972:	9b 81       	ldd	r25, Y+3	; 0x03
    4974:	0e 94 a2 1f 	call	0x3f44	; 0x3f44 <USART_voidReceiveString>

		if(String_u8CompareElements(ID_1, Copy_pu8UserID))
    4978:	80 e3       	ldi	r24, 0x30	; 48
    497a:	95 e0       	ldi	r25, 0x05	; 5
    497c:	2a 81       	ldd	r18, Y+2	; 0x02
    497e:	3b 81       	ldd	r19, Y+3	; 0x03
    4980:	b9 01       	movw	r22, r18
    4982:	0e 94 5e 24 	call	0x48bc	; 0x48bc <String_u8CompareElements>
    4986:	88 23       	and	r24, r24
    4988:	19 f0       	breq	.+6      	; 0x4990 <Check_u8UserID+0x3c>
		{
			return 1;   //first user
    498a:	81 e0       	ldi	r24, 0x01	; 1
    498c:	8c 83       	std	Y+4, r24	; 0x04
    498e:	27 c0       	rjmp	.+78     	; 0x49de <Check_u8UserID+0x8a>
		}
		else if(String_u8CompareElements(ID_2, Copy_pu8UserID))
    4990:	87 e6       	ldi	r24, 0x67	; 103
    4992:	95 e0       	ldi	r25, 0x05	; 5
    4994:	2a 81       	ldd	r18, Y+2	; 0x02
    4996:	3b 81       	ldd	r19, Y+3	; 0x03
    4998:	b9 01       	movw	r22, r18
    499a:	0e 94 5e 24 	call	0x48bc	; 0x48bc <String_u8CompareElements>
    499e:	88 23       	and	r24, r24
    49a0:	19 f0       	breq	.+6      	; 0x49a8 <Check_u8UserID+0x54>
		{
			return 2;   //second user
    49a2:	82 e0       	ldi	r24, 0x02	; 2
    49a4:	8c 83       	std	Y+4, r24	; 0x04
    49a6:	1b c0       	rjmp	.+54     	; 0x49de <Check_u8UserID+0x8a>
		}
		else if(String_u8CompareElements(ID_3, Copy_pu8UserID))
    49a8:	83 e5       	ldi	r24, 0x53	; 83
    49aa:	95 e0       	ldi	r25, 0x05	; 5
    49ac:	2a 81       	ldd	r18, Y+2	; 0x02
    49ae:	3b 81       	ldd	r19, Y+3	; 0x03
    49b0:	b9 01       	movw	r22, r18
    49b2:	0e 94 5e 24 	call	0x48bc	; 0x48bc <String_u8CompareElements>
    49b6:	88 23       	and	r24, r24
    49b8:	19 f0       	breq	.+6      	; 0x49c0 <Check_u8UserID+0x6c>
		{
			return 3;   //third user
    49ba:	83 e0       	ldi	r24, 0x03	; 3
    49bc:	8c 83       	std	Y+4, r24	; 0x04
    49be:	0f c0       	rjmp	.+30     	; 0x49de <Check_u8UserID+0x8a>
		}
		else
		{
			Local_u8Iterator++;
    49c0:	89 81       	ldd	r24, Y+1	; 0x01
    49c2:	8f 5f       	subi	r24, 0xFF	; 255
    49c4:	89 83       	std	Y+1, r24	; 0x01
			USART_voidSendString("   Wrong ID, Try again\r\n");
    49c6:	88 ed       	ldi	r24, 0xD8	; 216
    49c8:	93 e0       	ldi	r25, 0x03	; 3
    49ca:	0e 94 7a 1f 	call	0x3ef4	; 0x3ef4 <USART_voidSendString>
}

u8 Check_u8UserID(u8 * Copy_pu8UserID)
{
	u8 Local_u8Iterator = 0;
	while(Local_u8Iterator < 3)
    49ce:	89 81       	ldd	r24, Y+1	; 0x01
    49d0:	83 30       	cpi	r24, 0x03	; 3
    49d2:	50 f2       	brcs	.-108    	; 0x4968 <Check_u8UserID+0x14>
		{
			Local_u8Iterator++;
			USART_voidSendString("   Wrong ID, Try again\r\n");
		}
	}
	USART_voidSendString("\r\nInvalid ID, System Locked !");
    49d4:	86 e7       	ldi	r24, 0x76	; 118
    49d6:	91 e0       	ldi	r25, 0x01	; 1
    49d8:	0e 94 7a 1f 	call	0x3ef4	; 0x3ef4 <USART_voidSendString>
	return 0;   //no ID matches Users for 3 times
    49dc:	1c 82       	std	Y+4, r1	; 0x04
    49de:	8c 81       	ldd	r24, Y+4	; 0x04
}
    49e0:	0f 90       	pop	r0
    49e2:	0f 90       	pop	r0
    49e4:	0f 90       	pop	r0
    49e6:	0f 90       	pop	r0
    49e8:	cf 91       	pop	r28
    49ea:	df 91       	pop	r29
    49ec:	08 95       	ret

000049ee <Check_u8UserPW>:

u8 Check_u8UserPW(u8 * Copy_pu8UserPW, u8 * Copy_pu8SavedUserPW[])
{
    49ee:	df 93       	push	r29
    49f0:	cf 93       	push	r28
    49f2:	00 d0       	rcall	.+0      	; 0x49f4 <Check_u8UserPW+0x6>
    49f4:	00 d0       	rcall	.+0      	; 0x49f6 <Check_u8UserPW+0x8>
    49f6:	00 d0       	rcall	.+0      	; 0x49f8 <Check_u8UserPW+0xa>
    49f8:	cd b7       	in	r28, 0x3d	; 61
    49fa:	de b7       	in	r29, 0x3e	; 62
    49fc:	9b 83       	std	Y+3, r25	; 0x03
    49fe:	8a 83       	std	Y+2, r24	; 0x02
    4a00:	7d 83       	std	Y+5, r23	; 0x05
    4a02:	6c 83       	std	Y+4, r22	; 0x04
	u8 Local_u8Iterator = 0;
    4a04:	19 82       	std	Y+1, r1	; 0x01
    4a06:	1b c0       	rjmp	.+54     	; 0x4a3e <Check_u8UserPW+0x50>
	while(Local_u8Iterator < 3)
	{
		USART_voidSendString("\r\nEnter Your Password : ");
    4a08:	81 ef       	ldi	r24, 0xF1	; 241
    4a0a:	93 e0       	ldi	r25, 0x03	; 3
    4a0c:	0e 94 7a 1f 	call	0x3ef4	; 0x3ef4 <USART_voidSendString>
		USART_voidReceiveString(Copy_pu8UserPW);
    4a10:	8a 81       	ldd	r24, Y+2	; 0x02
    4a12:	9b 81       	ldd	r25, Y+3	; 0x03
    4a14:	0e 94 a2 1f 	call	0x3f44	; 0x3f44 <USART_voidReceiveString>

		if(String_u8CompareElements(Copy_pu8UserPW, Copy_pu8SavedUserPW))
    4a18:	2c 81       	ldd	r18, Y+4	; 0x04
    4a1a:	3d 81       	ldd	r19, Y+5	; 0x05
    4a1c:	8a 81       	ldd	r24, Y+2	; 0x02
    4a1e:	9b 81       	ldd	r25, Y+3	; 0x03
    4a20:	b9 01       	movw	r22, r18
    4a22:	0e 94 5e 24 	call	0x48bc	; 0x48bc <String_u8CompareElements>
    4a26:	88 23       	and	r24, r24
    4a28:	19 f0       	breq	.+6      	; 0x4a30 <Check_u8UserPW+0x42>
		{
			return 11;
    4a2a:	8b e0       	ldi	r24, 0x0B	; 11
    4a2c:	8e 83       	std	Y+6, r24	; 0x06
    4a2e:	0f c0       	rjmp	.+30     	; 0x4a4e <Check_u8UserPW+0x60>
		}
		else
		{
			Local_u8Iterator++;
    4a30:	89 81       	ldd	r24, Y+1	; 0x01
    4a32:	8f 5f       	subi	r24, 0xFF	; 255
    4a34:	89 83       	std	Y+1, r24	; 0x01
			USART_voidSendString("   Wrong PW, Try again\r\n");
    4a36:	8a e0       	ldi	r24, 0x0A	; 10
    4a38:	94 e0       	ldi	r25, 0x04	; 4
    4a3a:	0e 94 7a 1f 	call	0x3ef4	; 0x3ef4 <USART_voidSendString>
}

u8 Check_u8UserPW(u8 * Copy_pu8UserPW, u8 * Copy_pu8SavedUserPW[])
{
	u8 Local_u8Iterator = 0;
	while(Local_u8Iterator < 3)
    4a3e:	89 81       	ldd	r24, Y+1	; 0x01
    4a40:	83 30       	cpi	r24, 0x03	; 3
    4a42:	10 f3       	brcs	.-60     	; 0x4a08 <Check_u8UserPW+0x1a>
		{
			Local_u8Iterator++;
			USART_voidSendString("   Wrong PW, Try again\r\n");
		}
	}
	USART_voidSendString("\r\nInvalid PW, System Locked !");
    4a44:	80 ea       	ldi	r24, 0xA0	; 160
    4a46:	93 e0       	ldi	r25, 0x03	; 3
    4a48:	0e 94 7a 1f 	call	0x3ef4	; 0x3ef4 <USART_voidSendString>
	return 0;   //no PW matches Users for 3 times
    4a4c:	1e 82       	std	Y+6, r1	; 0x06
    4a4e:	8e 81       	ldd	r24, Y+6	; 0x06
}
    4a50:	26 96       	adiw	r28, 0x06	; 6
    4a52:	0f b6       	in	r0, 0x3f	; 63
    4a54:	f8 94       	cli
    4a56:	de bf       	out	0x3e, r29	; 62
    4a58:	0f be       	out	0x3f, r0	; 63
    4a5a:	cd bf       	out	0x3d, r28	; 61
    4a5c:	cf 91       	pop	r28
    4a5e:	df 91       	pop	r29
    4a60:	08 95       	ret

00004a62 <App_voidAdminAddUser>:
//	PWM_voidSetDutyCycleRange0_180(0, FREQUENCY_250);
//	PWM_voidProducePWM(CHANNEL_A, FREQUENCY_250);
//}

void App_voidAdminAddUser(u16 Copy_u16Address, u8 * Copy_u8Str)
{
    4a62:	df 93       	push	r29
    4a64:	cf 93       	push	r28
    4a66:	00 d0       	rcall	.+0      	; 0x4a68 <App_voidAdminAddUser+0x6>
    4a68:	00 d0       	rcall	.+0      	; 0x4a6a <App_voidAdminAddUser+0x8>
    4a6a:	cd b7       	in	r28, 0x3d	; 61
    4a6c:	de b7       	in	r29, 0x3e	; 62
    4a6e:	9a 83       	std	Y+2, r25	; 0x02
    4a70:	89 83       	std	Y+1, r24	; 0x01
    4a72:	7c 83       	std	Y+4, r23	; 0x04
    4a74:	6b 83       	std	Y+3, r22	; 0x03
	/*mapping address to eeprom address (1->0) (2->10) (3->20)*/
	Copy_u16Address = (Copy_u16Address - 1) *10;
    4a76:	89 81       	ldd	r24, Y+1	; 0x01
    4a78:	9a 81       	ldd	r25, Y+2	; 0x02
    4a7a:	9c 01       	movw	r18, r24
    4a7c:	22 0f       	add	r18, r18
    4a7e:	33 1f       	adc	r19, r19
    4a80:	c9 01       	movw	r24, r18
    4a82:	88 0f       	add	r24, r24
    4a84:	99 1f       	adc	r25, r25
    4a86:	88 0f       	add	r24, r24
    4a88:	99 1f       	adc	r25, r25
    4a8a:	82 0f       	add	r24, r18
    4a8c:	93 1f       	adc	r25, r19
    4a8e:	0a 97       	sbiw	r24, 0x0a	; 10
    4a90:	9a 83       	std	Y+2, r25	; 0x02
    4a92:	89 83       	std	Y+1, r24	; 0x01

	/*write the string to the required address*/
	EEPROM_voidSendString(Copy_u16Address, Copy_u8Str);
    4a94:	89 81       	ldd	r24, Y+1	; 0x01
    4a96:	9a 81       	ldd	r25, Y+2	; 0x02
    4a98:	2b 81       	ldd	r18, Y+3	; 0x03
    4a9a:	3c 81       	ldd	r19, Y+4	; 0x04
    4a9c:	b9 01       	movw	r22, r18
    4a9e:	0e 94 e3 17 	call	0x2fc6	; 0x2fc6 <EEPROM_voidSendString>
}
    4aa2:	0f 90       	pop	r0
    4aa4:	0f 90       	pop	r0
    4aa6:	0f 90       	pop	r0
    4aa8:	0f 90       	pop	r0
    4aaa:	cf 91       	pop	r28
    4aac:	df 91       	pop	r29
    4aae:	08 95       	ret

00004ab0 <App_voidAdminAddUserPW>:

void App_voidAdminAddUserPW(u16 Copy_u16Address, u8 * Copy_u8Str)
{
    4ab0:	df 93       	push	r29
    4ab2:	cf 93       	push	r28
    4ab4:	00 d0       	rcall	.+0      	; 0x4ab6 <App_voidAdminAddUserPW+0x6>
    4ab6:	00 d0       	rcall	.+0      	; 0x4ab8 <App_voidAdminAddUserPW+0x8>
    4ab8:	cd b7       	in	r28, 0x3d	; 61
    4aba:	de b7       	in	r29, 0x3e	; 62
    4abc:	9a 83       	std	Y+2, r25	; 0x02
    4abe:	89 83       	std	Y+1, r24	; 0x01
    4ac0:	7c 83       	std	Y+4, r23	; 0x04
    4ac2:	6b 83       	std	Y+3, r22	; 0x03
	/*mapping address to eeprom address (1->5) (2->15) (3->25)*/
	Copy_u16Address = ((Copy_u16Address - 1) *10) + 5;
    4ac4:	89 81       	ldd	r24, Y+1	; 0x01
    4ac6:	9a 81       	ldd	r25, Y+2	; 0x02
    4ac8:	9c 01       	movw	r18, r24
    4aca:	22 0f       	add	r18, r18
    4acc:	33 1f       	adc	r19, r19
    4ace:	c9 01       	movw	r24, r18
    4ad0:	88 0f       	add	r24, r24
    4ad2:	99 1f       	adc	r25, r25
    4ad4:	88 0f       	add	r24, r24
    4ad6:	99 1f       	adc	r25, r25
    4ad8:	82 0f       	add	r24, r18
    4ada:	93 1f       	adc	r25, r19
    4adc:	05 97       	sbiw	r24, 0x05	; 5
    4ade:	9a 83       	std	Y+2, r25	; 0x02
    4ae0:	89 83       	std	Y+1, r24	; 0x01

	/*write the string to the required address*/
	EEPROM_voidSendString(Copy_u16Address, Copy_u8Str);
    4ae2:	89 81       	ldd	r24, Y+1	; 0x01
    4ae4:	9a 81       	ldd	r25, Y+2	; 0x02
    4ae6:	2b 81       	ldd	r18, Y+3	; 0x03
    4ae8:	3c 81       	ldd	r19, Y+4	; 0x04
    4aea:	b9 01       	movw	r22, r18
    4aec:	0e 94 e3 17 	call	0x2fc6	; 0x2fc6 <EEPROM_voidSendString>
}
    4af0:	0f 90       	pop	r0
    4af2:	0f 90       	pop	r0
    4af4:	0f 90       	pop	r0
    4af6:	0f 90       	pop	r0
    4af8:	cf 91       	pop	r28
    4afa:	df 91       	pop	r29
    4afc:	08 95       	ret

00004afe <STR_u8StringToInt>:

u8 STR_u8StringToInt(u8 * Str)
{
    4afe:	df 93       	push	r29
    4b00:	cf 93       	push	r28
    4b02:	00 d0       	rcall	.+0      	; 0x4b04 <STR_u8StringToInt+0x6>
    4b04:	00 d0       	rcall	.+0      	; 0x4b06 <STR_u8StringToInt+0x8>
    4b06:	cd b7       	in	r28, 0x3d	; 61
    4b08:	de b7       	in	r29, 0x3e	; 62
    4b0a:	9c 83       	std	Y+4, r25	; 0x04
    4b0c:	8b 83       	std	Y+3, r24	; 0x03
	u8 i = 0;
    4b0e:	1a 82       	std	Y+2, r1	; 0x02
	u8 n = 0;
    4b10:	19 82       	std	Y+1, r1	; 0x01
	for(i=0;Str[i] != '\0';i++)
    4b12:	1a 82       	std	Y+2, r1	; 0x02
    4b14:	33 c0       	rjmp	.+102    	; 0x4b7c <STR_u8StringToInt+0x7e>
	{
		if(Str[i]>='0' && Str[i]<='9')
    4b16:	8a 81       	ldd	r24, Y+2	; 0x02
    4b18:	28 2f       	mov	r18, r24
    4b1a:	30 e0       	ldi	r19, 0x00	; 0
    4b1c:	8b 81       	ldd	r24, Y+3	; 0x03
    4b1e:	9c 81       	ldd	r25, Y+4	; 0x04
    4b20:	fc 01       	movw	r30, r24
    4b22:	e2 0f       	add	r30, r18
    4b24:	f3 1f       	adc	r31, r19
    4b26:	80 81       	ld	r24, Z
    4b28:	80 33       	cpi	r24, 0x30	; 48
    4b2a:	28 f1       	brcs	.+74     	; 0x4b76 <STR_u8StringToInt+0x78>
    4b2c:	8a 81       	ldd	r24, Y+2	; 0x02
    4b2e:	28 2f       	mov	r18, r24
    4b30:	30 e0       	ldi	r19, 0x00	; 0
    4b32:	8b 81       	ldd	r24, Y+3	; 0x03
    4b34:	9c 81       	ldd	r25, Y+4	; 0x04
    4b36:	fc 01       	movw	r30, r24
    4b38:	e2 0f       	add	r30, r18
    4b3a:	f3 1f       	adc	r31, r19
    4b3c:	80 81       	ld	r24, Z
    4b3e:	8a 33       	cpi	r24, 0x3A	; 58
    4b40:	d0 f4       	brcc	.+52     	; 0x4b76 <STR_u8StringToInt+0x78>
		{
			n=n*10+(Str[i]-'0');
    4b42:	89 81       	ldd	r24, Y+1	; 0x01
    4b44:	88 2f       	mov	r24, r24
    4b46:	90 e0       	ldi	r25, 0x00	; 0
    4b48:	9c 01       	movw	r18, r24
    4b4a:	22 0f       	add	r18, r18
    4b4c:	33 1f       	adc	r19, r19
    4b4e:	c9 01       	movw	r24, r18
    4b50:	88 0f       	add	r24, r24
    4b52:	99 1f       	adc	r25, r25
    4b54:	88 0f       	add	r24, r24
    4b56:	99 1f       	adc	r25, r25
    4b58:	82 0f       	add	r24, r18
    4b5a:	93 1f       	adc	r25, r19
    4b5c:	48 2f       	mov	r20, r24
    4b5e:	8a 81       	ldd	r24, Y+2	; 0x02
    4b60:	28 2f       	mov	r18, r24
    4b62:	30 e0       	ldi	r19, 0x00	; 0
    4b64:	8b 81       	ldd	r24, Y+3	; 0x03
    4b66:	9c 81       	ldd	r25, Y+4	; 0x04
    4b68:	fc 01       	movw	r30, r24
    4b6a:	e2 0f       	add	r30, r18
    4b6c:	f3 1f       	adc	r31, r19
    4b6e:	80 81       	ld	r24, Z
    4b70:	84 0f       	add	r24, r20
    4b72:	80 53       	subi	r24, 0x30	; 48
    4b74:	89 83       	std	Y+1, r24	; 0x01

u8 STR_u8StringToInt(u8 * Str)
{
	u8 i = 0;
	u8 n = 0;
	for(i=0;Str[i] != '\0';i++)
    4b76:	8a 81       	ldd	r24, Y+2	; 0x02
    4b78:	8f 5f       	subi	r24, 0xFF	; 255
    4b7a:	8a 83       	std	Y+2, r24	; 0x02
    4b7c:	8a 81       	ldd	r24, Y+2	; 0x02
    4b7e:	28 2f       	mov	r18, r24
    4b80:	30 e0       	ldi	r19, 0x00	; 0
    4b82:	8b 81       	ldd	r24, Y+3	; 0x03
    4b84:	9c 81       	ldd	r25, Y+4	; 0x04
    4b86:	fc 01       	movw	r30, r24
    4b88:	e2 0f       	add	r30, r18
    4b8a:	f3 1f       	adc	r31, r19
    4b8c:	80 81       	ld	r24, Z
    4b8e:	88 23       	and	r24, r24
    4b90:	11 f6       	brne	.-124    	; 0x4b16 <STR_u8StringToInt+0x18>
		if(Str[i]>='0' && Str[i]<='9')
		{
			n=n*10+(Str[i]-'0');
		}
	}
	return n;
    4b92:	89 81       	ldd	r24, Y+1	; 0x01
}
    4b94:	0f 90       	pop	r0
    4b96:	0f 90       	pop	r0
    4b98:	0f 90       	pop	r0
    4b9a:	0f 90       	pop	r0
    4b9c:	cf 91       	pop	r28
    4b9e:	df 91       	pop	r29
    4ba0:	08 95       	ret

00004ba2 <Play_Note>:

void Play_Note(u16 Frequancy,u8 Delay_MilliSec)
{
    4ba2:	df 93       	push	r29
    4ba4:	cf 93       	push	r28
    4ba6:	cd b7       	in	r28, 0x3d	; 61
    4ba8:	de b7       	in	r29, 0x3e	; 62
    4baa:	e5 97       	sbiw	r28, 0x35	; 53
    4bac:	0f b6       	in	r0, 0x3f	; 63
    4bae:	f8 94       	cli
    4bb0:	de bf       	out	0x3e, r29	; 62
    4bb2:	0f be       	out	0x3f, r0	; 63
    4bb4:	cd bf       	out	0x3d, r28	; 61
    4bb6:	9c ab       	std	Y+52, r25	; 0x34
    4bb8:	8b ab       	std	Y+51, r24	; 0x33
    4bba:	6d ab       	std	Y+53, r22	; 0x35
	for(int i=0; i<Delay_MilliSec ; i++)
    4bbc:	1a aa       	std	Y+50, r1	; 0x32
    4bbe:	19 aa       	std	Y+49, r1	; 0x31
    4bc0:	99 c1       	rjmp	.+818    	; 0x4ef4 <Play_Note+0x352>
	{
		DIO_u8SetPinValue(DIO_u8PORTD,DIO_u8PIN3,DIO_u8PIN_HIGH);
    4bc2:	83 e0       	ldi	r24, 0x03	; 3
    4bc4:	63 e0       	ldi	r22, 0x03	; 3
    4bc6:	41 e0       	ldi	r20, 0x01	; 1
    4bc8:	0e 94 26 12 	call	0x244c	; 0x244c <DIO_u8SetPinValue>
		_delay_us(Frequancy);
    4bcc:	8b a9       	ldd	r24, Y+51	; 0x33
    4bce:	9c a9       	ldd	r25, Y+52	; 0x34
    4bd0:	cc 01       	movw	r24, r24
    4bd2:	a0 e0       	ldi	r26, 0x00	; 0
    4bd4:	b0 e0       	ldi	r27, 0x00	; 0
    4bd6:	bc 01       	movw	r22, r24
    4bd8:	cd 01       	movw	r24, r26
    4bda:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    4bde:	dc 01       	movw	r26, r24
    4be0:	cb 01       	movw	r24, r22
    4be2:	8d a7       	std	Y+45, r24	; 0x2d
    4be4:	9e a7       	std	Y+46, r25	; 0x2e
    4be6:	af a7       	std	Y+47, r26	; 0x2f
    4be8:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    4bea:	6d a5       	ldd	r22, Y+45	; 0x2d
    4bec:	7e a5       	ldd	r23, Y+46	; 0x2e
    4bee:	8f a5       	ldd	r24, Y+47	; 0x2f
    4bf0:	98 a9       	ldd	r25, Y+48	; 0x30
    4bf2:	2b ea       	ldi	r18, 0xAB	; 171
    4bf4:	3a ea       	ldi	r19, 0xAA	; 170
    4bf6:	4a e2       	ldi	r20, 0x2A	; 42
    4bf8:	50 e4       	ldi	r21, 0x40	; 64
    4bfa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4bfe:	dc 01       	movw	r26, r24
    4c00:	cb 01       	movw	r24, r22
    4c02:	89 a7       	std	Y+41, r24	; 0x29
    4c04:	9a a7       	std	Y+42, r25	; 0x2a
    4c06:	ab a7       	std	Y+43, r26	; 0x2b
    4c08:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    4c0a:	69 a5       	ldd	r22, Y+41	; 0x29
    4c0c:	7a a5       	ldd	r23, Y+42	; 0x2a
    4c0e:	8b a5       	ldd	r24, Y+43	; 0x2b
    4c10:	9c a5       	ldd	r25, Y+44	; 0x2c
    4c12:	20 e0       	ldi	r18, 0x00	; 0
    4c14:	30 e0       	ldi	r19, 0x00	; 0
    4c16:	40 e8       	ldi	r20, 0x80	; 128
    4c18:	5f e3       	ldi	r21, 0x3F	; 63
    4c1a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4c1e:	88 23       	and	r24, r24
    4c20:	1c f4       	brge	.+6      	; 0x4c28 <Play_Note+0x86>
		__ticks = 1;
    4c22:	81 e0       	ldi	r24, 0x01	; 1
    4c24:	88 a7       	std	Y+40, r24	; 0x28
    4c26:	91 c0       	rjmp	.+290    	; 0x4d4a <Play_Note+0x1a8>
	else if (__tmp > 255)
    4c28:	69 a5       	ldd	r22, Y+41	; 0x29
    4c2a:	7a a5       	ldd	r23, Y+42	; 0x2a
    4c2c:	8b a5       	ldd	r24, Y+43	; 0x2b
    4c2e:	9c a5       	ldd	r25, Y+44	; 0x2c
    4c30:	20 e0       	ldi	r18, 0x00	; 0
    4c32:	30 e0       	ldi	r19, 0x00	; 0
    4c34:	4f e7       	ldi	r20, 0x7F	; 127
    4c36:	53 e4       	ldi	r21, 0x43	; 67
    4c38:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4c3c:	18 16       	cp	r1, r24
    4c3e:	0c f0       	brlt	.+2      	; 0x4c42 <Play_Note+0xa0>
    4c40:	7b c0       	rjmp	.+246    	; 0x4d38 <Play_Note+0x196>
	{
		_delay_ms(__us / 1000.0);
    4c42:	6d a5       	ldd	r22, Y+45	; 0x2d
    4c44:	7e a5       	ldd	r23, Y+46	; 0x2e
    4c46:	8f a5       	ldd	r24, Y+47	; 0x2f
    4c48:	98 a9       	ldd	r25, Y+48	; 0x30
    4c4a:	20 e0       	ldi	r18, 0x00	; 0
    4c4c:	30 e0       	ldi	r19, 0x00	; 0
    4c4e:	4a e7       	ldi	r20, 0x7A	; 122
    4c50:	54 e4       	ldi	r21, 0x44	; 68
    4c52:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    4c56:	dc 01       	movw	r26, r24
    4c58:	cb 01       	movw	r24, r22
    4c5a:	8c a3       	std	Y+36, r24	; 0x24
    4c5c:	9d a3       	std	Y+37, r25	; 0x25
    4c5e:	ae a3       	std	Y+38, r26	; 0x26
    4c60:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4c62:	6c a1       	ldd	r22, Y+36	; 0x24
    4c64:	7d a1       	ldd	r23, Y+37	; 0x25
    4c66:	8e a1       	ldd	r24, Y+38	; 0x26
    4c68:	9f a1       	ldd	r25, Y+39	; 0x27
    4c6a:	20 e0       	ldi	r18, 0x00	; 0
    4c6c:	30 e0       	ldi	r19, 0x00	; 0
    4c6e:	4a ef       	ldi	r20, 0xFA	; 250
    4c70:	54 e4       	ldi	r21, 0x44	; 68
    4c72:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4c76:	dc 01       	movw	r26, r24
    4c78:	cb 01       	movw	r24, r22
    4c7a:	88 a3       	std	Y+32, r24	; 0x20
    4c7c:	99 a3       	std	Y+33, r25	; 0x21
    4c7e:	aa a3       	std	Y+34, r26	; 0x22
    4c80:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    4c82:	68 a1       	ldd	r22, Y+32	; 0x20
    4c84:	79 a1       	ldd	r23, Y+33	; 0x21
    4c86:	8a a1       	ldd	r24, Y+34	; 0x22
    4c88:	9b a1       	ldd	r25, Y+35	; 0x23
    4c8a:	20 e0       	ldi	r18, 0x00	; 0
    4c8c:	30 e0       	ldi	r19, 0x00	; 0
    4c8e:	40 e8       	ldi	r20, 0x80	; 128
    4c90:	5f e3       	ldi	r21, 0x3F	; 63
    4c92:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4c96:	88 23       	and	r24, r24
    4c98:	2c f4       	brge	.+10     	; 0x4ca4 <Play_Note+0x102>
		__ticks = 1;
    4c9a:	81 e0       	ldi	r24, 0x01	; 1
    4c9c:	90 e0       	ldi	r25, 0x00	; 0
    4c9e:	9f 8f       	std	Y+31, r25	; 0x1f
    4ca0:	8e 8f       	std	Y+30, r24	; 0x1e
    4ca2:	3f c0       	rjmp	.+126    	; 0x4d22 <Play_Note+0x180>
	else if (__tmp > 65535)
    4ca4:	68 a1       	ldd	r22, Y+32	; 0x20
    4ca6:	79 a1       	ldd	r23, Y+33	; 0x21
    4ca8:	8a a1       	ldd	r24, Y+34	; 0x22
    4caa:	9b a1       	ldd	r25, Y+35	; 0x23
    4cac:	20 e0       	ldi	r18, 0x00	; 0
    4cae:	3f ef       	ldi	r19, 0xFF	; 255
    4cb0:	4f e7       	ldi	r20, 0x7F	; 127
    4cb2:	57 e4       	ldi	r21, 0x47	; 71
    4cb4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4cb8:	18 16       	cp	r1, r24
    4cba:	4c f5       	brge	.+82     	; 0x4d0e <Play_Note+0x16c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4cbc:	6c a1       	ldd	r22, Y+36	; 0x24
    4cbe:	7d a1       	ldd	r23, Y+37	; 0x25
    4cc0:	8e a1       	ldd	r24, Y+38	; 0x26
    4cc2:	9f a1       	ldd	r25, Y+39	; 0x27
    4cc4:	20 e0       	ldi	r18, 0x00	; 0
    4cc6:	30 e0       	ldi	r19, 0x00	; 0
    4cc8:	40 e2       	ldi	r20, 0x20	; 32
    4cca:	51 e4       	ldi	r21, 0x41	; 65
    4ccc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4cd0:	dc 01       	movw	r26, r24
    4cd2:	cb 01       	movw	r24, r22
    4cd4:	bc 01       	movw	r22, r24
    4cd6:	cd 01       	movw	r24, r26
    4cd8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4cdc:	dc 01       	movw	r26, r24
    4cde:	cb 01       	movw	r24, r22
    4ce0:	9f 8f       	std	Y+31, r25	; 0x1f
    4ce2:	8e 8f       	std	Y+30, r24	; 0x1e
    4ce4:	0f c0       	rjmp	.+30     	; 0x4d04 <Play_Note+0x162>
    4ce6:	88 ec       	ldi	r24, 0xC8	; 200
    4ce8:	90 e0       	ldi	r25, 0x00	; 0
    4cea:	9d 8f       	std	Y+29, r25	; 0x1d
    4cec:	8c 8f       	std	Y+28, r24	; 0x1c
    4cee:	8c 8d       	ldd	r24, Y+28	; 0x1c
    4cf0:	9d 8d       	ldd	r25, Y+29	; 0x1d
    4cf2:	01 97       	sbiw	r24, 0x01	; 1
    4cf4:	f1 f7       	brne	.-4      	; 0x4cf2 <Play_Note+0x150>
    4cf6:	9d 8f       	std	Y+29, r25	; 0x1d
    4cf8:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4cfa:	8e 8d       	ldd	r24, Y+30	; 0x1e
    4cfc:	9f 8d       	ldd	r25, Y+31	; 0x1f
    4cfe:	01 97       	sbiw	r24, 0x01	; 1
    4d00:	9f 8f       	std	Y+31, r25	; 0x1f
    4d02:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4d04:	8e 8d       	ldd	r24, Y+30	; 0x1e
    4d06:	9f 8d       	ldd	r25, Y+31	; 0x1f
    4d08:	00 97       	sbiw	r24, 0x00	; 0
    4d0a:	69 f7       	brne	.-38     	; 0x4ce6 <Play_Note+0x144>
    4d0c:	24 c0       	rjmp	.+72     	; 0x4d56 <Play_Note+0x1b4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4d0e:	68 a1       	ldd	r22, Y+32	; 0x20
    4d10:	79 a1       	ldd	r23, Y+33	; 0x21
    4d12:	8a a1       	ldd	r24, Y+34	; 0x22
    4d14:	9b a1       	ldd	r25, Y+35	; 0x23
    4d16:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4d1a:	dc 01       	movw	r26, r24
    4d1c:	cb 01       	movw	r24, r22
    4d1e:	9f 8f       	std	Y+31, r25	; 0x1f
    4d20:	8e 8f       	std	Y+30, r24	; 0x1e
    4d22:	8e 8d       	ldd	r24, Y+30	; 0x1e
    4d24:	9f 8d       	ldd	r25, Y+31	; 0x1f
    4d26:	9b 8f       	std	Y+27, r25	; 0x1b
    4d28:	8a 8f       	std	Y+26, r24	; 0x1a
    4d2a:	8a 8d       	ldd	r24, Y+26	; 0x1a
    4d2c:	9b 8d       	ldd	r25, Y+27	; 0x1b
    4d2e:	01 97       	sbiw	r24, 0x01	; 1
    4d30:	f1 f7       	brne	.-4      	; 0x4d2e <Play_Note+0x18c>
    4d32:	9b 8f       	std	Y+27, r25	; 0x1b
    4d34:	8a 8f       	std	Y+26, r24	; 0x1a
    4d36:	0f c0       	rjmp	.+30     	; 0x4d56 <Play_Note+0x1b4>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    4d38:	69 a5       	ldd	r22, Y+41	; 0x29
    4d3a:	7a a5       	ldd	r23, Y+42	; 0x2a
    4d3c:	8b a5       	ldd	r24, Y+43	; 0x2b
    4d3e:	9c a5       	ldd	r25, Y+44	; 0x2c
    4d40:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4d44:	dc 01       	movw	r26, r24
    4d46:	cb 01       	movw	r24, r22
    4d48:	88 a7       	std	Y+40, r24	; 0x28
    4d4a:	88 a5       	ldd	r24, Y+40	; 0x28
    4d4c:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    4d4e:	89 8d       	ldd	r24, Y+25	; 0x19
    4d50:	8a 95       	dec	r24
    4d52:	f1 f7       	brne	.-4      	; 0x4d50 <Play_Note+0x1ae>
    4d54:	89 8f       	std	Y+25, r24	; 0x19
		DIO_u8SetPinValue(DIO_u8PORTD,DIO_u8PIN3,DIO_u8PIN_LOW);
    4d56:	83 e0       	ldi	r24, 0x03	; 3
    4d58:	63 e0       	ldi	r22, 0x03	; 3
    4d5a:	40 e0       	ldi	r20, 0x00	; 0
    4d5c:	0e 94 26 12 	call	0x244c	; 0x244c <DIO_u8SetPinValue>
		_delay_us(Frequancy);
    4d60:	8b a9       	ldd	r24, Y+51	; 0x33
    4d62:	9c a9       	ldd	r25, Y+52	; 0x34
    4d64:	cc 01       	movw	r24, r24
    4d66:	a0 e0       	ldi	r26, 0x00	; 0
    4d68:	b0 e0       	ldi	r27, 0x00	; 0
    4d6a:	bc 01       	movw	r22, r24
    4d6c:	cd 01       	movw	r24, r26
    4d6e:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    4d72:	dc 01       	movw	r26, r24
    4d74:	cb 01       	movw	r24, r22
    4d76:	8d 8b       	std	Y+21, r24	; 0x15
    4d78:	9e 8b       	std	Y+22, r25	; 0x16
    4d7a:	af 8b       	std	Y+23, r26	; 0x17
    4d7c:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    4d7e:	6d 89       	ldd	r22, Y+21	; 0x15
    4d80:	7e 89       	ldd	r23, Y+22	; 0x16
    4d82:	8f 89       	ldd	r24, Y+23	; 0x17
    4d84:	98 8d       	ldd	r25, Y+24	; 0x18
    4d86:	2b ea       	ldi	r18, 0xAB	; 171
    4d88:	3a ea       	ldi	r19, 0xAA	; 170
    4d8a:	4a e2       	ldi	r20, 0x2A	; 42
    4d8c:	50 e4       	ldi	r21, 0x40	; 64
    4d8e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4d92:	dc 01       	movw	r26, r24
    4d94:	cb 01       	movw	r24, r22
    4d96:	89 8b       	std	Y+17, r24	; 0x11
    4d98:	9a 8b       	std	Y+18, r25	; 0x12
    4d9a:	ab 8b       	std	Y+19, r26	; 0x13
    4d9c:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    4d9e:	69 89       	ldd	r22, Y+17	; 0x11
    4da0:	7a 89       	ldd	r23, Y+18	; 0x12
    4da2:	8b 89       	ldd	r24, Y+19	; 0x13
    4da4:	9c 89       	ldd	r25, Y+20	; 0x14
    4da6:	20 e0       	ldi	r18, 0x00	; 0
    4da8:	30 e0       	ldi	r19, 0x00	; 0
    4daa:	40 e8       	ldi	r20, 0x80	; 128
    4dac:	5f e3       	ldi	r21, 0x3F	; 63
    4dae:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4db2:	88 23       	and	r24, r24
    4db4:	1c f4       	brge	.+6      	; 0x4dbc <Play_Note+0x21a>
		__ticks = 1;
    4db6:	81 e0       	ldi	r24, 0x01	; 1
    4db8:	88 8b       	std	Y+16, r24	; 0x10
    4dba:	91 c0       	rjmp	.+290    	; 0x4ede <Play_Note+0x33c>
	else if (__tmp > 255)
    4dbc:	69 89       	ldd	r22, Y+17	; 0x11
    4dbe:	7a 89       	ldd	r23, Y+18	; 0x12
    4dc0:	8b 89       	ldd	r24, Y+19	; 0x13
    4dc2:	9c 89       	ldd	r25, Y+20	; 0x14
    4dc4:	20 e0       	ldi	r18, 0x00	; 0
    4dc6:	30 e0       	ldi	r19, 0x00	; 0
    4dc8:	4f e7       	ldi	r20, 0x7F	; 127
    4dca:	53 e4       	ldi	r21, 0x43	; 67
    4dcc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4dd0:	18 16       	cp	r1, r24
    4dd2:	0c f0       	brlt	.+2      	; 0x4dd6 <Play_Note+0x234>
    4dd4:	7b c0       	rjmp	.+246    	; 0x4ecc <Play_Note+0x32a>
	{
		_delay_ms(__us / 1000.0);
    4dd6:	6d 89       	ldd	r22, Y+21	; 0x15
    4dd8:	7e 89       	ldd	r23, Y+22	; 0x16
    4dda:	8f 89       	ldd	r24, Y+23	; 0x17
    4ddc:	98 8d       	ldd	r25, Y+24	; 0x18
    4dde:	20 e0       	ldi	r18, 0x00	; 0
    4de0:	30 e0       	ldi	r19, 0x00	; 0
    4de2:	4a e7       	ldi	r20, 0x7A	; 122
    4de4:	54 e4       	ldi	r21, 0x44	; 68
    4de6:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    4dea:	dc 01       	movw	r26, r24
    4dec:	cb 01       	movw	r24, r22
    4dee:	8c 87       	std	Y+12, r24	; 0x0c
    4df0:	9d 87       	std	Y+13, r25	; 0x0d
    4df2:	ae 87       	std	Y+14, r26	; 0x0e
    4df4:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4df6:	6c 85       	ldd	r22, Y+12	; 0x0c
    4df8:	7d 85       	ldd	r23, Y+13	; 0x0d
    4dfa:	8e 85       	ldd	r24, Y+14	; 0x0e
    4dfc:	9f 85       	ldd	r25, Y+15	; 0x0f
    4dfe:	20 e0       	ldi	r18, 0x00	; 0
    4e00:	30 e0       	ldi	r19, 0x00	; 0
    4e02:	4a ef       	ldi	r20, 0xFA	; 250
    4e04:	54 e4       	ldi	r21, 0x44	; 68
    4e06:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4e0a:	dc 01       	movw	r26, r24
    4e0c:	cb 01       	movw	r24, r22
    4e0e:	88 87       	std	Y+8, r24	; 0x08
    4e10:	99 87       	std	Y+9, r25	; 0x09
    4e12:	aa 87       	std	Y+10, r26	; 0x0a
    4e14:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    4e16:	68 85       	ldd	r22, Y+8	; 0x08
    4e18:	79 85       	ldd	r23, Y+9	; 0x09
    4e1a:	8a 85       	ldd	r24, Y+10	; 0x0a
    4e1c:	9b 85       	ldd	r25, Y+11	; 0x0b
    4e1e:	20 e0       	ldi	r18, 0x00	; 0
    4e20:	30 e0       	ldi	r19, 0x00	; 0
    4e22:	40 e8       	ldi	r20, 0x80	; 128
    4e24:	5f e3       	ldi	r21, 0x3F	; 63
    4e26:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4e2a:	88 23       	and	r24, r24
    4e2c:	2c f4       	brge	.+10     	; 0x4e38 <Play_Note+0x296>
		__ticks = 1;
    4e2e:	81 e0       	ldi	r24, 0x01	; 1
    4e30:	90 e0       	ldi	r25, 0x00	; 0
    4e32:	9f 83       	std	Y+7, r25	; 0x07
    4e34:	8e 83       	std	Y+6, r24	; 0x06
    4e36:	3f c0       	rjmp	.+126    	; 0x4eb6 <Play_Note+0x314>
	else if (__tmp > 65535)
    4e38:	68 85       	ldd	r22, Y+8	; 0x08
    4e3a:	79 85       	ldd	r23, Y+9	; 0x09
    4e3c:	8a 85       	ldd	r24, Y+10	; 0x0a
    4e3e:	9b 85       	ldd	r25, Y+11	; 0x0b
    4e40:	20 e0       	ldi	r18, 0x00	; 0
    4e42:	3f ef       	ldi	r19, 0xFF	; 255
    4e44:	4f e7       	ldi	r20, 0x7F	; 127
    4e46:	57 e4       	ldi	r21, 0x47	; 71
    4e48:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4e4c:	18 16       	cp	r1, r24
    4e4e:	4c f5       	brge	.+82     	; 0x4ea2 <Play_Note+0x300>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4e50:	6c 85       	ldd	r22, Y+12	; 0x0c
    4e52:	7d 85       	ldd	r23, Y+13	; 0x0d
    4e54:	8e 85       	ldd	r24, Y+14	; 0x0e
    4e56:	9f 85       	ldd	r25, Y+15	; 0x0f
    4e58:	20 e0       	ldi	r18, 0x00	; 0
    4e5a:	30 e0       	ldi	r19, 0x00	; 0
    4e5c:	40 e2       	ldi	r20, 0x20	; 32
    4e5e:	51 e4       	ldi	r21, 0x41	; 65
    4e60:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4e64:	dc 01       	movw	r26, r24
    4e66:	cb 01       	movw	r24, r22
    4e68:	bc 01       	movw	r22, r24
    4e6a:	cd 01       	movw	r24, r26
    4e6c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4e70:	dc 01       	movw	r26, r24
    4e72:	cb 01       	movw	r24, r22
    4e74:	9f 83       	std	Y+7, r25	; 0x07
    4e76:	8e 83       	std	Y+6, r24	; 0x06
    4e78:	0f c0       	rjmp	.+30     	; 0x4e98 <Play_Note+0x2f6>
    4e7a:	88 ec       	ldi	r24, 0xC8	; 200
    4e7c:	90 e0       	ldi	r25, 0x00	; 0
    4e7e:	9d 83       	std	Y+5, r25	; 0x05
    4e80:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    4e82:	8c 81       	ldd	r24, Y+4	; 0x04
    4e84:	9d 81       	ldd	r25, Y+5	; 0x05
    4e86:	01 97       	sbiw	r24, 0x01	; 1
    4e88:	f1 f7       	brne	.-4      	; 0x4e86 <Play_Note+0x2e4>
    4e8a:	9d 83       	std	Y+5, r25	; 0x05
    4e8c:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4e8e:	8e 81       	ldd	r24, Y+6	; 0x06
    4e90:	9f 81       	ldd	r25, Y+7	; 0x07
    4e92:	01 97       	sbiw	r24, 0x01	; 1
    4e94:	9f 83       	std	Y+7, r25	; 0x07
    4e96:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4e98:	8e 81       	ldd	r24, Y+6	; 0x06
    4e9a:	9f 81       	ldd	r25, Y+7	; 0x07
    4e9c:	00 97       	sbiw	r24, 0x00	; 0
    4e9e:	69 f7       	brne	.-38     	; 0x4e7a <Play_Note+0x2d8>
    4ea0:	24 c0       	rjmp	.+72     	; 0x4eea <Play_Note+0x348>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4ea2:	68 85       	ldd	r22, Y+8	; 0x08
    4ea4:	79 85       	ldd	r23, Y+9	; 0x09
    4ea6:	8a 85       	ldd	r24, Y+10	; 0x0a
    4ea8:	9b 85       	ldd	r25, Y+11	; 0x0b
    4eaa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4eae:	dc 01       	movw	r26, r24
    4eb0:	cb 01       	movw	r24, r22
    4eb2:	9f 83       	std	Y+7, r25	; 0x07
    4eb4:	8e 83       	std	Y+6, r24	; 0x06
    4eb6:	8e 81       	ldd	r24, Y+6	; 0x06
    4eb8:	9f 81       	ldd	r25, Y+7	; 0x07
    4eba:	9b 83       	std	Y+3, r25	; 0x03
    4ebc:	8a 83       	std	Y+2, r24	; 0x02
    4ebe:	8a 81       	ldd	r24, Y+2	; 0x02
    4ec0:	9b 81       	ldd	r25, Y+3	; 0x03
    4ec2:	01 97       	sbiw	r24, 0x01	; 1
    4ec4:	f1 f7       	brne	.-4      	; 0x4ec2 <Play_Note+0x320>
    4ec6:	9b 83       	std	Y+3, r25	; 0x03
    4ec8:	8a 83       	std	Y+2, r24	; 0x02
    4eca:	0f c0       	rjmp	.+30     	; 0x4eea <Play_Note+0x348>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    4ecc:	69 89       	ldd	r22, Y+17	; 0x11
    4ece:	7a 89       	ldd	r23, Y+18	; 0x12
    4ed0:	8b 89       	ldd	r24, Y+19	; 0x13
    4ed2:	9c 89       	ldd	r25, Y+20	; 0x14
    4ed4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4ed8:	dc 01       	movw	r26, r24
    4eda:	cb 01       	movw	r24, r22
    4edc:	88 8b       	std	Y+16, r24	; 0x10
    4ede:	88 89       	ldd	r24, Y+16	; 0x10
    4ee0:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    4ee2:	89 81       	ldd	r24, Y+1	; 0x01
    4ee4:	8a 95       	dec	r24
    4ee6:	f1 f7       	brne	.-4      	; 0x4ee4 <Play_Note+0x342>
    4ee8:	89 83       	std	Y+1, r24	; 0x01
	return n;
}

void Play_Note(u16 Frequancy,u8 Delay_MilliSec)
{
	for(int i=0; i<Delay_MilliSec ; i++)
    4eea:	89 a9       	ldd	r24, Y+49	; 0x31
    4eec:	9a a9       	ldd	r25, Y+50	; 0x32
    4eee:	01 96       	adiw	r24, 0x01	; 1
    4ef0:	9a ab       	std	Y+50, r25	; 0x32
    4ef2:	89 ab       	std	Y+49, r24	; 0x31
    4ef4:	8d a9       	ldd	r24, Y+53	; 0x35
    4ef6:	28 2f       	mov	r18, r24
    4ef8:	30 e0       	ldi	r19, 0x00	; 0
    4efa:	89 a9       	ldd	r24, Y+49	; 0x31
    4efc:	9a a9       	ldd	r25, Y+50	; 0x32
    4efe:	82 17       	cp	r24, r18
    4f00:	93 07       	cpc	r25, r19
    4f02:	0c f4       	brge	.+2      	; 0x4f06 <Play_Note+0x364>
    4f04:	5e ce       	rjmp	.-836    	; 0x4bc2 <Play_Note+0x20>
		DIO_u8SetPinValue(DIO_u8PORTD,DIO_u8PIN3,DIO_u8PIN_HIGH);
		_delay_us(Frequancy);
		DIO_u8SetPinValue(DIO_u8PORTD,DIO_u8PIN3,DIO_u8PIN_LOW);
		_delay_us(Frequancy);
	}
}
    4f06:	e5 96       	adiw	r28, 0x35	; 53
    4f08:	0f b6       	in	r0, 0x3f	; 63
    4f0a:	f8 94       	cli
    4f0c:	de bf       	out	0x3e, r29	; 62
    4f0e:	0f be       	out	0x3f, r0	; 63
    4f10:	cd bf       	out	0x3d, r28	; 61
    4f12:	cf 91       	pop	r28
    4f14:	df 91       	pop	r29
    4f16:	08 95       	ret

00004f18 <__mulsi3>:
    4f18:	62 9f       	mul	r22, r18
    4f1a:	d0 01       	movw	r26, r0
    4f1c:	73 9f       	mul	r23, r19
    4f1e:	f0 01       	movw	r30, r0
    4f20:	82 9f       	mul	r24, r18
    4f22:	e0 0d       	add	r30, r0
    4f24:	f1 1d       	adc	r31, r1
    4f26:	64 9f       	mul	r22, r20
    4f28:	e0 0d       	add	r30, r0
    4f2a:	f1 1d       	adc	r31, r1
    4f2c:	92 9f       	mul	r25, r18
    4f2e:	f0 0d       	add	r31, r0
    4f30:	83 9f       	mul	r24, r19
    4f32:	f0 0d       	add	r31, r0
    4f34:	74 9f       	mul	r23, r20
    4f36:	f0 0d       	add	r31, r0
    4f38:	65 9f       	mul	r22, r21
    4f3a:	f0 0d       	add	r31, r0
    4f3c:	99 27       	eor	r25, r25
    4f3e:	72 9f       	mul	r23, r18
    4f40:	b0 0d       	add	r27, r0
    4f42:	e1 1d       	adc	r30, r1
    4f44:	f9 1f       	adc	r31, r25
    4f46:	63 9f       	mul	r22, r19
    4f48:	b0 0d       	add	r27, r0
    4f4a:	e1 1d       	adc	r30, r1
    4f4c:	f9 1f       	adc	r31, r25
    4f4e:	bd 01       	movw	r22, r26
    4f50:	cf 01       	movw	r24, r30
    4f52:	11 24       	eor	r1, r1
    4f54:	08 95       	ret

00004f56 <__udivmodqi4>:
    4f56:	99 1b       	sub	r25, r25
    4f58:	79 e0       	ldi	r23, 0x09	; 9
    4f5a:	04 c0       	rjmp	.+8      	; 0x4f64 <__udivmodqi4_ep>

00004f5c <__udivmodqi4_loop>:
    4f5c:	99 1f       	adc	r25, r25
    4f5e:	96 17       	cp	r25, r22
    4f60:	08 f0       	brcs	.+2      	; 0x4f64 <__udivmodqi4_ep>
    4f62:	96 1b       	sub	r25, r22

00004f64 <__udivmodqi4_ep>:
    4f64:	88 1f       	adc	r24, r24
    4f66:	7a 95       	dec	r23
    4f68:	c9 f7       	brne	.-14     	; 0x4f5c <__udivmodqi4_loop>
    4f6a:	80 95       	com	r24
    4f6c:	08 95       	ret

00004f6e <__udivmodhi4>:
    4f6e:	aa 1b       	sub	r26, r26
    4f70:	bb 1b       	sub	r27, r27
    4f72:	51 e1       	ldi	r21, 0x11	; 17
    4f74:	07 c0       	rjmp	.+14     	; 0x4f84 <__udivmodhi4_ep>

00004f76 <__udivmodhi4_loop>:
    4f76:	aa 1f       	adc	r26, r26
    4f78:	bb 1f       	adc	r27, r27
    4f7a:	a6 17       	cp	r26, r22
    4f7c:	b7 07       	cpc	r27, r23
    4f7e:	10 f0       	brcs	.+4      	; 0x4f84 <__udivmodhi4_ep>
    4f80:	a6 1b       	sub	r26, r22
    4f82:	b7 0b       	sbc	r27, r23

00004f84 <__udivmodhi4_ep>:
    4f84:	88 1f       	adc	r24, r24
    4f86:	99 1f       	adc	r25, r25
    4f88:	5a 95       	dec	r21
    4f8a:	a9 f7       	brne	.-22     	; 0x4f76 <__udivmodhi4_loop>
    4f8c:	80 95       	com	r24
    4f8e:	90 95       	com	r25
    4f90:	bc 01       	movw	r22, r24
    4f92:	cd 01       	movw	r24, r26
    4f94:	08 95       	ret

00004f96 <__udivmodsi4>:
    4f96:	a1 e2       	ldi	r26, 0x21	; 33
    4f98:	1a 2e       	mov	r1, r26
    4f9a:	aa 1b       	sub	r26, r26
    4f9c:	bb 1b       	sub	r27, r27
    4f9e:	fd 01       	movw	r30, r26
    4fa0:	0d c0       	rjmp	.+26     	; 0x4fbc <__udivmodsi4_ep>

00004fa2 <__udivmodsi4_loop>:
    4fa2:	aa 1f       	adc	r26, r26
    4fa4:	bb 1f       	adc	r27, r27
    4fa6:	ee 1f       	adc	r30, r30
    4fa8:	ff 1f       	adc	r31, r31
    4faa:	a2 17       	cp	r26, r18
    4fac:	b3 07       	cpc	r27, r19
    4fae:	e4 07       	cpc	r30, r20
    4fb0:	f5 07       	cpc	r31, r21
    4fb2:	20 f0       	brcs	.+8      	; 0x4fbc <__udivmodsi4_ep>
    4fb4:	a2 1b       	sub	r26, r18
    4fb6:	b3 0b       	sbc	r27, r19
    4fb8:	e4 0b       	sbc	r30, r20
    4fba:	f5 0b       	sbc	r31, r21

00004fbc <__udivmodsi4_ep>:
    4fbc:	66 1f       	adc	r22, r22
    4fbe:	77 1f       	adc	r23, r23
    4fc0:	88 1f       	adc	r24, r24
    4fc2:	99 1f       	adc	r25, r25
    4fc4:	1a 94       	dec	r1
    4fc6:	69 f7       	brne	.-38     	; 0x4fa2 <__udivmodsi4_loop>
    4fc8:	60 95       	com	r22
    4fca:	70 95       	com	r23
    4fcc:	80 95       	com	r24
    4fce:	90 95       	com	r25
    4fd0:	9b 01       	movw	r18, r22
    4fd2:	ac 01       	movw	r20, r24
    4fd4:	bd 01       	movw	r22, r26
    4fd6:	cf 01       	movw	r24, r30
    4fd8:	08 95       	ret

00004fda <__prologue_saves__>:
    4fda:	2f 92       	push	r2
    4fdc:	3f 92       	push	r3
    4fde:	4f 92       	push	r4
    4fe0:	5f 92       	push	r5
    4fe2:	6f 92       	push	r6
    4fe4:	7f 92       	push	r7
    4fe6:	8f 92       	push	r8
    4fe8:	9f 92       	push	r9
    4fea:	af 92       	push	r10
    4fec:	bf 92       	push	r11
    4fee:	cf 92       	push	r12
    4ff0:	df 92       	push	r13
    4ff2:	ef 92       	push	r14
    4ff4:	ff 92       	push	r15
    4ff6:	0f 93       	push	r16
    4ff8:	1f 93       	push	r17
    4ffa:	cf 93       	push	r28
    4ffc:	df 93       	push	r29
    4ffe:	cd b7       	in	r28, 0x3d	; 61
    5000:	de b7       	in	r29, 0x3e	; 62
    5002:	ca 1b       	sub	r28, r26
    5004:	db 0b       	sbc	r29, r27
    5006:	0f b6       	in	r0, 0x3f	; 63
    5008:	f8 94       	cli
    500a:	de bf       	out	0x3e, r29	; 62
    500c:	0f be       	out	0x3f, r0	; 63
    500e:	cd bf       	out	0x3d, r28	; 61
    5010:	09 94       	ijmp

00005012 <__epilogue_restores__>:
    5012:	2a 88       	ldd	r2, Y+18	; 0x12
    5014:	39 88       	ldd	r3, Y+17	; 0x11
    5016:	48 88       	ldd	r4, Y+16	; 0x10
    5018:	5f 84       	ldd	r5, Y+15	; 0x0f
    501a:	6e 84       	ldd	r6, Y+14	; 0x0e
    501c:	7d 84       	ldd	r7, Y+13	; 0x0d
    501e:	8c 84       	ldd	r8, Y+12	; 0x0c
    5020:	9b 84       	ldd	r9, Y+11	; 0x0b
    5022:	aa 84       	ldd	r10, Y+10	; 0x0a
    5024:	b9 84       	ldd	r11, Y+9	; 0x09
    5026:	c8 84       	ldd	r12, Y+8	; 0x08
    5028:	df 80       	ldd	r13, Y+7	; 0x07
    502a:	ee 80       	ldd	r14, Y+6	; 0x06
    502c:	fd 80       	ldd	r15, Y+5	; 0x05
    502e:	0c 81       	ldd	r16, Y+4	; 0x04
    5030:	1b 81       	ldd	r17, Y+3	; 0x03
    5032:	aa 81       	ldd	r26, Y+2	; 0x02
    5034:	b9 81       	ldd	r27, Y+1	; 0x01
    5036:	ce 0f       	add	r28, r30
    5038:	d1 1d       	adc	r29, r1
    503a:	0f b6       	in	r0, 0x3f	; 63
    503c:	f8 94       	cli
    503e:	de bf       	out	0x3e, r29	; 62
    5040:	0f be       	out	0x3f, r0	; 63
    5042:	cd bf       	out	0x3d, r28	; 61
    5044:	ed 01       	movw	r28, r26
    5046:	08 95       	ret

00005048 <_exit>:
    5048:	f8 94       	cli

0000504a <__stop_program>:
    504a:	ff cf       	rjmp	.-2      	; 0x504a <__stop_program>
